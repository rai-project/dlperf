// Code generated by "esc -o generated_data.go -pkg layer -prefix codegen -private codegen"; DO NOT EDIT.

package layer

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/scope/add_tensor.tmpl": {
		local:   "codegen/scope/add_tensor.tmpl",
		size:    421,
		modtime: 1559598941,
		compressed: `
H4sIAAAAAAAC/5yRzUrDQBSF9/MUdxGkguQBYhWapGCRRmja1TAMt5mLDXZ+nN4I9efdZSopKLpxec6F
75wzI6SEiO6RIDPIyMdAUNxAXiPj+hjoAEoJJhv2yATTbjDOlcjdrvHRLr0hzbBN2vlotfWGbsWBkfsO
XnxvQErI8pJct7MYnxq0BErp5I5x+cl8hyEEiumoT/y2fyUtZZafVTolY+P654HOzEWt1GQ7qqJoGZku
IJWgS3gT8EeHhQ376bciVRoMSl39XDT5gl0LgHLeVHfL2epe/06d1bWuHjbNer5q/7VkjPpIP0POpPf/
DAAA///2ix2wpQEAAA==
`,
	},

	"/scope/base_prefix.tmpl": {
		local:   "codegen/scope/base_prefix.tmpl",
		size:    622,
		modtime: 1559601140,
		compressed: `
H4sIAAAAAAAC/5yRUWvqQBCF3/dXHPRySUDyA+LlQqKhlda0GH2KYVmTUbc2G5vd9KEx/71sW6UFi7Rv
e5iZ/eac6ct1QWtEcRDeRjxN4YWk8m0p6l0sSkKWMSVK0nuRE86VOQ+FybeJfCGepn+8k7KlNPUWSj41
dJqajLMMLWP9gtZSEcIoHl1Pg9nNWTafxPeLOQ9mV4njYsmAoN5op22xZLYfB5RiR1zUm6YkZbTdF+g6
lzGmjTAyR14pbaBN4ful2P/TppZqM0BRNatH+g+p9o2xH+jv1m3bL6y8apSh+g3VdcOfW+FxMI0++bEN
2mnt0FHhgIdKKvQG6CHLrJ0PN8+VLC6RgvGYj+4W8TyaJb84j7M6Kt9PjDD0FxZOLlqG96d3DMGTSlNt
nMspukPWsdcAAAD///uXLOluAgAA
`,
	},

	"/scope/base_suffix.tmpl": {
		local:   "codegen/scope/base_suffix.tmpl",
		size:    964,
		modtime: 1559286169,
		compressed: `
H4sIAAAAAAAC/8ySQW+yQBCG7/yKSfQAyfdhzzVtApW0pkKM4mndkFEG2RS2CMvBpv3vzWpVrKTWW28w
w7z7PMN2YkqEJHC94OHJdybPEWNguySXaY7lS4A5AefmwoK5wRh0MVu9lkKl+YjkSqVwewcZSbCdfb0C
zoExEAnQ+vz7G90+HGYurP/3cwMATgG6ZwTRMBjPwsiZPEaB43tT8/rBxsysIh9ljVkocjKt/k6Osoq+
6EuUK2rQa89vjsdzQ88fj5zQMxf/4GRHwPmf8QONRjIGzo3jk3F0jVGh2hS0VR2gwnBTkDa9AGC2Y+nq
PtLeFt+hLgoqdTNyUS3TqXijiLGufXjTLV2YSbGu6ZA5HHBu9RvYnVrGlFy4tI3NXDuw+we/mzI+oNfb
gknMqSpwSdCa/rN0m7PRIRmLROd7geOOvHaAzwAAAP//EMB1HcQDAAA=
`,
	},

	"/scope/batchnorm.tmpl": {
		local:   "codegen/scope/batchnorm.tmpl",
		size:    421,
		modtime: 1559286062,
		compressed: `
H4sIAAAAAAAC/5yRzUrDQBSF9/MUdxGkguQBYhWapGCRRmja1TAMt5mLDXZ+nN4I9efdZSopKLpxec6F
75wzI6SEiO6RIDPIyMdAUNxAXiPj+hjoAEoJJhv2yATTbjDOlcjdrvHRLr0hzbBN2vlotfWGbsWBkfsO
XnxvQErI8pJct7MYnxq0BErp5I5x+cl8hyEEiumoT/y2fyUtZZafVTolY+P654HOzEWt1GQ7qqJoGZku
IJWgS3gT8EeHhQ376bciVRoMSl39XDT5gl0LgHLeVHfL2epe/06d1bWuHjbNer5q/7VkjPpIP0POpPf/
DAAA///2ix2wpQEAAA==
`,
	},

	"/scope/conv_bias.tmpl": {
		local:   "codegen/scope/conv_bias.tmpl",
		size:    698,
		modtime: 1559286069,
		compressed: `
H4sIAAAAAAAC/6xSTWuDQBS851c80lDSi7mnH5CokFC6iqunZVm2+myW6mp0U0g//nvZWCOBHJrSm2/e
ODM7PMagkfoFYZJJI82+Rpjfg+NJI+N9jS1wPgJgDFQOuB1YDpElwjhG3VaNWzW4kkU+7thXKs8wBzfx
CBE0CcMgiqmIfUKDSAQh7QRRZx29NdKoFN4qlVl84ixRp5tSNq8HD86FRU+NP2FX19jYpVhKk26oekfB
2MQ5TnZlgUSr7Q6PmmuP8+lzP83n1EiD14cQeAMfI4BLn/vzx5nc67Iu7k7Cu7ZU4Pxh2hne9n5YtPif
cn25AEufuKunRfQozqsuPE+4QUJiP6J/KnOw/rr8VFBnKofZDH55LsPXdwAAAP//XJVx8boCAAA=
`,
	},

	"/scope/conv_bwd.tmpl": {
		local:   "codegen/scope/conv_bwd.tmpl",
		size:    912,
		modtime: 1559286078,
		compressed: `
H4sIAAAAAAAC/6xTXYvbMBB8z69YrqFc4fDR1/R64I+UHCV28MeTEUK11omoLDm2nJB+/PciO4kbmkJT
7s27O94Zz3jzHBqm1ghTzgwzhxph9hGcgBmWHmpsgZAJQJ6DKAG3I8oJWYVwl6JqdePrBhdMlncD+o0o
OZbgZ0EY0iRbraI4TWg6D5MoptEqGRai4gPcYFVLZhCeRhrH12rn7bnVAO+BECg6rpTtatkZoZW351ak
K9eamn6fbPEvwE9CGmx+g/bUUIwgyuRaN8JsqucJQGuYEQXstOAWPnU8VMWmYs3X/qsJobZ7acUP6Ooa
GzukHjPFJhHfkOb51DlXdmQbmRLbDs87XwJC7r+cqtksMczg214EvoPvE4BbAzi+cUX3S1XLpwvxfm8x
IQ/X7Xg4xnhOjy7ddPF8P6j7cBJ3NP91uf9kOf0yAN489BdLN/5Mr5O5QUD9KAvTeZz8VyAj9c/bDwAV
FyU8PsI/HsH49CsAAP//bIKaH5ADAAA=
`,
	},

	"/scope/conv_fwd.tmpl": {
		local:   "codegen/scope/conv_fwd.tmpl",
		size:    827,
		modtime: 1559286086,
		compressed: `
H4sIAAAAAAAC/6ySW2vyQBCG7/0Vg598WJB4b60QE4tSTCSHq7As22SiSze7MdlY7OG/lxg1SL2opXc7
h5334Z2JIiiYXCP0EqaZ3ucIowcwbKZZsM+xBEI6AFEEPAXctl2GwzKEboCyVIWlCpwzkXab7n88TTAF
K7Qdh/rhauV6gU+DmeO7HnVXfjMQZdK0a8xywTTCOK4SKS0ld0pUmiv5+JqYYq2ohrhNUibWquB6k006
AKVmmsewUzyph/aMKcp4k7Hi5QBICK2zl9QfUOU5FnWRTpmONz5/QxpFPeMc1aU6EUq+rfA8c2ET0n8+
RaORr5nG/wcIvIP3DsCtXh1/XOFeZLkYX8Bb9UaAkMF1OwZHx89G06UZzCf9hu7+BIeixD/X/q5y2i7A
dOZY86XpPdHrYqZtU8sNnWDm+b9aSCv9efutokx4CsMh/PBe29dXAAAA///HOrW9OwMAAA==
`,
	},

	"/scope/cudnn_conv_bias_activation_fwd.tmpl": {
		local:   "codegen/scope/cudnn_conv_bias_activation_fwd.tmpl",
		size:    900,
		modtime: 1559600713,
		compressed: `
H4sIAAAAAAAC/7RS24riQBB99ysKVxYXJL67rhATF2UxkVyeQtP0pivabNIdk46Lc/n3IUYTnHFgHJi3
7lOXc6pORREUTG4RBpxppo85wuQXGDbTLDjmWAIhPYAoApEA7rssw2EZQj9AWarCUgUuWZr0m+xvIuGY
gBXajkP9cLNxvcCnwcLxXY+6G79piJI36RqzPGUaYRpXXEpLyYNKKy2U/P2fm+lWUQ1xB1KWblUh9C4b
wanAjLU4sDq0VhypBtYCNFMcZz2AUjMtYjgowWvugTFHGe8yVvw7zUEIrdHr4Z6gynMs6iCdMx3vfPGA
NIoGRvurQzUQSrGvsO25sgkZ/r38JhNfM43fTyLwBzz2AO5d6bnihu5VlqfTK/FWbRwQMnpva6/2Mzo7
1RpE12awnA0buT8vajEt8evFvKW9nAnAfOFYy7Xp/aG32U3bppYbOsHC8z9lWUf9fP/Ro+QigfEYPnj4
3eslAAD//6gWG62EAwAA
`,
	},

	"/scope/dropout.tmpl": {
		local:   "codegen/scope/dropout.tmpl",
		size:    790,
		modtime: 1559286099,
		compressed: `
H4sIAAAAAAAC/7yQQU/yQBCG7/srJoF8KYev3EFJWtooUVZD29O62Yx0kI10rXRrgsp/NytpIwka8OBx
ZvK+++zDhIA1mgeCbo4W7aYkGJyDH6HFdFNSBVKyyqLVc3h50jkIAV0/JDNfFrh+5FgQSKnctsn7n8t3
qMuS1u6oQrTzZaJfSQnR9dvJndwiM/q5prZzEknp3TfTYJBYtPQPHAT14I3BNwyTolyd7YGM3Q9AypG3
Cw8ZQBjz8eU0mF2pwy1BFKnxTcbTeJb8irx5auvUksmdQHaU5hbN+xvJvf+juyOMTPhtlqpgdqF4MI0T
79RYm8gqmqKpcZXqgrze8IugTm1yWux3/lR5amCHzrasQybXC+j3IeZBeB0fzLGPAAAA//8DSBk+FgMA
AA==
`,
	},

	"/scope/gemm.tmpl": {
		local:   "codegen/scope/gemm.tmpl",
		size:    790,
		modtime: 1559286108,
		compressed: `
H4sIAAAAAAAC/7yQQU/yQBCG7/srJoF8KYev3EFJWtooUVZD29O62Yx0kI10rXRrgsp/NytpIwka8OBx
ZvK+++zDhIA1mgeCbo4W7aYkGJyDH6HFdFNSBVKyyqLVc3h50jkIAV0/JDNfFrh+5FgQSKnctsn7n8t3
qMuS1u6oQrTzZaJfSQnR9dvJndwiM/q5prZzEknp3TfTYJBYtPQPHAT14I3BNwyTolyd7YGM3Q9AypG3
Cw8ZQBjz8eU0mF2pwy1BFKnxTcbTeJb8irx5auvUksmdQHaU5hbN+xvJvf+juyOMTPhtlqpgdqF4MI0T
79RYm8gqmqKpcZXqgrze8IugTm1yWux3/lR5amCHzrasQybXC+j3IeZBeB0fzLGPAAAA//8DSBk+FgMA
AA==
`,
	},

	"/scope/pooling.tmpl": {
		local:   "codegen/scope/pooling.tmpl",
		size:    429,
		modtime: 1559286114,
		compressed: `
H4sIAAAAAAAC/5yR30rzQBTE7/MUc1E++oHkAWIVmqRgkUZp2quwLMfsoQ0mmzU9Eeqfd5dNaKWgN17O
HPidGSYAigId2R1jYkhIjo4R3SBMSWhzdHyAUgEg3LiahDEre2PtY9vWld2tWsNa4Ealm9bwbQAchKQq
8dpWxuMnYcy23DfUPWfUMJTS3j29CwfzA71z3PmjjknKfV69sS6KSXhW/uSNra1eej4zl6lS06eTiqJc
SPjfEIL/4z0A8EuKZePq2UWUxFeGUleXnaYj7HpgxYssuVvN1/f6Z+o8TXXysM02i3X+py7fzz7Hfdga
v8JXAAAA//+fAa1xrQEAAA==
`,
	},

	"/scope/relu.tmpl": {
		local:   "codegen/scope/relu.tmpl",
		size:    424,
		modtime: 1559288840,
		compressed: `
H4sIAAAAAAAC/5yR20rDQBCG7/MUcxGkguQBYhVyKFikEZr2almWcXewi93Nmk4K9fDuskoCot70cr6B
/8CfCAE9+ieC1CAjnwJBfgNZjYybU6ADSJkwubBHJpjrwXhfaLZHZNv5VWdIMeAElOsM3SYHRrYajp01
IASkWUle7xz2zw06AilVpKNh9gXfYQiB+vhUJbLetfaVlBBpNl3xFcHW25eBJs1lLeXscbzyvGVkuoAY
gi7hLYF/Mixd2M9/BKliZZDy6lel2bfadQJQLprqblWs79XfskVdq+ph22wW6/asKqPVRxyHvIkTfAYA
AP//wHA506gBAAA=
`,
	},

	"/scope/softmax.tmpl": {
		local:   "codegen/scope/softmax.tmpl",
		size:    1621,
		modtime: 1559286126,
		compressed: `
H4sIAAAAAAAC/8RUX2/aPhR9z6e4UtFPicSP9hm6SiZxOzQSKuJIk4JlGXwp0YiTgTOt2/rdJ8OShY4J
Omlr3nJ9/5xz7rGdNIWN1A8IHSWNNI8lQv8N9AJpJHsscQucOwbzci0NwvWiUlrHxdLk8jNZPxSbzKxy
YWC7DwlZx7rQTg0Lha2svFB442yNNNkCPhWZgjSFTm+IerHK5eZDJHMEzoWN1qh6u+A3qMoSN/ZQDKVZ
rOLsC4o07fSaP3tkA4nOPlbY9BwFnLvz+q/fj400+B9YEOjBVwd+g2GUl+vrAyC+1QU47x5jfUDR3Xcf
OABDGvlvQzJ9J46PIUEg/EkSMTqN/4haPerJbhS1snu7ULjMNB4O/2X2lTvvQjy5ZSF5L8JJQD2YtWzR
kNv5olm6NUarMaPh/Zgw+rxXdyfrzx6cezMH4P+bU4KMovuECTK9ExEJaey+tKypSLYYSl3JNctydL3B
ntwPhc6UyJ178De/2XOHHF+SnwRRJGp5b0nMvMGrjSe+n0wJo68IYTy585xzXrATrnH/zfPjDdp3s9IK
lyc4t+z80oL9tTmv6uq8NOfJuUCtsiVcXgKNyHBMj+d9DwAA///+PE/2VQYAAA==
`,
	},

	"/tensorflow/base_prefix.py": {
		local:   "codegen/tensorflow/base_prefix.py",
		size:    408,
		modtime: 1540763436,
		compressed: `
H4sIAAAAAAAC/3TPzUrEMBDA8XufYoiXXZHiWfCgbZGC1IW6vYiE0E3WQDMT8rHSt5fWthsP3ob5/1oy
2lhyATAaO4LwgDZbVuTXyY/bGCR6cmqg7wkHlSlHBnoyhjC3wgnjYaG3f1oMekhSRj6XeNGO8IMVx/KJ
d3VbP79WvKy6uqha9gmPwO5Zlt2AdRrDjr21D8DuptfkdhBBkTP7az2M4YtwExfpvCZMQDOdOHe0OecL
4Dwh79t1swvqH/dyOM7gLAM/28hRGLnbX8G07+NJrB+njRWxbBrofsv6lz6eEFP+EwAA//+73BsbmAEA
AA==
`,
	},

	"/": {
		isDir: true,
		local: "codegen",
	},

	"/scope": {
		isDir: true,
		local: "codegen/scope",
	},

	"/tensorflow": {
		isDir: true,
		local: "codegen/tensorflow",
	},
}
