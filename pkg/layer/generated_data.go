// Code generated by "esc -o generated_data.go -pkg layer -prefix codegen -private codegen"; DO NOT EDIT.

package layer

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/scope/add_tensor.tmpl": {
		local:   "codegen/scope/add_tensor.tmpl",
		size:    465,
		modtime: 1569403082,
		compressed: `
H4sIAAAAAAAC/7xRTUvDQBS851fMIYhe8gPiBzRJwSJGaNrT8lieycMGzbqmr0L9+O/ylBYFvXjo8c0w
OzM7iXMYOdwJ0o6VdRsF+TmyipUX2yhrECVrZe1bPD/2HZxDmhUS2tXA433Ng4DIG7rTZ5/gGzYxymik
L1jbVdO/iHcuzfaXUQYsQ/+0kf2bs4ro+HZ35XmjrHIECyEneE2AYlqXl9eT+ZX/Pc2kqnx5s6wX03nz
L/cvr9MEf9SdDfHh7Efn0j4LRBfftAeL+W4rSuhsq48AAAD//9CCclvRAQAA
`,
	},

	"/scope/base_prefix.tmpl": {
		local:   "codegen/scope/base_prefix.tmpl",
		size:    679,
		modtime: 1569406439,
		compressed: `
H4sIAAAAAAAC/5yR3U7CQBCF7/cpJmBMm5B9gKImLTRKlGooXJVms7RDWbFb7G69cOm7m+UvmmD8udvJ
zJxvztmuWOa4hDDyg4eQJQnQAGW2Knm9jniJkKZE8hLVhmcI59qMBVxnq1i8I0uSC3qqbCtJ6EyK1wZP
W6NhmoIhpJvjUkiEIIwGd2N/cn+WzUbR02zK/Mlt7LgwJwB+XSjHGJgTOw9bKPkaGa+LpkSplb0XoG1d
QojSXIsMskoqDUrnnlfyzdXuoXQtZNGDvGoWL3gDQm4abVXUdzcb8wWYVY3UWO94bdv/ux8W+ePwkyk7
oBxjl44VbOG5EhI6PehAmlpPB0tvlch/IvnDIRs8zqJpOIn/8UfO4lh5Xqy5xkuwcHTBEDhkyhtd7aNT
cP2LDPsE9iL0GB8VUmGtnb0IXWAhpOP2DqIUZe64bp+05CMAAP//GlWBRacCAAA=
`,
	},

	"/scope/base_suffix.tmpl": {
		local:   "codegen/scope/base_suffix.tmpl",
		size:    976,
		modtime: 1561938584,
		compressed: `
H4sIAAAAAAAC/8ySzW6yQBSG91zFSXQByfdh1zVtAkpaU5kYhdU4mYxykElhivwsbNp7b0aropJad93B
ObwvzzPQiTCWCsH1yODZd6YvnFKwXVTLJBPFKxEZAmPmwoK5QSl0Rbp6K2SVZGNUqyqB+wdIUYHt7Ocl
MAaUgowB15fP3+n18WWDcEiIubD+P84NADjF6F5w8BGZhAF3pk+cOL43M28PNjJhib5QtUgDmaFp9XeK
mJb47VAItcKGg7Y9Mz1T4YHnT8ZO4JmLf3ByXsDYn7EEjYYqAsaM45VxNI5EJapNjlvhoahEsMlR+14B
MNux9HRfaW+HH1DnORZ6yV1RLZOZfEdOadc+3OmVHoRKrms8dI6GjFn9BnanVhHGV37gxsncGth9g9+l
jE/o9bZgSmRY5mKJ0Nr+s3Sbs9FBFclY93vEccdeO8BXAAAA//9DCk4p0AMAAA==
`,
	},

	"/scope/batchnorm.tmpl": {
		local:   "codegen/scope/batchnorm.tmpl",
		size:    528,
		modtime: 1569403092,
		compressed: `
H4sIAAAAAAAC/7xSy0rDQBTdz1fcRRAFyQfEKjRJwSKN0LSrYRhuMxcb7Dyc3gj18e8ylRYV3bjo8pwL
5zUjpISI7oEgM8jIu0BQXENeI+NiF2gLSgkmGzbIBKNuMM6VyN268dHOvCHNsErY+Wi19YZuxJaR+w6e
fW9ASsjykly3thgfG7QESunEHuzyPfkGQwgU01Hv9dv+hbSUWX5E6ZSIpeufBjpqTmulzlcHVBQtI9MZ
pBB0Aa8CoJw01e1sPL/Tv6cZ17Wu7pfNYjJv/+X+6XUl4I+6Uxs2o2+dq7QtKHX5c7wvWieL/Z4+ATmT
nvojAAD//2RgbHMQAgAA
`,
	},

	"/scope/conv_bias.tmpl": {
		local:   "codegen/scope/conv_bias.tmpl",
		size:    807,
		modtime: 1569403101,
		compressed: `
H4sIAAAAAAAC/7ySSWvzMBCG7/kVQ77w0V6ce7pAvEBCqWws+ySEUO1xI2rLjq0U0uW/F9lNQkoOTSm9
aRbN8/LOMAat1I8Ik1waabYNwuwGHF8amWwb7IDzEQBjoArA9aHLIbJCGCeou7r16hYXsizGQ/c/VeRY
gJf6hAiaRlEYJ1QkAaFhLMKIDgNR50N7Z6RRGTzXKrf5ieOizlaVbJ96BufCZo/Bb7BpGmxtUbjSZCuq
XlAwNnH2kS3ZRKrVeoP7mUuf84uHXTSbUSMN/u9F4CW8jgAA3IB4i/t5fCdO65n7vvDClCRBTH/EH2hX
Pew8bz9/nBC1rJry+sgpz24QOL/9ysOyw98ct9vknzr3fv5dos5VAdMpfPM2D6+PAAAA//850R7IJwMA
AA==
`,
	},

	"/scope/conv_bwd.tmpl": {
		local:   "codegen/scope/conv_bwd.tmpl",
		size:    1021,
		modtime: 1569403111,
		compressed: `
H4sIAAAAAAAC/7xT24rbMBB9z1cM21BaWLz0Nd0u+JKSpcQOvjwZIVRrnIjKkmPLCenl34vsJG7aFJpS
+uaZOZ5zdGYmz6Fhao0w5cwwc6gRZu/ACZhh6aHGFgiZAOQ5iBJwO6KckFUIdymqVje+bnDBZHk3oF+I
kmMJfhaEIU2y1SqK04Sm8zCJYhqtkqEhKj7ADVa1ZAbhcaRxfK123p5bDfAGCIGi40rZrJadEVp5e25F
unKtqen7yRZ/A3wvpMHmB2hPDcUIokyudSPMpnqaALSGGVHATgtu4VPHQ1VsKtZ86l9NCLXZSyu+QlfX
2Ngi9ZgpNon4jDTPp845siWbyJTYdnju+RwQ8urjKZrNEsMMvuxF4Gv4MgEA8Oahv1i68Qd6XY8bBNSP
sjCdx8lf8Q9sb3uy26Z9/OOKqOeqlo8XTvn9PAm5v+79/XFnzqtCl266ePpZ3HHS/5b7V5bTfv5X97/d
fm2ouCjh4QH+8OLGr+8BAAD//3jyzOD9AwAA
`,
	},

	"/scope/conv_fwd.tmpl": {
		local:   "codegen/scope/conv_fwd.tmpl",
		size:    936,
		modtime: 1569403152,
		compressed: `
H4sIAAAAAAAC/7yTS2vCQBDH736KwUppQeLdWiEmFqWYSB6nsCzbZKJLN7sx2Vjs47uXGB/Yeqil9JZ5
ZP4/5r8TRVAwuUDoJEwzvckR+vdg2EyzYJNjCYS0AKIIeAq4OnYZDssQ2gHKUhWWKnDCRNpuuq94mmAK
Vmg7DvXD+dz1Ap8GY8d3PerO/WYgyqRp15jlgmmEQVwlUlpKrpWoNFfy4SUxxUJRDfExSZlYqILrZTZs
AZSaaR7DWvGkHtoxRijjZcaK5y0gIbTOnlK/Q5XnWNRFOmI6Xvr8FWkUdYxDVJfqRCj5qsLDzKlNyM3T
Pur3fc00Xm8h8BbeWgAAo7FjTWam90jP85i2TS03dIKx5/9Kv1G724pdZszujzNQ0ywXg5NNWbX9QEj3
/O67O3sPrtKZGUyGX+FQlPjn2t9V9k/pX7f/cflhoEx4Cr0e/PA4jl+fAQAA//8s1TbNqAMAAA==
`,
	},

	"/scope/cudnn_conv_bias_activation_fwd.tmpl": {
		local:   "codegen/scope/cudnn_conv_bias_activation_fwd.tmpl",
		size:    1009,
		modtime: 1569403147,
		compressed: `
H4sIAAAAAAAC/7xTXYvaQBR991dcrJQWJL5bK8TEohQTycdTGIZp5kaHJjMxmVjs7v73JYlGdF1YF3bf
MufemXNuzrlRBAWTG4QBZ5rpQ44w/gmGzTQLDjmWQEgPIIpAJIC7c5fhsAyhH6AsVWGpAhcsTfpt9xeR
cEzACm3HoX64Xrte4NNg7viuR9213z6IkrftGrM8ZRphEldcSkvJvUorLZT89Y+b6UZRDfEZpCzdqELo
bTaE5oIZa7FndWmlOFINrANopjhOewClZlrEsFeC19wDY4Yy3mas+NvMQQit0cvhHqHKcyzqIp0xHW99
8R9pFA2M7lSXaiCUYldh9+bSJuTbn9NpPPY10/i1EYHf4aEHADCbO9ZiZXq/6W09pm1Tyw2dYO757+Jv
2X40ZPf5d7xxQ9Qyy9PJxZ+y6pQAIcPXLLoyY3iMRZcGujKDxfRaLaYlfryYl7SnTH6qP0/3bxhKLhIY
jeCNW3b+eg4AAP//1u2b3vEDAAA=
`,
	},

	"/scope/dropout.tmpl": {
		local:   "codegen/scope/dropout.tmpl",
		size:    903,
		modtime: 1569403142,
		compressed: `
H4sIAAAAAAAC/7yRT0/CQBDF7/spJoGYcrDcQUn6L0qU1dD2tG42Ix1kI10rbE1Q+e5mJSAkaMADx5nJ
b+bNe0wImKF5ImgWaNEuKoLOJfgxWswWFc1BSja3aPUI3l50AUJA0w/JjCYlzp45lgRSKtdd8/538xPq
qqKZG6oQ7WiS6ndSQjT9TeVGrpEb/VrTZmc/ltJ7XFedTmrR0hk4EdSCDwYQJjy6HgTDG7VfTRDHKrrL
eZYM039dX93qMvjl3X5ZTS92fo6cWSBlb4s9mcylS5FM4bJiByX6Iy3KY86906TaOu89HOBLn9/nmQqG
V4oHgyT1jsU2RD6nAZoap5kuyWt1t2xq1Kag8e7Ov1YeC6yksyVrkCn0GNptSHgQ3iZ7OfYVAAD//7rC
xxuHAwAA
`,
	},

	"/scope/elementwise.tmpl": {
		local:   "codegen/scope/elementwise.tmpl",
		size:    466,
		modtime: 1569403139,
		compressed: `
H4sIAAAAAAAC/7xRTUvDQBS851fMIYhe8gPiBzRJwSJGaNrT8lieycMGzbqmr0L9+O/ylBYFvXjo8c0w
OzM7iXMYOdwJ0o6VdRsF+TmyipUX2yhrECVrZe1bPD/2HZxDmhUS2tXA433Ng4DIG7rTZ5/gGzYxymik
L1jbVdO/iHcuzfaXUQYsQ/+0kf2bs4ro+HZ35XmjrHIECyEneE2AYlqXl9eT+ZX/Pc2kqnx5s6wX03nz
L/cvr9MEf9SdDfHh7Efn0j4LRLj4Jj5YznebUUJnY30EAAD//zTxyejSAQAA
`,
	},

	"/scope/gemm.tmpl": {
		local:   "codegen/scope/gemm.tmpl",
		size:    903,
		modtime: 1569403136,
		compressed: `
H4sIAAAAAAAC/7yRT0/CQBDF7/spJoGYcrDcQUn6L0qU1dD2tG42Ix1kI10rbE1Q+e5mJSAkaMADx5nJ
b+bNe0wImKF5ImgWaNEuKoLOJfgxWswWFc1BSja3aPUI3l50AUJA0w/JjCYlzp45lgRSKtdd8/538xPq
qqKZG6oQ7WiS6ndSQjT9TeVGrpEb/VrTZmc/ltJ7XFedTmrR0hk4EdSCDwYQJjy6HgTDG7VfTRDHKrrL
eZYM039dX93qMvjl3X5ZTS92fo6cWSBlb4s9mcylS5FM4bJiByX6Iy3KY86906TaOu89HOBLn9/nmQqG
V4oHgyT1jsU2RD6nAZoap5kuyWt1t2xq1Kag8e7Ov1YeC6yksyVrkCn0GNptSHgQ3iZ7OfYVAAD//7rC
xxuHAwAA
`,
	},

	"/scope/pooling.tmpl": {
		local:   "codegen/scope/pooling.tmpl",
		size:    538,
		modtime: 1569403130,
		compressed: `
H4sIAAAAAAAC/7yST0vDQBDF7/kU71BEQfIBahWapGCRRmnaU1iWMTu0wWSzphOh/vnusgktBHry4PG9
gfd7OzsBkOdoye4YE0NCcnSM6T3ChIQ2R8cHKBUAwrWrSBizojPWvjRNVdrdqjGsBW5Qum4MPwTAQUjK
Ah9NaXz8JIzYFvua2reUaoZS2rsnXNib3+ic49YPdURS7LPyk3WeT8Kz8iNvbG353vE5c5kodf16UtNp
JiR81ZfgG3wFABAt0vhxNV8/6ct95kmi4+dtulmssz/xB9pdD7uMWNaumo3eHfv9Qqnb8QJHWf9Y/Gc4
BrbGf/lvAAAA//8coBAEGgIAAA==
`,
	},

	"/scope/relu.tmpl": {
		local:   "codegen/scope/relu.tmpl",
		size:    531,
		modtime: 1569403123,
		compressed: `
H4sIAAAAAAAC/7ySzUoDMRDH73mKORRRkH2AtQr7UbBIV+i2pxDCmAw22GTjdrZQP95donRR1IsHj/Mb
mP9HIqSEHsM9wcQiIx8iQX4JWY2Mq0OkHSglmHzcIhNMzWBDKAy7PbLrwqKzpBlwBNp3lq7EjpGdgX3n
LEgJk6ykYDYe+4cGPYFSOtGjYPYOX2CIkfq01CWy2bTuibSUk2yc0iqBdXCPA40357VSp3fHKc9bRqYT
SCboDJ4FQDlrqutFsbzRP7sp6lpXt+tmNVu2f1L/0LoQ8EvcuY/b6ZfMVWoXlDr/1t6nY//m+zX9Awo2
vfZbAAAA//+nO7IzEwIAAA==
`,
	},

	"/scope/softmax.tmpl": {
		local:   "codegen/scope/softmax.tmpl",
		size:    1734,
		modtime: 1569403118,
		compressed: `
H4sIAAAAAAAC/8RUYW/aMBD9nl9xUqspkRjtZ+gqmcTt0EioiCNNCpZl8FGiEScDZ1q39b9PJiMLHRN0
0lp/8/nu3r3nZztpCmup7xHOlTTSPJQIvXfQDaSR7KHEDXDuGMzLlTQIV/NKaR0XC5PLr2R1X6wzs8yF
gU0dEnIX60A7NSwUtrLyQuG1szHSZHP4UmQK0hTOuwPU82Uu158imSNwLmx0N1V3G/wBVVni2h6KgTTz
ZZx9Q5Gm591mZ49sINHZ5wqbnsOAc3e22/V6sZEG34AdAj347gAMaOS/D8nkgzg8DQkC4Y+TiNFJ/E/o
NVbfgb/QHebl6mqPs2+vADjvHBJ4T81W8xfj8WjNg1pZi5wpXGQa98H/wL50Zx2IxzcsJB9FOA6oB9OW
AxtyWws2/rIebDX2kyCKBKPh3Ygw+rRjZyvu706ce1MH4O31MVmG0V3CBJncioiENHafW9ZUJBsMpa7k
imU5ul6/pvhLpxOFcmce/M81feqTw1dVS72T94bEzOu/Gjzx/WRCGH3FEUbjW8855cs84hr3Zf47r99+
oZVWuDjCuWXn5xbUz+a0qsvT0pxH5wy1yhZwcQE0IoMRPZz3MwAA//9hCuCjxgYAAA==
`,
	},

	"/tensorflow/base_prefix.py": {
		local:   "codegen/tensorflow/base_prefix.py",
		size:    408,
		modtime: 1540763436,
		compressed: `
H4sIAAAAAAAC/3TPzUrEMBDA8XufYoiXXZHiWfCgbZGC1IW6vYiE0E3WQDMT8rHSt5fWthsP3ob5/1oy
2lhyATAaO4LwgDZbVuTXyY/bGCR6cmqg7wkHlSlHBnoyhjC3wgnjYaG3f1oMekhSRj6XeNGO8IMVx/KJ
d3VbP79WvKy6uqha9gmPwO5Zlt2AdRrDjr21D8DuptfkdhBBkTP7az2M4YtwExfpvCZMQDOdOHe0OecL
4Dwh79t1swvqH/dyOM7gLAM/28hRGLnbX8G07+NJrB+njRWxbBrofsv6lz6eEFP+EwAA//+73BsbmAEA
AA==
`,
	},

	"/": {
		isDir: true,
		local: "codegen",
	},

	"/scope": {
		isDir: true,
		local: "codegen/scope",
	},

	"/tensorflow": {
		isDir: true,
		local: "codegen/tensorflow",
	},
}
