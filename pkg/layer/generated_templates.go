// Code generated by "esc -o generated_templates.go -pkg layer -prefix codegen/ -private codegen/scope"; DO NOT EDIT.

package layer

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/scope/base_prefix.tmpl": {
		local:   "codegen/scope/base_prefix.tmpl",
		size:    458,
		modtime: 1540749629,
		compressed: `
H4sIAAAAAAAC/5SQ30rDMBjF7/MUhw2kBekDzKtsKzp0Ufbnqgshdl9nHE21Sb3J+u4StKIwEe9yOCf8
Pn5jU+2pQi749C5XRYFsSrZ8qnV7FLomSMmsrsm96JJwrlaqKLKtNa8dfVWLuZQIjI33VBlLmOZidrPk
q9uzALUQD9uN4qvrdZJixwDeHlwSAnYs7nFCrY+kdHvoarLexaOAvk//T1CCL/NvmDhwSYifhoQTnhtj
MbrECFJGivPamxJvjdn/ReLzuZrdb8UmX61/U5M8DmkyWXvt6QKRQCkCw8czK5vOempdZqyj1ifhh4qh
/TSRXrGevQcAAP//NepZasoBAAA=
`,
	},

	"/scope/base_suffix.tmpl": {
		local:   "codegen/scope/base_suffix.tmpl",
		size:    599,
		modtime: 1540749656,
		compressed: `
H4sIAAAAAAAC/5SRwWrCQBCG73mKgeSQQI33SoVNXVqpCWKT0zqEsZnoUrNNY3IQ2ncvUZQtFazHnd1v
/vl23IJLbRgimTw+x2LxkisFYcTmbVNR855QxYDorwJYOkpBQ2bN4NF2/dHodlPB/QOE4nTaAaLVKZXx
fCZS6a/uQCmbQgwGY1g68DvX+xOcT5N5luZi8ZQnIpavfjAY34SdiWzHMZmOtqmu2A9GRx82BSA6llpB
LbX7mg9mE2op3dfci12J9C8P0ldPLcND8Qu6uuamv8yV8sLM6M+Oz+B0ghiMrNnczhRcXlmQJXwrcPzY
/1HOt+OyKXQJwyHIREQzefndTwAAAP//W6VtSVcCAAA=
`,
	},

	"/scope/conv.tmpl": {
		local:   "codegen/scope/conv.tmpl",
		size:    773,
		modtime: 1540749157,
		compressed: `
H4sIAAAAAAAC/6ySX2vCMBTF3/0UFyfDgdR354TaOpRhK/3zVELI2lsNS5Papg7Z9t1HrVpkDibsrb25
95xfTm4UQcHkGqGXMM30PkcYPYFhM82CfY4lENIBiCLgKeC27TIcliF0A5SlKixV4JyJtNt03/E0wRSs
0HYc6oerlesFPg1mju961F35jSDKpGnXmOWCaYRxXCVSWkrulKg0V/L5PTHFWlENcVukTKxVwfUmm3QA
Ss00j2GneFKL9owpyniTseLtAEgIrauX1J9Q5TkW9SGNop4RSr6t8Dy4sAnpv57+RiNfM433Byd8gI8O
wK2BHCeuwC2yXIwvCK06diBkcP3Og2Os5zTp0gzmk35D93iCQ1Hiv3v/dDk9IcB05ljzpem90Otmpm1T
yw2dYOb5v6fe6n/dvnUoE57CcAh/3Lz26zsAAP//K6U0AAUDAAA=
`,
	},

	"/": {
		isDir: true,
		local: "codegen",
	},

	"/scope": {
		isDir: true,
		local: "codegen/scope",
	},
}
