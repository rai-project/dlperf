// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package layer

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	pkg "github.com/rai-project/dlperf/pkg"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer(in *jlexer.Lexer, out *softmaxBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.ArgNames = append(out.ArgNames, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Algorithms = append(out.Algorithms, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v3 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v3)
					out.DataTypes = append(out.DataTypes, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer(out *jwriter.Writer, in softmaxBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v4, v5 := range in.ArgNames {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Algorithms {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.DataTypes {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v9)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v softmaxBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v softmaxBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *softmaxBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *softmaxBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in *jlexer.Lexer, out *pkg.DataType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "ctype":
			out.CType = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out *jwriter.Writer, in pkg.DataType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"ctype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CType))
	}
	out.RawByte('}')
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer1(in *jlexer.Lexer, out *reluBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.ArgNames = append(out.ArgNames, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Algorithms = append(out.Algorithms, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v12 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v12)
					out.DataTypes = append(out.DataTypes, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer1(out *jwriter.Writer, in reluBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.ArgNames {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Algorithms {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.DataTypes {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v18)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reluBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reluBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reluBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reluBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer1(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer2(in *jlexer.Lexer, out *poolingBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "filter_height":
			out.FilterHeight = int64(in.Int64())
		case "filter_width":
			out.FilterWidth = int64(in.Int64())
		case "pad_height":
			out.PadHeight = int64(in.Int64())
		case "pad_width":
			out.PadWidth = int64(in.Int64())
		case "stride_height":
			out.StrideHeight = int64(in.Int64())
		case "stride_width":
			out.StrideWidth = int64(in.Int64())
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.ArgNames = append(out.ArgNames, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.Algorithms = append(out.Algorithms, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v21 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v21)
					out.DataTypes = append(out.DataTypes, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer2(out *jwriter.Writer, in poolingBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.FilterHeight != 0 {
		const prefix string = ",\"filter_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FilterHeight))
	}
	if in.FilterWidth != 0 {
		const prefix string = ",\"filter_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FilterWidth))
	}
	if in.PadHeight != 0 {
		const prefix string = ",\"pad_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PadHeight))
	}
	if in.PadWidth != 0 {
		const prefix string = ",\"pad_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PadWidth))
	}
	if in.StrideHeight != 0 {
		const prefix string = ",\"stride_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StrideHeight))
	}
	if in.StrideWidth != 0 {
		const prefix string = ",\"stride_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StrideWidth))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.ArgNames {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Algorithms {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.DataTypes {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v27)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v poolingBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v poolingBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *poolingBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *poolingBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer2(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer3(in *jlexer.Lexer, out *gemmBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.ArgNames = append(out.ArgNames, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.Algorithms = append(out.Algorithms, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v30 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v30)
					out.DataTypes = append(out.DataTypes, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer3(out *jwriter.Writer, in gemmBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v31, v32 := range in.ArgNames {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v33, v34 := range in.Algorithms {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.DataTypes {
				if v35 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v36)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v gemmBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v gemmBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *gemmBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *gemmBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer3(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer4(in *jlexer.Lexer, out *dropoutBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.ArgNames = append(out.ArgNames, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v38 string
					v38 = string(in.String())
					out.Algorithms = append(out.Algorithms, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v39 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v39)
					out.DataTypes = append(out.DataTypes, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer4(out *jwriter.Writer, in dropoutBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v40, v41 := range in.ArgNames {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.String(string(v41))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v42, v43 := range in.Algorithms {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.DataTypes {
				if v44 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v45)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v dropoutBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v dropoutBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *dropoutBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *dropoutBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer4(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer5(in *jlexer.Lexer, out *convBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "filter_count":
			out.FilterCount = int64(in.Int64())
		case "filter_height":
			out.FilterHeight = int64(in.Int64())
		case "filter_width":
			out.FilterWidth = int64(in.Int64())
		case "pad_height":
			out.PadHeight = int64(in.Int64())
		case "pad_width":
			out.PadWidth = int64(in.Int64())
		case "stride_height":
			out.StrideHeight = int64(in.Int64())
		case "stride_width":
			out.StrideWidth = int64(in.Int64())
		case "dilation_width":
			out.DilationWidth = int64(in.Int64())
		case "dilation_height":
			out.DilationHeight = int64(in.Int64())
		case "conv_bwd_type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ConvBwdType).UnmarshalJSON(data))
			}
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.ArgNames = append(out.ArgNames, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v47 string
					v47 = string(in.String())
					out.Algorithms = append(out.Algorithms, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v48 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v48)
					out.DataTypes = append(out.DataTypes, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer5(out *jwriter.Writer, in convBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.FilterCount != 0 {
		const prefix string = ",\"filter_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FilterCount))
	}
	if in.FilterHeight != 0 {
		const prefix string = ",\"filter_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FilterHeight))
	}
	if in.FilterWidth != 0 {
		const prefix string = ",\"filter_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FilterWidth))
	}
	if in.PadHeight != 0 {
		const prefix string = ",\"pad_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PadHeight))
	}
	if in.PadWidth != 0 {
		const prefix string = ",\"pad_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PadWidth))
	}
	if in.StrideHeight != 0 {
		const prefix string = ",\"stride_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StrideHeight))
	}
	if in.StrideWidth != 0 {
		const prefix string = ",\"stride_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StrideWidth))
	}
	if in.DilationWidth != 0 {
		const prefix string = ",\"dilation_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DilationWidth))
	}
	if in.DilationHeight != 0 {
		const prefix string = ",\"dilation_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DilationHeight))
	}
	if in.ConvBwdType != 0 {
		const prefix string = ",\"conv_bwd_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ConvBwdType).MarshalJSON())
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v49, v50 := range in.ArgNames {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.String(string(v50))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v51, v52 := range in.Algorithms {
				if v51 > 0 {
					out.RawByte(',')
				}
				out.String(string(v52))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v53, v54 := range in.DataTypes {
				if v53 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v54)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v convBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v convBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *convBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *convBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer5(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer6(in *jlexer.Lexer, out *batchnormBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_training":
			out.IsTraining = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v55 string
					v55 = string(in.String())
					out.ArgNames = append(out.ArgNames, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v56 string
					v56 = string(in.String())
					out.Algorithms = append(out.Algorithms, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v57 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v57)
					out.DataTypes = append(out.DataTypes, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer6(out *jwriter.Writer, in batchnormBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v58, v59 := range in.ArgNames {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.String(string(v59))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v60, v61 := range in.Algorithms {
				if v60 > 0 {
					out.RawByte(',')
				}
				out.String(string(v61))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v62, v63 := range in.DataTypes {
				if v62 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v63)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v batchnormBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v batchnormBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *batchnormBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *batchnormBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer6(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer7(in *jlexer.Lexer, out *Unsqueeze) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axes":
			if in.IsNull() {
				in.Skip()
				out.Axes = nil
			} else {
				in.Delim('[')
				if out.Axes == nil {
					if !in.IsDelim(']') {
						out.Axes = make([]int64, 0, 8)
					} else {
						out.Axes = []int64{}
					}
				} else {
					out.Axes = (out.Axes)[:0]
				}
				for !in.IsDelim(']') {
					var v64 int64
					v64 = int64(in.Int64())
					out.Axes = append(out.Axes, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v65 string
					v65 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v66 string
					v66 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v67 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v67 = nil
					} else {
						in.Delim('[')
						if v67 == nil {
							if !in.IsDelim(']') {
								v67 = make(pkg.Shape, 0, 8)
							} else {
								v67 = pkg.Shape{}
							}
						} else {
							v67 = (v67)[:0]
						}
						for !in.IsDelim(']') {
							var v68 int64
							v68 = int64(in.Int64())
							v67 = append(v67, v68)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v69 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v69 = nil
					} else {
						in.Delim('[')
						if v69 == nil {
							if !in.IsDelim(']') {
								v69 = make(pkg.Shape, 0, 8)
							} else {
								v69 = pkg.Shape{}
							}
						} else {
							v69 = (v69)[:0]
						}
						for !in.IsDelim(']') {
							var v70 int64
							v70 = int64(in.Int64())
							v69 = append(v69, v70)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer7(out *jwriter.Writer, in Unsqueeze) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Axes) != 0 {
		const prefix string = ",\"axes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v71, v72 := range in.Axes {
				if v71 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v72))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v73, v74 := range in.InputNames_ {
				if v73 > 0 {
					out.RawByte(',')
				}
				out.String(string(v74))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v75, v76 := range in.OutputNames_ {
				if v75 > 0 {
					out.RawByte(',')
				}
				out.String(string(v76))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v77, v78 := range in.InputShapes_ {
				if v77 > 0 {
					out.RawByte(',')
				}
				if v78 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v79, v80 := range v78 {
						if v79 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v80))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v81, v82 := range in.OutputShapes_ {
				if v81 > 0 {
					out.RawByte(',')
				}
				if v82 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v83, v84 := range v82 {
						if v83 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v84))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Unsqueeze) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Unsqueeze) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Unsqueeze) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Unsqueeze) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer7(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer8(in *jlexer.Lexer, out *Transpose) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Permutation = nil
			} else {
				in.Delim('[')
				if out.Permutation == nil {
					if !in.IsDelim(']') {
						out.Permutation = make([]int64, 0, 8)
					} else {
						out.Permutation = []int64{}
					}
				} else {
					out.Permutation = (out.Permutation)[:0]
				}
				for !in.IsDelim(']') {
					var v85 int64
					v85 = int64(in.Int64())
					out.Permutation = append(out.Permutation, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v86 string
					v86 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v87 string
					v87 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v87)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v88 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v88 = nil
					} else {
						in.Delim('[')
						if v88 == nil {
							if !in.IsDelim(']') {
								v88 = make(pkg.Shape, 0, 8)
							} else {
								v88 = pkg.Shape{}
							}
						} else {
							v88 = (v88)[:0]
						}
						for !in.IsDelim(']') {
							var v89 int64
							v89 = int64(in.Int64())
							v88 = append(v88, v89)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v90 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v90 = nil
					} else {
						in.Delim('[')
						if v90 == nil {
							if !in.IsDelim(']') {
								v90 = make(pkg.Shape, 0, 8)
							} else {
								v90 = pkg.Shape{}
							}
						} else {
							v90 = (v90)[:0]
						}
						for !in.IsDelim(']') {
							var v91 int64
							v91 = int64(in.Int64())
							v90 = append(v90, v91)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v90)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer8(out *jwriter.Writer, in Transpose) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Permutation) != 0 {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v92, v93 := range in.Permutation {
				if v92 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v93))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v94, v95 := range in.InputNames_ {
				if v94 > 0 {
					out.RawByte(',')
				}
				out.String(string(v95))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v96, v97 := range in.OutputNames_ {
				if v96 > 0 {
					out.RawByte(',')
				}
				out.String(string(v97))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v98, v99 := range in.InputShapes_ {
				if v98 > 0 {
					out.RawByte(',')
				}
				if v99 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v100, v101 := range v99 {
						if v100 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v101))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v102, v103 := range in.OutputShapes_ {
				if v102 > 0 {
					out.RawByte(',')
				}
				if v103 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v104, v105 := range v103 {
						if v104 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v105))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Transpose) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Transpose) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Transpose) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Transpose) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer8(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer9(in *jlexer.Lexer, out *TopK) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "k":
			out.K = int64(in.Int64())
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v106 string
					v106 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v107 string
					v107 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v107)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v108 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v108 = nil
					} else {
						in.Delim('[')
						if v108 == nil {
							if !in.IsDelim(']') {
								v108 = make(pkg.Shape, 0, 8)
							} else {
								v108 = pkg.Shape{}
							}
						} else {
							v108 = (v108)[:0]
						}
						for !in.IsDelim(']') {
							var v109 int64
							v109 = int64(in.Int64())
							v108 = append(v108, v109)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v108)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v110 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v110 = nil
					} else {
						in.Delim('[')
						if v110 == nil {
							if !in.IsDelim(']') {
								v110 = make(pkg.Shape, 0, 8)
							} else {
								v110 = pkg.Shape{}
							}
						} else {
							v110 = (v110)[:0]
						}
						for !in.IsDelim(']') {
							var v111 int64
							v111 = int64(in.Int64())
							v110 = append(v110, v111)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v110)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer9(out *jwriter.Writer, in TopK) {
	out.RawByte('{')
	first := true
	_ = first
	if in.K != 0 {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.K))
	}
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v112, v113 := range in.InputNames_ {
				if v112 > 0 {
					out.RawByte(',')
				}
				out.String(string(v113))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v114, v115 := range in.OutputNames_ {
				if v114 > 0 {
					out.RawByte(',')
				}
				out.String(string(v115))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v116, v117 := range in.InputShapes_ {
				if v116 > 0 {
					out.RawByte(',')
				}
				if v117 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v118, v119 := range v117 {
						if v118 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v119))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v120, v121 := range in.OutputShapes_ {
				if v120 > 0 {
					out.RawByte(',')
				}
				if v121 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v122, v123 := range v121 {
						if v122 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v123))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopK) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopK) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopK) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopK) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer9(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer10(in *jlexer.Lexer, out *Squeeze) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axes":
			if in.IsNull() {
				in.Skip()
				out.Axes = nil
			} else {
				in.Delim('[')
				if out.Axes == nil {
					if !in.IsDelim(']') {
						out.Axes = make([]int64, 0, 8)
					} else {
						out.Axes = []int64{}
					}
				} else {
					out.Axes = (out.Axes)[:0]
				}
				for !in.IsDelim(']') {
					var v124 int64
					v124 = int64(in.Int64())
					out.Axes = append(out.Axes, v124)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v125 string
					v125 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v125)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v126 string
					v126 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v126)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v127 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v127 = nil
					} else {
						in.Delim('[')
						if v127 == nil {
							if !in.IsDelim(']') {
								v127 = make(pkg.Shape, 0, 8)
							} else {
								v127 = pkg.Shape{}
							}
						} else {
							v127 = (v127)[:0]
						}
						for !in.IsDelim(']') {
							var v128 int64
							v128 = int64(in.Int64())
							v127 = append(v127, v128)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v127)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v129 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v129 = nil
					} else {
						in.Delim('[')
						if v129 == nil {
							if !in.IsDelim(']') {
								v129 = make(pkg.Shape, 0, 8)
							} else {
								v129 = pkg.Shape{}
							}
						} else {
							v129 = (v129)[:0]
						}
						for !in.IsDelim(']') {
							var v130 int64
							v130 = int64(in.Int64())
							v129 = append(v129, v130)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v129)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer10(out *jwriter.Writer, in Squeeze) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Axes) != 0 {
		const prefix string = ",\"axes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v131, v132 := range in.Axes {
				if v131 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v132))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v133, v134 := range in.InputNames_ {
				if v133 > 0 {
					out.RawByte(',')
				}
				out.String(string(v134))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v135, v136 := range in.OutputNames_ {
				if v135 > 0 {
					out.RawByte(',')
				}
				out.String(string(v136))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v137, v138 := range in.InputShapes_ {
				if v137 > 0 {
					out.RawByte(',')
				}
				if v138 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v139, v140 := range v138 {
						if v139 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v140))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v141, v142 := range in.OutputShapes_ {
				if v141 > 0 {
					out.RawByte(',')
				}
				if v142 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v143, v144 := range v142 {
						if v143 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v144))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Squeeze) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Squeeze) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Squeeze) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Squeeze) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer10(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer11(in *jlexer.Lexer, out *Softmax) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v145 string
					v145 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v145)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v146 string
					v146 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v146)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v147 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v147 = nil
					} else {
						in.Delim('[')
						if v147 == nil {
							if !in.IsDelim(']') {
								v147 = make(pkg.Shape, 0, 8)
							} else {
								v147 = pkg.Shape{}
							}
						} else {
							v147 = (v147)[:0]
						}
						for !in.IsDelim(']') {
							var v148 int64
							v148 = int64(in.Int64())
							v147 = append(v147, v148)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v147)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v149 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v149 = nil
					} else {
						in.Delim('[')
						if v149 == nil {
							if !in.IsDelim(']') {
								v149 = make(pkg.Shape, 0, 8)
							} else {
								v149 = pkg.Shape{}
							}
						} else {
							v149 = (v149)[:0]
						}
						for !in.IsDelim(']') {
							var v150 int64
							v150 = int64(in.Int64())
							v149 = append(v149, v150)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v149)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer11(out *jwriter.Writer, in Softmax) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v151, v152 := range in.InputNames_ {
				if v151 > 0 {
					out.RawByte(',')
				}
				out.String(string(v152))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v153, v154 := range in.OutputNames_ {
				if v153 > 0 {
					out.RawByte(',')
				}
				out.String(string(v154))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v155, v156 := range in.InputShapes_ {
				if v155 > 0 {
					out.RawByte(',')
				}
				if v156 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v157, v158 := range v156 {
						if v157 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v158))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v159, v160 := range in.OutputShapes_ {
				if v159 > 0 {
					out.RawByte(',')
				}
				if v160 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v161, v162 := range v160 {
						if v161 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v162))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Softmax) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Softmax) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Softmax) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Softmax) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer11(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer12(in *jlexer.Lexer, out *Shape) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v163 string
					v163 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v163)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v164 string
					v164 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v164)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v165 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v165 = nil
					} else {
						in.Delim('[')
						if v165 == nil {
							if !in.IsDelim(']') {
								v165 = make(pkg.Shape, 0, 8)
							} else {
								v165 = pkg.Shape{}
							}
						} else {
							v165 = (v165)[:0]
						}
						for !in.IsDelim(']') {
							var v166 int64
							v166 = int64(in.Int64())
							v165 = append(v165, v166)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v165)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v167 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v167 = nil
					} else {
						in.Delim('[')
						if v167 == nil {
							if !in.IsDelim(']') {
								v167 = make(pkg.Shape, 0, 8)
							} else {
								v167 = pkg.Shape{}
							}
						} else {
							v167 = (v167)[:0]
						}
						for !in.IsDelim(']') {
							var v168 int64
							v168 = int64(in.Int64())
							v167 = append(v167, v168)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v167)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer12(out *jwriter.Writer, in Shape) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v169, v170 := range in.InputNames_ {
				if v169 > 0 {
					out.RawByte(',')
				}
				out.String(string(v170))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v171, v172 := range in.OutputNames_ {
				if v171 > 0 {
					out.RawByte(',')
				}
				out.String(string(v172))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v173, v174 := range in.InputShapes_ {
				if v173 > 0 {
					out.RawByte(',')
				}
				if v174 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v175, v176 := range v174 {
						if v175 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v176))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v177, v178 := range in.OutputShapes_ {
				if v177 > 0 {
					out.RawByte(',')
				}
				if v178 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v179, v180 := range v178 {
						if v179 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v180))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Shape) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Shape) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Shape) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Shape) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer12(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer13(in *jlexer.Lexer, out *Scale) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v181 string
					v181 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v181)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v182 string
					v182 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v182)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v183 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v183 = nil
					} else {
						in.Delim('[')
						if v183 == nil {
							if !in.IsDelim(']') {
								v183 = make(pkg.Shape, 0, 8)
							} else {
								v183 = pkg.Shape{}
							}
						} else {
							v183 = (v183)[:0]
						}
						for !in.IsDelim(']') {
							var v184 int64
							v184 = int64(in.Int64())
							v183 = append(v183, v184)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v183)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v185 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v185 = nil
					} else {
						in.Delim('[')
						if v185 == nil {
							if !in.IsDelim(']') {
								v185 = make(pkg.Shape, 0, 8)
							} else {
								v185 = pkg.Shape{}
							}
						} else {
							v185 = (v185)[:0]
						}
						for !in.IsDelim(']') {
							var v186 int64
							v186 = int64(in.Int64())
							v185 = append(v185, v186)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v185)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer13(out *jwriter.Writer, in Scale) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v187, v188 := range in.InputNames_ {
				if v187 > 0 {
					out.RawByte(',')
				}
				out.String(string(v188))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v189, v190 := range in.OutputNames_ {
				if v189 > 0 {
					out.RawByte(',')
				}
				out.String(string(v190))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v191, v192 := range in.InputShapes_ {
				if v191 > 0 {
					out.RawByte(',')
				}
				if v192 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v193, v194 := range v192 {
						if v193 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v194))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v195, v196 := range in.OutputShapes_ {
				if v195 > 0 {
					out.RawByte(',')
				}
				if v196 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v197, v198 := range v196 {
						if v197 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v198))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Scale) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Scale) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Scale) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Scale) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer13(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer14(in *jlexer.Lexer, out *Reshape) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v199 string
					v199 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v199)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v200 string
					v200 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v200)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v201 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v201 = nil
					} else {
						in.Delim('[')
						if v201 == nil {
							if !in.IsDelim(']') {
								v201 = make(pkg.Shape, 0, 8)
							} else {
								v201 = pkg.Shape{}
							}
						} else {
							v201 = (v201)[:0]
						}
						for !in.IsDelim(']') {
							var v202 int64
							v202 = int64(in.Int64())
							v201 = append(v201, v202)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v201)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v203 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v203 = nil
					} else {
						in.Delim('[')
						if v203 == nil {
							if !in.IsDelim(']') {
								v203 = make(pkg.Shape, 0, 8)
							} else {
								v203 = pkg.Shape{}
							}
						} else {
							v203 = (v203)[:0]
						}
						for !in.IsDelim(']') {
							var v204 int64
							v204 = int64(in.Int64())
							v203 = append(v203, v204)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v203)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer14(out *jwriter.Writer, in Reshape) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v205, v206 := range in.InputNames_ {
				if v205 > 0 {
					out.RawByte(',')
				}
				out.String(string(v206))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v207, v208 := range in.OutputNames_ {
				if v207 > 0 {
					out.RawByte(',')
				}
				out.String(string(v208))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v209, v210 := range in.InputShapes_ {
				if v209 > 0 {
					out.RawByte(',')
				}
				if v210 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v211, v212 := range v210 {
						if v211 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v212))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v213, v214 := range in.OutputShapes_ {
				if v213 > 0 {
					out.RawByte(',')
				}
				if v214 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v215, v216 := range v214 {
						if v215 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v216))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reshape) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reshape) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reshape) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reshape) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer14(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer15(in *jlexer.Lexer, out *Relu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v217 string
					v217 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v217)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v218 string
					v218 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v218)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v219 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v219 = nil
					} else {
						in.Delim('[')
						if v219 == nil {
							if !in.IsDelim(']') {
								v219 = make(pkg.Shape, 0, 8)
							} else {
								v219 = pkg.Shape{}
							}
						} else {
							v219 = (v219)[:0]
						}
						for !in.IsDelim(']') {
							var v220 int64
							v220 = int64(in.Int64())
							v219 = append(v219, v220)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v219)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v221 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v221 = nil
					} else {
						in.Delim('[')
						if v221 == nil {
							if !in.IsDelim(']') {
								v221 = make(pkg.Shape, 0, 8)
							} else {
								v221 = pkg.Shape{}
							}
						} else {
							v221 = (v221)[:0]
						}
						for !in.IsDelim(']') {
							var v222 int64
							v222 = int64(in.Int64())
							v221 = append(v221, v222)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v221)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer15(out *jwriter.Writer, in Relu) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v223, v224 := range in.InputNames_ {
				if v223 > 0 {
					out.RawByte(',')
				}
				out.String(string(v224))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v225, v226 := range in.OutputNames_ {
				if v225 > 0 {
					out.RawByte(',')
				}
				out.String(string(v226))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v227, v228 := range in.InputShapes_ {
				if v227 > 0 {
					out.RawByte(',')
				}
				if v228 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v229, v230 := range v228 {
						if v229 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v230))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v231, v232 := range in.OutputShapes_ {
				if v231 > 0 {
					out.RawByte(',')
				}
				if v232 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v233, v234 := range v232 {
						if v233 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v234))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Relu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Relu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Relu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Relu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer15(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer16(in *jlexer.Lexer, out *Reduce) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axes":
			if in.IsNull() {
				in.Skip()
				out.Axes = nil
			} else {
				in.Delim('[')
				if out.Axes == nil {
					if !in.IsDelim(']') {
						out.Axes = make([]int64, 0, 8)
					} else {
						out.Axes = []int64{}
					}
				} else {
					out.Axes = (out.Axes)[:0]
				}
				for !in.IsDelim(']') {
					var v235 int64
					v235 = int64(in.Int64())
					out.Axes = append(out.Axes, v235)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "keepdims":
			out.KeepDims = bool(in.Bool())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v236 string
					v236 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v236)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v237 string
					v237 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v237)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v238 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v238 = nil
					} else {
						in.Delim('[')
						if v238 == nil {
							if !in.IsDelim(']') {
								v238 = make(pkg.Shape, 0, 8)
							} else {
								v238 = pkg.Shape{}
							}
						} else {
							v238 = (v238)[:0]
						}
						for !in.IsDelim(']') {
							var v239 int64
							v239 = int64(in.Int64())
							v238 = append(v238, v239)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v238)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v240 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v240 = nil
					} else {
						in.Delim('[')
						if v240 == nil {
							if !in.IsDelim(']') {
								v240 = make(pkg.Shape, 0, 8)
							} else {
								v240 = pkg.Shape{}
							}
						} else {
							v240 = (v240)[:0]
						}
						for !in.IsDelim(']') {
							var v241 int64
							v241 = int64(in.Int64())
							v240 = append(v240, v241)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v240)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer16(out *jwriter.Writer, in Reduce) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Axes) != 0 {
		const prefix string = ",\"axes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v242, v243 := range in.Axes {
				if v242 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v243))
			}
			out.RawByte(']')
		}
	}
	if in.KeepDims {
		const prefix string = ",\"keepdims\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.KeepDims))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v244, v245 := range in.InputNames_ {
				if v244 > 0 {
					out.RawByte(',')
				}
				out.String(string(v245))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v246, v247 := range in.OutputNames_ {
				if v246 > 0 {
					out.RawByte(',')
				}
				out.String(string(v247))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v248, v249 := range in.InputShapes_ {
				if v248 > 0 {
					out.RawByte(',')
				}
				if v249 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v250, v251 := range v249 {
						if v250 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v251))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v252, v253 := range in.OutputShapes_ {
				if v252 > 0 {
					out.RawByte(',')
				}
				if v253 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v254, v255 := range v253 {
						if v254 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v255))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reduce) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reduce) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reduce) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reduce) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer16(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer17(in *jlexer.Lexer, out *Pooling) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kernel_shape":
			if in.IsNull() {
				in.Skip()
				out.KernelShape = nil
			} else {
				in.Delim('[')
				if out.KernelShape == nil {
					if !in.IsDelim(']') {
						out.KernelShape = make(pkg.Shape, 0, 8)
					} else {
						out.KernelShape = pkg.Shape{}
					}
				} else {
					out.KernelShape = (out.KernelShape)[:0]
				}
				for !in.IsDelim(']') {
					var v256 int64
					v256 = int64(in.Int64())
					out.KernelShape = append(out.KernelShape, v256)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pads":
			if in.IsNull() {
				in.Skip()
				out.Pads = nil
			} else {
				in.Delim('[')
				if out.Pads == nil {
					if !in.IsDelim(']') {
						out.Pads = make(pkg.Shape, 0, 8)
					} else {
						out.Pads = pkg.Shape{}
					}
				} else {
					out.Pads = (out.Pads)[:0]
				}
				for !in.IsDelim(']') {
					var v257 int64
					v257 = int64(in.Int64())
					out.Pads = append(out.Pads, v257)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "strides":
			if in.IsNull() {
				in.Skip()
				out.Strides = nil
			} else {
				in.Delim('[')
				if out.Strides == nil {
					if !in.IsDelim(']') {
						out.Strides = make(pkg.Shape, 0, 8)
					} else {
						out.Strides = pkg.Shape{}
					}
				} else {
					out.Strides = (out.Strides)[:0]
				}
				for !in.IsDelim(']') {
					var v258 int64
					v258 = int64(in.Int64())
					out.Strides = append(out.Strides, v258)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v259 string
					v259 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v259)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v260 string
					v260 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v260)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v261 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v261 = nil
					} else {
						in.Delim('[')
						if v261 == nil {
							if !in.IsDelim(']') {
								v261 = make(pkg.Shape, 0, 8)
							} else {
								v261 = pkg.Shape{}
							}
						} else {
							v261 = (v261)[:0]
						}
						for !in.IsDelim(']') {
							var v262 int64
							v262 = int64(in.Int64())
							v261 = append(v261, v262)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v261)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v263 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v263 = nil
					} else {
						in.Delim('[')
						if v263 == nil {
							if !in.IsDelim(']') {
								v263 = make(pkg.Shape, 0, 8)
							} else {
								v263 = pkg.Shape{}
							}
						} else {
							v263 = (v263)[:0]
						}
						for !in.IsDelim(']') {
							var v264 int64
							v264 = int64(in.Int64())
							v263 = append(v263, v264)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v263)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer17(out *jwriter.Writer, in Pooling) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.KernelShape) != 0 {
		const prefix string = ",\"kernel_shape\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v265, v266 := range in.KernelShape {
				if v265 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v266))
			}
			out.RawByte(']')
		}
	}
	if len(in.Pads) != 0 {
		const prefix string = ",\"pads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v267, v268 := range in.Pads {
				if v267 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v268))
			}
			out.RawByte(']')
		}
	}
	if len(in.Strides) != 0 {
		const prefix string = ",\"strides\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v269, v270 := range in.Strides {
				if v269 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v270))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v271, v272 := range in.InputNames_ {
				if v271 > 0 {
					out.RawByte(',')
				}
				out.String(string(v272))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v273, v274 := range in.OutputNames_ {
				if v273 > 0 {
					out.RawByte(',')
				}
				out.String(string(v274))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v275, v276 := range in.InputShapes_ {
				if v275 > 0 {
					out.RawByte(',')
				}
				if v276 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v277, v278 := range v276 {
						if v277 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v278))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v279, v280 := range in.OutputShapes_ {
				if v279 > 0 {
					out.RawByte(',')
				}
				if v280 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v281, v282 := range v280 {
						if v281 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v282))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pooling) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pooling) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pooling) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pooling) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer17(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer18(in *jlexer.Lexer, out *NonMaxSuppression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v283 string
					v283 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v283)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v284 string
					v284 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v284)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v285 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v285 = nil
					} else {
						in.Delim('[')
						if v285 == nil {
							if !in.IsDelim(']') {
								v285 = make(pkg.Shape, 0, 8)
							} else {
								v285 = pkg.Shape{}
							}
						} else {
							v285 = (v285)[:0]
						}
						for !in.IsDelim(']') {
							var v286 int64
							v286 = int64(in.Int64())
							v285 = append(v285, v286)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v285)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v287 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v287 = nil
					} else {
						in.Delim('[')
						if v287 == nil {
							if !in.IsDelim(']') {
								v287 = make(pkg.Shape, 0, 8)
							} else {
								v287 = pkg.Shape{}
							}
						} else {
							v287 = (v287)[:0]
						}
						for !in.IsDelim(']') {
							var v288 int64
							v288 = int64(in.Int64())
							v287 = append(v287, v288)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v287)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer18(out *jwriter.Writer, in NonMaxSuppression) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v289, v290 := range in.InputNames_ {
				if v289 > 0 {
					out.RawByte(',')
				}
				out.String(string(v290))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v291, v292 := range in.OutputNames_ {
				if v291 > 0 {
					out.RawByte(',')
				}
				out.String(string(v292))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v293, v294 := range in.InputShapes_ {
				if v293 > 0 {
					out.RawByte(',')
				}
				if v294 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v295, v296 := range v294 {
						if v295 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v296))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v297, v298 := range in.OutputShapes_ {
				if v297 > 0 {
					out.RawByte(',')
				}
				if v298 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v299, v300 := range v298 {
						if v299 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v300))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NonMaxSuppression) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NonMaxSuppression) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NonMaxSuppression) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NonMaxSuppression) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer18(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer19(in *jlexer.Lexer, out *MatMul) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v301 string
					v301 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v301)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v302 string
					v302 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v302)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v303 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v303 = nil
					} else {
						in.Delim('[')
						if v303 == nil {
							if !in.IsDelim(']') {
								v303 = make(pkg.Shape, 0, 8)
							} else {
								v303 = pkg.Shape{}
							}
						} else {
							v303 = (v303)[:0]
						}
						for !in.IsDelim(']') {
							var v304 int64
							v304 = int64(in.Int64())
							v303 = append(v303, v304)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v303)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v305 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v305 = nil
					} else {
						in.Delim('[')
						if v305 == nil {
							if !in.IsDelim(']') {
								v305 = make(pkg.Shape, 0, 8)
							} else {
								v305 = pkg.Shape{}
							}
						} else {
							v305 = (v305)[:0]
						}
						for !in.IsDelim(']') {
							var v306 int64
							v306 = int64(in.Int64())
							v305 = append(v305, v306)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v305)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer19(out *jwriter.Writer, in MatMul) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v307, v308 := range in.InputNames_ {
				if v307 > 0 {
					out.RawByte(',')
				}
				out.String(string(v308))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v309, v310 := range in.OutputNames_ {
				if v309 > 0 {
					out.RawByte(',')
				}
				out.String(string(v310))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v311, v312 := range in.InputShapes_ {
				if v311 > 0 {
					out.RawByte(',')
				}
				if v312 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v313, v314 := range v312 {
						if v313 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v314))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v315, v316 := range in.OutputShapes_ {
				if v315 > 0 {
					out.RawByte(',')
				}
				if v316 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v317, v318 := range v316 {
						if v317 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v318))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MatMul) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MatMul) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MatMul) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MatMul) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer19(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer20(in *jlexer.Lexer, out *LRN) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v319 string
					v319 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v319)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v320 string
					v320 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v320)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v321 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v321 = nil
					} else {
						in.Delim('[')
						if v321 == nil {
							if !in.IsDelim(']') {
								v321 = make(pkg.Shape, 0, 8)
							} else {
								v321 = pkg.Shape{}
							}
						} else {
							v321 = (v321)[:0]
						}
						for !in.IsDelim(']') {
							var v322 int64
							v322 = int64(in.Int64())
							v321 = append(v321, v322)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v321)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v323 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v323 = nil
					} else {
						in.Delim('[')
						if v323 == nil {
							if !in.IsDelim(']') {
								v323 = make(pkg.Shape, 0, 8)
							} else {
								v323 = pkg.Shape{}
							}
						} else {
							v323 = (v323)[:0]
						}
						for !in.IsDelim(']') {
							var v324 int64
							v324 = int64(in.Int64())
							v323 = append(v323, v324)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v323)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer20(out *jwriter.Writer, in LRN) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Size))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v325, v326 := range in.InputNames_ {
				if v325 > 0 {
					out.RawByte(',')
				}
				out.String(string(v326))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v327, v328 := range in.OutputNames_ {
				if v327 > 0 {
					out.RawByte(',')
				}
				out.String(string(v328))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v329, v330 := range in.InputShapes_ {
				if v329 > 0 {
					out.RawByte(',')
				}
				if v330 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v331, v332 := range v330 {
						if v331 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v332))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v333, v334 := range in.OutputShapes_ {
				if v333 > 0 {
					out.RawByte(',')
				}
				if v334 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v335, v336 := range v334 {
						if v335 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v336))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LRN) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LRN) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LRN) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LRN) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer20(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer21(in *jlexer.Lexer, out *Identity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v337 string
					v337 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v337)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v338 string
					v338 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v338)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v339 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v339 = nil
					} else {
						in.Delim('[')
						if v339 == nil {
							if !in.IsDelim(']') {
								v339 = make(pkg.Shape, 0, 8)
							} else {
								v339 = pkg.Shape{}
							}
						} else {
							v339 = (v339)[:0]
						}
						for !in.IsDelim(']') {
							var v340 int64
							v340 = int64(in.Int64())
							v339 = append(v339, v340)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v339)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v341 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v341 = nil
					} else {
						in.Delim('[')
						if v341 == nil {
							if !in.IsDelim(']') {
								v341 = make(pkg.Shape, 0, 8)
							} else {
								v341 = pkg.Shape{}
							}
						} else {
							v341 = (v341)[:0]
						}
						for !in.IsDelim(']') {
							var v342 int64
							v342 = int64(in.Int64())
							v341 = append(v341, v342)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v341)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer21(out *jwriter.Writer, in Identity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v343, v344 := range in.InputNames_ {
				if v343 > 0 {
					out.RawByte(',')
				}
				out.String(string(v344))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v345, v346 := range in.OutputNames_ {
				if v345 > 0 {
					out.RawByte(',')
				}
				out.String(string(v346))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v347, v348 := range in.InputShapes_ {
				if v347 > 0 {
					out.RawByte(',')
				}
				if v348 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v349, v350 := range v348 {
						if v349 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v350))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v351, v352 := range in.OutputShapes_ {
				if v351 > 0 {
					out.RawByte(',')
				}
				if v352 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v353, v354 := range v352 {
						if v353 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v354))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Identity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Identity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Identity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Identity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer21(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer22(in *jlexer.Lexer, out *GlobalPooling) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v355 string
					v355 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v355)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v356 string
					v356 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v356)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v357 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v357 = nil
					} else {
						in.Delim('[')
						if v357 == nil {
							if !in.IsDelim(']') {
								v357 = make(pkg.Shape, 0, 8)
							} else {
								v357 = pkg.Shape{}
							}
						} else {
							v357 = (v357)[:0]
						}
						for !in.IsDelim(']') {
							var v358 int64
							v358 = int64(in.Int64())
							v357 = append(v357, v358)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v357)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v359 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v359 = nil
					} else {
						in.Delim('[')
						if v359 == nil {
							if !in.IsDelim(']') {
								v359 = make(pkg.Shape, 0, 8)
							} else {
								v359 = pkg.Shape{}
							}
						} else {
							v359 = (v359)[:0]
						}
						for !in.IsDelim(']') {
							var v360 int64
							v360 = int64(in.Int64())
							v359 = append(v359, v360)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v359)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer22(out *jwriter.Writer, in GlobalPooling) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v361, v362 := range in.InputNames_ {
				if v361 > 0 {
					out.RawByte(',')
				}
				out.String(string(v362))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v363, v364 := range in.OutputNames_ {
				if v363 > 0 {
					out.RawByte(',')
				}
				out.String(string(v364))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v365, v366 := range in.InputShapes_ {
				if v365 > 0 {
					out.RawByte(',')
				}
				if v366 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v367, v368 := range v366 {
						if v367 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v368))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v369, v370 := range in.OutputShapes_ {
				if v369 > 0 {
					out.RawByte(',')
				}
				if v370 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v371, v372 := range v370 {
						if v371 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v372))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalPooling) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalPooling) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalPooling) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalPooling) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer22(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer23(in *jlexer.Lexer, out *Gemm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alpha":
			out.Alpha = float64(in.Float64())
		case "beta":
			out.Beta = float64(in.Float64())
		case "transa":
			out.TransA = int64(in.Int64())
		case "transb":
			out.TransB = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v373 string
					v373 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v373)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v374 string
					v374 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v374)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v375 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v375 = nil
					} else {
						in.Delim('[')
						if v375 == nil {
							if !in.IsDelim(']') {
								v375 = make(pkg.Shape, 0, 8)
							} else {
								v375 = pkg.Shape{}
							}
						} else {
							v375 = (v375)[:0]
						}
						for !in.IsDelim(']') {
							var v376 int64
							v376 = int64(in.Int64())
							v375 = append(v375, v376)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v375)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v377 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v377 = nil
					} else {
						in.Delim('[')
						if v377 == nil {
							if !in.IsDelim(']') {
								v377 = make(pkg.Shape, 0, 8)
							} else {
								v377 = pkg.Shape{}
							}
						} else {
							v377 = (v377)[:0]
						}
						for !in.IsDelim(']') {
							var v378 int64
							v378 = int64(in.Int64())
							v377 = append(v377, v378)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v377)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer23(out *jwriter.Writer, in Gemm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Alpha != 0 {
		const prefix string = ",\"alpha\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Alpha))
	}
	if in.Beta != 0 {
		const prefix string = ",\"beta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Beta))
	}
	if in.TransA != 0 {
		const prefix string = ",\"transa\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransA))
	}
	if in.TransB != 0 {
		const prefix string = ",\"transb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransB))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v379, v380 := range in.InputNames_ {
				if v379 > 0 {
					out.RawByte(',')
				}
				out.String(string(v380))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v381, v382 := range in.OutputNames_ {
				if v381 > 0 {
					out.RawByte(',')
				}
				out.String(string(v382))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v383, v384 := range in.InputShapes_ {
				if v383 > 0 {
					out.RawByte(',')
				}
				if v384 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v385, v386 := range v384 {
						if v385 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v386))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v387, v388 := range in.OutputShapes_ {
				if v387 > 0 {
					out.RawByte(',')
				}
				if v388 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v389, v390 := range v388 {
						if v389 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v390))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gemm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gemm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gemm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gemm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer23(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer24(in *jlexer.Lexer, out *Gather) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v391 string
					v391 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v391)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v392 string
					v392 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v392)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v393 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v393 = nil
					} else {
						in.Delim('[')
						if v393 == nil {
							if !in.IsDelim(']') {
								v393 = make(pkg.Shape, 0, 8)
							} else {
								v393 = pkg.Shape{}
							}
						} else {
							v393 = (v393)[:0]
						}
						for !in.IsDelim(']') {
							var v394 int64
							v394 = int64(in.Int64())
							v393 = append(v393, v394)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v393)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v395 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v395 = nil
					} else {
						in.Delim('[')
						if v395 == nil {
							if !in.IsDelim(']') {
								v395 = make(pkg.Shape, 0, 8)
							} else {
								v395 = pkg.Shape{}
							}
						} else {
							v395 = (v395)[:0]
						}
						for !in.IsDelim(']') {
							var v396 int64
							v396 = int64(in.Int64())
							v395 = append(v395, v396)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v395)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer24(out *jwriter.Writer, in Gather) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v397, v398 := range in.InputNames_ {
				if v397 > 0 {
					out.RawByte(',')
				}
				out.String(string(v398))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v399, v400 := range in.OutputNames_ {
				if v399 > 0 {
					out.RawByte(',')
				}
				out.String(string(v400))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v401, v402 := range in.InputShapes_ {
				if v401 > 0 {
					out.RawByte(',')
				}
				if v402 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v403, v404 := range v402 {
						if v403 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v404))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v405, v406 := range in.OutputShapes_ {
				if v405 > 0 {
					out.RawByte(',')
				}
				if v406 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v407, v408 := range v406 {
						if v407 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v408))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gather) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gather) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gather) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gather) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer24(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer25(in *jlexer.Lexer, out *Flatten) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v409 string
					v409 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v409)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v410 string
					v410 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v410)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v411 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v411 = nil
					} else {
						in.Delim('[')
						if v411 == nil {
							if !in.IsDelim(']') {
								v411 = make(pkg.Shape, 0, 8)
							} else {
								v411 = pkg.Shape{}
							}
						} else {
							v411 = (v411)[:0]
						}
						for !in.IsDelim(']') {
							var v412 int64
							v412 = int64(in.Int64())
							v411 = append(v411, v412)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v411)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v413 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v413 = nil
					} else {
						in.Delim('[')
						if v413 == nil {
							if !in.IsDelim(']') {
								v413 = make(pkg.Shape, 0, 8)
							} else {
								v413 = pkg.Shape{}
							}
						} else {
							v413 = (v413)[:0]
						}
						for !in.IsDelim(']') {
							var v414 int64
							v414 = int64(in.Int64())
							v413 = append(v413, v414)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v413)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer25(out *jwriter.Writer, in Flatten) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v415, v416 := range in.InputNames_ {
				if v415 > 0 {
					out.RawByte(',')
				}
				out.String(string(v416))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v417, v418 := range in.OutputNames_ {
				if v417 > 0 {
					out.RawByte(',')
				}
				out.String(string(v418))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v419, v420 := range in.InputShapes_ {
				if v419 > 0 {
					out.RawByte(',')
				}
				if v420 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v421, v422 := range v420 {
						if v421 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v422))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v423, v424 := range in.OutputShapes_ {
				if v423 > 0 {
					out.RawByte(',')
				}
				if v424 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v425, v426 := range v424 {
						if v425 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v426))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Flatten) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Flatten) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Flatten) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Flatten) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer25(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer26(in *jlexer.Lexer, out *Exp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "broadcast":
			out.Broadcast = int64(in.Int64())
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v427 string
					v427 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v427)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v428 string
					v428 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v428)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v429 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v429 = nil
					} else {
						in.Delim('[')
						if v429 == nil {
							if !in.IsDelim(']') {
								v429 = make(pkg.Shape, 0, 8)
							} else {
								v429 = pkg.Shape{}
							}
						} else {
							v429 = (v429)[:0]
						}
						for !in.IsDelim(']') {
							var v430 int64
							v430 = int64(in.Int64())
							v429 = append(v429, v430)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v429)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v431 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v431 = nil
					} else {
						in.Delim('[')
						if v431 == nil {
							if !in.IsDelim(']') {
								v431 = make(pkg.Shape, 0, 8)
							} else {
								v431 = pkg.Shape{}
							}
						} else {
							v431 = (v431)[:0]
						}
						for !in.IsDelim(']') {
							var v432 int64
							v432 = int64(in.Int64())
							v431 = append(v431, v432)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v431)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer26(out *jwriter.Writer, in Exp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Broadcast != 0 {
		const prefix string = ",\"broadcast\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Broadcast))
	}
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v433, v434 := range in.InputNames_ {
				if v433 > 0 {
					out.RawByte(',')
				}
				out.String(string(v434))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v435, v436 := range in.OutputNames_ {
				if v435 > 0 {
					out.RawByte(',')
				}
				out.String(string(v436))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v437, v438 := range in.InputShapes_ {
				if v437 > 0 {
					out.RawByte(',')
				}
				if v438 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v439, v440 := range v438 {
						if v439 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v440))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v441, v442 := range in.OutputShapes_ {
				if v441 > 0 {
					out.RawByte(',')
				}
				if v442 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v443, v444 := range v442 {
						if v443 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v444))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Exp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Exp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Exp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Exp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer26(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer27(in *jlexer.Lexer, out *ElementWise) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "broadcast":
			out.Broadcast = int64(in.Int64())
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v445 string
					v445 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v445)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v446 string
					v446 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v446)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v447 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v447 = nil
					} else {
						in.Delim('[')
						if v447 == nil {
							if !in.IsDelim(']') {
								v447 = make(pkg.Shape, 0, 8)
							} else {
								v447 = pkg.Shape{}
							}
						} else {
							v447 = (v447)[:0]
						}
						for !in.IsDelim(']') {
							var v448 int64
							v448 = int64(in.Int64())
							v447 = append(v447, v448)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v447)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v449 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v449 = nil
					} else {
						in.Delim('[')
						if v449 == nil {
							if !in.IsDelim(']') {
								v449 = make(pkg.Shape, 0, 8)
							} else {
								v449 = pkg.Shape{}
							}
						} else {
							v449 = (v449)[:0]
						}
						for !in.IsDelim(']') {
							var v450 int64
							v450 = int64(in.Int64())
							v449 = append(v449, v450)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v449)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer27(out *jwriter.Writer, in ElementWise) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Broadcast != 0 {
		const prefix string = ",\"broadcast\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Broadcast))
	}
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v451, v452 := range in.InputNames_ {
				if v451 > 0 {
					out.RawByte(',')
				}
				out.String(string(v452))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v453, v454 := range in.OutputNames_ {
				if v453 > 0 {
					out.RawByte(',')
				}
				out.String(string(v454))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v455, v456 := range in.InputShapes_ {
				if v455 > 0 {
					out.RawByte(',')
				}
				if v456 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v457, v458 := range v456 {
						if v457 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v458))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v459, v460 := range in.OutputShapes_ {
				if v459 > 0 {
					out.RawByte(',')
				}
				if v460 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v461, v462 := range v460 {
						if v461 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v462))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ElementWise) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ElementWise) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ElementWise) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ElementWise) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer27(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer28(in *jlexer.Lexer, out *Dropout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v463 string
					v463 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v463)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v464 string
					v464 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v464)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v465 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v465 = nil
					} else {
						in.Delim('[')
						if v465 == nil {
							if !in.IsDelim(']') {
								v465 = make(pkg.Shape, 0, 8)
							} else {
								v465 = pkg.Shape{}
							}
						} else {
							v465 = (v465)[:0]
						}
						for !in.IsDelim(']') {
							var v466 int64
							v466 = int64(in.Int64())
							v465 = append(v465, v466)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v465)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v467 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v467 = nil
					} else {
						in.Delim('[')
						if v467 == nil {
							if !in.IsDelim(']') {
								v467 = make(pkg.Shape, 0, 8)
							} else {
								v467 = pkg.Shape{}
							}
						} else {
							v467 = (v467)[:0]
						}
						for !in.IsDelim(']') {
							var v468 int64
							v468 = int64(in.Int64())
							v467 = append(v467, v468)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v467)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer28(out *jwriter.Writer, in Dropout) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v469, v470 := range in.InputNames_ {
				if v469 > 0 {
					out.RawByte(',')
				}
				out.String(string(v470))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v471, v472 := range in.OutputNames_ {
				if v471 > 0 {
					out.RawByte(',')
				}
				out.String(string(v472))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v473, v474 := range in.InputShapes_ {
				if v473 > 0 {
					out.RawByte(',')
				}
				if v474 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v475, v476 := range v474 {
						if v475 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v476))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v477, v478 := range in.OutputShapes_ {
				if v477 > 0 {
					out.RawByte(',')
				}
				if v478 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v479, v480 := range v478 {
						if v479 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v480))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Dropout) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Dropout) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Dropout) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Dropout) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer28(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer29(in *jlexer.Lexer, out *Conv) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "auto_pad":
			out.AutoPad = string(in.String())
		case "dilation":
			if in.IsNull() {
				in.Skip()
				out.Dilations = nil
			} else {
				in.Delim('[')
				if out.Dilations == nil {
					if !in.IsDelim(']') {
						out.Dilations = make(pkg.Shape, 0, 8)
					} else {
						out.Dilations = pkg.Shape{}
					}
				} else {
					out.Dilations = (out.Dilations)[:0]
				}
				for !in.IsDelim(']') {
					var v481 int64
					v481 = int64(in.Int64())
					out.Dilations = append(out.Dilations, v481)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "group":
			out.Group = int64(in.Int64())
		case "kernel_shape":
			if in.IsNull() {
				in.Skip()
				out.KernelShape = nil
			} else {
				in.Delim('[')
				if out.KernelShape == nil {
					if !in.IsDelim(']') {
						out.KernelShape = make(pkg.Shape, 0, 8)
					} else {
						out.KernelShape = pkg.Shape{}
					}
				} else {
					out.KernelShape = (out.KernelShape)[:0]
				}
				for !in.IsDelim(']') {
					var v482 int64
					v482 = int64(in.Int64())
					out.KernelShape = append(out.KernelShape, v482)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pads":
			if in.IsNull() {
				in.Skip()
				out.Pads = nil
			} else {
				in.Delim('[')
				if out.Pads == nil {
					if !in.IsDelim(']') {
						out.Pads = make(pkg.Shape, 0, 8)
					} else {
						out.Pads = pkg.Shape{}
					}
				} else {
					out.Pads = (out.Pads)[:0]
				}
				for !in.IsDelim(']') {
					var v483 int64
					v483 = int64(in.Int64())
					out.Pads = append(out.Pads, v483)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "strides":
			if in.IsNull() {
				in.Skip()
				out.Strides = nil
			} else {
				in.Delim('[')
				if out.Strides == nil {
					if !in.IsDelim(']') {
						out.Strides = make(pkg.Shape, 0, 8)
					} else {
						out.Strides = pkg.Shape{}
					}
				} else {
					out.Strides = (out.Strides)[:0]
				}
				for !in.IsDelim(']') {
					var v484 int64
					v484 = int64(in.Int64())
					out.Strides = append(out.Strides, v484)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v485 string
					v485 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v485)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v486 string
					v486 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v486)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v487 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v487 = nil
					} else {
						in.Delim('[')
						if v487 == nil {
							if !in.IsDelim(']') {
								v487 = make(pkg.Shape, 0, 8)
							} else {
								v487 = pkg.Shape{}
							}
						} else {
							v487 = (v487)[:0]
						}
						for !in.IsDelim(']') {
							var v488 int64
							v488 = int64(in.Int64())
							v487 = append(v487, v488)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v487)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v489 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v489 = nil
					} else {
						in.Delim('[')
						if v489 == nil {
							if !in.IsDelim(']') {
								v489 = make(pkg.Shape, 0, 8)
							} else {
								v489 = pkg.Shape{}
							}
						} else {
							v489 = (v489)[:0]
						}
						for !in.IsDelim(']') {
							var v490 int64
							v490 = int64(in.Int64())
							v489 = append(v489, v490)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v489)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer29(out *jwriter.Writer, in Conv) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AutoPad != "" {
		const prefix string = ",\"auto_pad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AutoPad))
	}
	if len(in.Dilations) != 0 {
		const prefix string = ",\"dilation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v491, v492 := range in.Dilations {
				if v491 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v492))
			}
			out.RawByte(']')
		}
	}
	if in.Group != 0 {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Group))
	}
	if len(in.KernelShape) != 0 {
		const prefix string = ",\"kernel_shape\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v493, v494 := range in.KernelShape {
				if v493 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v494))
			}
			out.RawByte(']')
		}
	}
	if len(in.Pads) != 0 {
		const prefix string = ",\"pads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v495, v496 := range in.Pads {
				if v495 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v496))
			}
			out.RawByte(']')
		}
	}
	if len(in.Strides) != 0 {
		const prefix string = ",\"strides\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v497, v498 := range in.Strides {
				if v497 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v498))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v499, v500 := range in.InputNames_ {
				if v499 > 0 {
					out.RawByte(',')
				}
				out.String(string(v500))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v501, v502 := range in.OutputNames_ {
				if v501 > 0 {
					out.RawByte(',')
				}
				out.String(string(v502))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v503, v504 := range in.InputShapes_ {
				if v503 > 0 {
					out.RawByte(',')
				}
				if v504 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v505, v506 := range v504 {
						if v505 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v506))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v507, v508 := range in.OutputShapes_ {
				if v507 > 0 {
					out.RawByte(',')
				}
				if v508 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v509, v510 := range v508 {
						if v509 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v510))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conv) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conv) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conv) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conv) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer29(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer30(in *jlexer.Lexer, out *ConstantOfShape) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v511 string
					v511 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v511)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v512 string
					v512 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v512)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v513 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v513 = nil
					} else {
						in.Delim('[')
						if v513 == nil {
							if !in.IsDelim(']') {
								v513 = make(pkg.Shape, 0, 8)
							} else {
								v513 = pkg.Shape{}
							}
						} else {
							v513 = (v513)[:0]
						}
						for !in.IsDelim(']') {
							var v514 int64
							v514 = int64(in.Int64())
							v513 = append(v513, v514)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v513)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v515 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v515 = nil
					} else {
						in.Delim('[')
						if v515 == nil {
							if !in.IsDelim(']') {
								v515 = make(pkg.Shape, 0, 8)
							} else {
								v515 = pkg.Shape{}
							}
						} else {
							v515 = (v515)[:0]
						}
						for !in.IsDelim(']') {
							var v516 int64
							v516 = int64(in.Int64())
							v515 = append(v515, v516)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v515)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer30(out *jwriter.Writer, in ConstantOfShape) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v517, v518 := range in.InputNames_ {
				if v517 > 0 {
					out.RawByte(',')
				}
				out.String(string(v518))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v519, v520 := range in.OutputNames_ {
				if v519 > 0 {
					out.RawByte(',')
				}
				out.String(string(v520))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v521, v522 := range in.InputShapes_ {
				if v521 > 0 {
					out.RawByte(',')
				}
				if v522 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v523, v524 := range v522 {
						if v523 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v524))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v525, v526 := range in.OutputShapes_ {
				if v525 > 0 {
					out.RawByte(',')
				}
				if v526 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v527, v528 := range v526 {
						if v527 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v528))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConstantOfShape) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConstantOfShape) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConstantOfShape) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConstantOfShape) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer30(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer31(in *jlexer.Lexer, out *ConstantInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v529 string
					v529 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v529)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v530 string
					v530 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v530)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v531 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v531 = nil
					} else {
						in.Delim('[')
						if v531 == nil {
							if !in.IsDelim(']') {
								v531 = make(pkg.Shape, 0, 8)
							} else {
								v531 = pkg.Shape{}
							}
						} else {
							v531 = (v531)[:0]
						}
						for !in.IsDelim(']') {
							var v532 int64
							v532 = int64(in.Int64())
							v531 = append(v531, v532)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v531)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v533 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v533 = nil
					} else {
						in.Delim('[')
						if v533 == nil {
							if !in.IsDelim(']') {
								v533 = make(pkg.Shape, 0, 8)
							} else {
								v533 = pkg.Shape{}
							}
						} else {
							v533 = (v533)[:0]
						}
						for !in.IsDelim(']') {
							var v534 int64
							v534 = int64(in.Int64())
							v533 = append(v533, v534)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v533)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer31(out *jwriter.Writer, in ConstantInput) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v535, v536 := range in.InputNames_ {
				if v535 > 0 {
					out.RawByte(',')
				}
				out.String(string(v536))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v537, v538 := range in.OutputNames_ {
				if v537 > 0 {
					out.RawByte(',')
				}
				out.String(string(v538))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v539, v540 := range in.InputShapes_ {
				if v539 > 0 {
					out.RawByte(',')
				}
				if v540 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v541, v542 := range v540 {
						if v541 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v542))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v543, v544 := range in.OutputShapes_ {
				if v543 > 0 {
					out.RawByte(',')
				}
				if v544 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v545, v546 := range v544 {
						if v545 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v546))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConstantInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConstantInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConstantInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConstantInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer31(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer32(in *jlexer.Lexer, out *Constant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v547 string
					v547 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v547)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v548 string
					v548 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v548)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v549 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v549 = nil
					} else {
						in.Delim('[')
						if v549 == nil {
							if !in.IsDelim(']') {
								v549 = make(pkg.Shape, 0, 8)
							} else {
								v549 = pkg.Shape{}
							}
						} else {
							v549 = (v549)[:0]
						}
						for !in.IsDelim(']') {
							var v550 int64
							v550 = int64(in.Int64())
							v549 = append(v549, v550)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v549)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v551 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v551 = nil
					} else {
						in.Delim('[')
						if v551 == nil {
							if !in.IsDelim(']') {
								v551 = make(pkg.Shape, 0, 8)
							} else {
								v551 = pkg.Shape{}
							}
						} else {
							v551 = (v551)[:0]
						}
						for !in.IsDelim(']') {
							var v552 int64
							v552 = int64(in.Int64())
							v551 = append(v551, v552)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v551)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer32(out *jwriter.Writer, in Constant) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v553, v554 := range in.InputNames_ {
				if v553 > 0 {
					out.RawByte(',')
				}
				out.String(string(v554))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v555, v556 := range in.OutputNames_ {
				if v555 > 0 {
					out.RawByte(',')
				}
				out.String(string(v556))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v557, v558 := range in.InputShapes_ {
				if v557 > 0 {
					out.RawByte(',')
				}
				if v558 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v559, v560 := range v558 {
						if v559 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v560))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v561, v562 := range in.OutputShapes_ {
				if v561 > 0 {
					out.RawByte(',')
				}
				if v562 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v563, v564 := range v562 {
						if v563 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v564))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Constant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Constant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Constant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Constant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer32(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer33(in *jlexer.Lexer, out *Concat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v565 string
					v565 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v565)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v566 string
					v566 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v566)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v567 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v567 = nil
					} else {
						in.Delim('[')
						if v567 == nil {
							if !in.IsDelim(']') {
								v567 = make(pkg.Shape, 0, 8)
							} else {
								v567 = pkg.Shape{}
							}
						} else {
							v567 = (v567)[:0]
						}
						for !in.IsDelim(']') {
							var v568 int64
							v568 = int64(in.Int64())
							v567 = append(v567, v568)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v567)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v569 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v569 = nil
					} else {
						in.Delim('[')
						if v569 == nil {
							if !in.IsDelim(']') {
								v569 = make(pkg.Shape, 0, 8)
							} else {
								v569 = pkg.Shape{}
							}
						} else {
							v569 = (v569)[:0]
						}
						for !in.IsDelim(']') {
							var v570 int64
							v570 = int64(in.Int64())
							v569 = append(v569, v570)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v569)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer33(out *jwriter.Writer, in Concat) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v571, v572 := range in.InputNames_ {
				if v571 > 0 {
					out.RawByte(',')
				}
				out.String(string(v572))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v573, v574 := range in.OutputNames_ {
				if v573 > 0 {
					out.RawByte(',')
				}
				out.String(string(v574))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v575, v576 := range in.InputShapes_ {
				if v575 > 0 {
					out.RawByte(',')
				}
				if v576 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v577, v578 := range v576 {
						if v577 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v578))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v579, v580 := range in.OutputShapes_ {
				if v579 > 0 {
					out.RawByte(',')
				}
				if v580 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v581, v582 := range v580 {
						if v581 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v582))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Concat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Concat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Concat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Concat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer33(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer34(in *jlexer.Lexer, out *Clip) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "min":
			out.Min = float32(in.Float32())
		case "max":
			out.Max = float32(in.Float32())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v583 string
					v583 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v583)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v584 string
					v584 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v584)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v585 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v585 = nil
					} else {
						in.Delim('[')
						if v585 == nil {
							if !in.IsDelim(']') {
								v585 = make(pkg.Shape, 0, 8)
							} else {
								v585 = pkg.Shape{}
							}
						} else {
							v585 = (v585)[:0]
						}
						for !in.IsDelim(']') {
							var v586 int64
							v586 = int64(in.Int64())
							v585 = append(v585, v586)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v585)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v587 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v587 = nil
					} else {
						in.Delim('[')
						if v587 == nil {
							if !in.IsDelim(']') {
								v587 = make(pkg.Shape, 0, 8)
							} else {
								v587 = pkg.Shape{}
							}
						} else {
							v587 = (v587)[:0]
						}
						for !in.IsDelim(']') {
							var v588 int64
							v588 = int64(in.Int64())
							v587 = append(v587, v588)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v587)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer34(out *jwriter.Writer, in Clip) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Min != 0 {
		const prefix string = ",\"min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Min))
	}
	if in.Max != 0 {
		const prefix string = ",\"max\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Max))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v589, v590 := range in.InputNames_ {
				if v589 > 0 {
					out.RawByte(',')
				}
				out.String(string(v590))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v591, v592 := range in.OutputNames_ {
				if v591 > 0 {
					out.RawByte(',')
				}
				out.String(string(v592))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v593, v594 := range in.InputShapes_ {
				if v593 > 0 {
					out.RawByte(',')
				}
				if v594 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v595, v596 := range v594 {
						if v595 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v596))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v597, v598 := range in.OutputShapes_ {
				if v597 > 0 {
					out.RawByte(',')
				}
				if v598 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v599, v600 := range v598 {
						if v599 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v600))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Clip) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Clip) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Clip) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Clip) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer34(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer35(in *jlexer.Lexer, out *Cast) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v601 string
					v601 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v601)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v602 string
					v602 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v602)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v603 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v603 = nil
					} else {
						in.Delim('[')
						if v603 == nil {
							if !in.IsDelim(']') {
								v603 = make(pkg.Shape, 0, 8)
							} else {
								v603 = pkg.Shape{}
							}
						} else {
							v603 = (v603)[:0]
						}
						for !in.IsDelim(']') {
							var v604 int64
							v604 = int64(in.Int64())
							v603 = append(v603, v604)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v603)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v605 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v605 = nil
					} else {
						in.Delim('[')
						if v605 == nil {
							if !in.IsDelim(']') {
								v605 = make(pkg.Shape, 0, 8)
							} else {
								v605 = pkg.Shape{}
							}
						} else {
							v605 = (v605)[:0]
						}
						for !in.IsDelim(']') {
							var v606 int64
							v606 = int64(in.Int64())
							v605 = append(v605, v606)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v605)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer35(out *jwriter.Writer, in Cast) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v607, v608 := range in.InputNames_ {
				if v607 > 0 {
					out.RawByte(',')
				}
				out.String(string(v608))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v609, v610 := range in.OutputNames_ {
				if v609 > 0 {
					out.RawByte(',')
				}
				out.String(string(v610))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v611, v612 := range in.InputShapes_ {
				if v611 > 0 {
					out.RawByte(',')
				}
				if v612 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v613, v614 := range v612 {
						if v613 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v614))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v615, v616 := range in.OutputShapes_ {
				if v615 > 0 {
					out.RawByte(',')
				}
				if v616 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v617, v618 := range v616 {
						if v617 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v618))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cast) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cast) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cast) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cast) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer35(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer36(in *jlexer.Lexer, out *BatchNorm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spatial":
			out.Spatial = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v619 string
					v619 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v619)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v620 string
					v620 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v620)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v621 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v621 = nil
					} else {
						in.Delim('[')
						if v621 == nil {
							if !in.IsDelim(']') {
								v621 = make(pkg.Shape, 0, 8)
							} else {
								v621 = pkg.Shape{}
							}
						} else {
							v621 = (v621)[:0]
						}
						for !in.IsDelim(']') {
							var v622 int64
							v622 = int64(in.Int64())
							v621 = append(v621, v622)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v621)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v623 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v623 = nil
					} else {
						in.Delim('[')
						if v623 == nil {
							if !in.IsDelim(']') {
								v623 = make(pkg.Shape, 0, 8)
							} else {
								v623 = pkg.Shape{}
							}
						} else {
							v623 = (v623)[:0]
						}
						for !in.IsDelim(']') {
							var v624 int64
							v624 = int64(in.Int64())
							v623 = append(v623, v624)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v623)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer36(out *jwriter.Writer, in BatchNorm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Spatial != 0 {
		const prefix string = ",\"spatial\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Spatial))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v625, v626 := range in.InputNames_ {
				if v625 > 0 {
					out.RawByte(',')
				}
				out.String(string(v626))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v627, v628 := range in.OutputNames_ {
				if v627 > 0 {
					out.RawByte(',')
				}
				out.String(string(v628))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v629, v630 := range in.InputShapes_ {
				if v629 > 0 {
					out.RawByte(',')
				}
				if v630 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v631, v632 := range v630 {
						if v631 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v632))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v633, v634 := range in.OutputShapes_ {
				if v633 > 0 {
					out.RawByte(',')
				}
				if v634 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v635, v636 := range v634 {
						if v635 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v636))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchNorm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchNorm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchNorm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchNorm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer36(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer37(in *jlexer.Lexer, out *BaseBenchmarkInputArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer37(out *jwriter.Writer, in BaseBenchmarkInputArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseBenchmarkInputArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseBenchmarkInputArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseBenchmarkInputArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseBenchmarkInputArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer37(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer38(in *jlexer.Lexer, out *BaseBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v637 string
					v637 = string(in.String())
					out.ArgNames = append(out.ArgNames, v637)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v638 string
					v638 = string(in.String())
					out.Algorithms = append(out.Algorithms, v638)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v639 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v639)
					out.DataTypes = append(out.DataTypes, v639)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer38(out *jwriter.Writer, in BaseBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v640, v641 := range in.ArgNames {
				if v640 > 0 {
					out.RawByte(',')
				}
				out.String(string(v641))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v642, v643 := range in.Algorithms {
				if v642 > 0 {
					out.RawByte(',')
				}
				out.String(string(v643))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v644, v645 := range in.DataTypes {
				if v644 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v645)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer38(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer39(in *jlexer.Lexer, out *Base) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v646 string
					v646 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v646)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v647 string
					v647 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v647)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v648 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v648 = nil
					} else {
						in.Delim('[')
						if v648 == nil {
							if !in.IsDelim(']') {
								v648 = make(pkg.Shape, 0, 8)
							} else {
								v648 = pkg.Shape{}
							}
						} else {
							v648 = (v648)[:0]
						}
						for !in.IsDelim(']') {
							var v649 int64
							v649 = int64(in.Int64())
							v648 = append(v648, v649)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v648)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v650 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v650 = nil
					} else {
						in.Delim('[')
						if v650 == nil {
							if !in.IsDelim(']') {
								v650 = make(pkg.Shape, 0, 8)
							} else {
								v650 = pkg.Shape{}
							}
						} else {
							v650 = (v650)[:0]
						}
						for !in.IsDelim(']') {
							var v651 int64
							v651 = int64(in.Int64())
							v650 = append(v650, v651)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v650)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer39(out *jwriter.Writer, in Base) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v652, v653 := range in.InputNames_ {
				if v652 > 0 {
					out.RawByte(',')
				}
				out.String(string(v653))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v654, v655 := range in.OutputNames_ {
				if v654 > 0 {
					out.RawByte(',')
				}
				out.String(string(v655))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v656, v657 := range in.InputShapes_ {
				if v656 > 0 {
					out.RawByte(',')
				}
				if v657 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v658, v659 := range v657 {
						if v658 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v659))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v660, v661 := range in.OutputShapes_ {
				if v660 > 0 {
					out.RawByte(',')
				}
				if v661 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v662, v663 := range v661 {
						if v662 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v663))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Base) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Base) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Base) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Base) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer39(l, v)
}
