// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package layer

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	pkg "github.com/rai-project/dlperf/pkg"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer(in *jlexer.Lexer, out *Unsqueeze) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axes":
			if in.IsNull() {
				in.Skip()
				out.Axes = nil
			} else {
				in.Delim('[')
				if out.Axes == nil {
					if !in.IsDelim(']') {
						out.Axes = make([]int64, 0, 8)
					} else {
						out.Axes = []int64{}
					}
				} else {
					out.Axes = (out.Axes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.Axes = append(out.Axes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v4 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						in.Delim('[')
						if v4 == nil {
							if !in.IsDelim(']') {
								v4 = make(pkg.Shape, 0, 8)
							} else {
								v4 = pkg.Shape{}
							}
						} else {
							v4 = (v4)[:0]
						}
						for !in.IsDelim(']') {
							var v5 int64
							v5 = int64(in.Int64())
							v4 = append(v4, v5)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v6 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						in.Delim('[')
						if v6 == nil {
							if !in.IsDelim(']') {
								v6 = make(pkg.Shape, 0, 8)
							} else {
								v6 = pkg.Shape{}
							}
						} else {
							v6 = (v6)[:0]
						}
						for !in.IsDelim(']') {
							var v7 int64
							v7 = int64(in.Int64())
							v6 = append(v6, v7)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer(out *jwriter.Writer, in Unsqueeze) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Axes) != 0 {
		const prefix string = ",\"axes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Axes {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v9))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.InputNames_ {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.OutputNames_ {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.InputShapes_ {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v16, v17 := range v15 {
						if v16 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v17))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.OutputShapes_ {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v20, v21 := range v19 {
						if v20 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v21))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Unsqueeze) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Unsqueeze) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Unsqueeze) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Unsqueeze) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer1(in *jlexer.Lexer, out *Transpose) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Permutation = nil
			} else {
				in.Delim('[')
				if out.Permutation == nil {
					if !in.IsDelim(']') {
						out.Permutation = make([]int64, 0, 8)
					} else {
						out.Permutation = []int64{}
					}
				} else {
					out.Permutation = (out.Permutation)[:0]
				}
				for !in.IsDelim(']') {
					var v22 int64
					v22 = int64(in.Int64())
					out.Permutation = append(out.Permutation, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v24 string
					v24 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v25 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						in.Delim('[')
						if v25 == nil {
							if !in.IsDelim(']') {
								v25 = make(pkg.Shape, 0, 8)
							} else {
								v25 = pkg.Shape{}
							}
						} else {
							v25 = (v25)[:0]
						}
						for !in.IsDelim(']') {
							var v26 int64
							v26 = int64(in.Int64())
							v25 = append(v25, v26)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v27 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v27 = nil
					} else {
						in.Delim('[')
						if v27 == nil {
							if !in.IsDelim(']') {
								v27 = make(pkg.Shape, 0, 8)
							} else {
								v27 = pkg.Shape{}
							}
						} else {
							v27 = (v27)[:0]
						}
						for !in.IsDelim(']') {
							var v28 int64
							v28 = int64(in.Int64())
							v27 = append(v27, v28)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer1(out *jwriter.Writer, in Transpose) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Permutation) != 0 {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Permutation {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v30))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v31, v32 := range in.InputNames_ {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v33, v34 := range in.OutputNames_ {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.InputShapes_ {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v37, v38 := range v36 {
						if v37 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v38))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v39, v40 := range in.OutputShapes_ {
				if v39 > 0 {
					out.RawByte(',')
				}
				if v40 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v41, v42 := range v40 {
						if v41 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v42))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Transpose) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Transpose) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Transpose) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Transpose) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer1(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer2(in *jlexer.Lexer, out *TopK) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "k":
			out.K = int64(in.Int64())
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v43 string
					v43 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v44 string
					v44 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v45 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v45 = nil
					} else {
						in.Delim('[')
						if v45 == nil {
							if !in.IsDelim(']') {
								v45 = make(pkg.Shape, 0, 8)
							} else {
								v45 = pkg.Shape{}
							}
						} else {
							v45 = (v45)[:0]
						}
						for !in.IsDelim(']') {
							var v46 int64
							v46 = int64(in.Int64())
							v45 = append(v45, v46)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v47 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v47 = nil
					} else {
						in.Delim('[')
						if v47 == nil {
							if !in.IsDelim(']') {
								v47 = make(pkg.Shape, 0, 8)
							} else {
								v47 = pkg.Shape{}
							}
						} else {
							v47 = (v47)[:0]
						}
						for !in.IsDelim(']') {
							var v48 int64
							v48 = int64(in.Int64())
							v47 = append(v47, v48)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer2(out *jwriter.Writer, in TopK) {
	out.RawByte('{')
	first := true
	_ = first
	if in.K != 0 {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.K))
	}
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v49, v50 := range in.InputNames_ {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.String(string(v50))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v51, v52 := range in.OutputNames_ {
				if v51 > 0 {
					out.RawByte(',')
				}
				out.String(string(v52))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v53, v54 := range in.InputShapes_ {
				if v53 > 0 {
					out.RawByte(',')
				}
				if v54 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v55, v56 := range v54 {
						if v55 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v56))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v57, v58 := range in.OutputShapes_ {
				if v57 > 0 {
					out.RawByte(',')
				}
				if v58 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v59, v60 := range v58 {
						if v59 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v60))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopK) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopK) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopK) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopK) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer2(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer3(in *jlexer.Lexer, out *Squeeze) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axes":
			if in.IsNull() {
				in.Skip()
				out.Axes = nil
			} else {
				in.Delim('[')
				if out.Axes == nil {
					if !in.IsDelim(']') {
						out.Axes = make([]int64, 0, 8)
					} else {
						out.Axes = []int64{}
					}
				} else {
					out.Axes = (out.Axes)[:0]
				}
				for !in.IsDelim(']') {
					var v61 int64
					v61 = int64(in.Int64())
					out.Axes = append(out.Axes, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v62 string
					v62 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v63 string
					v63 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v64 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v64 = nil
					} else {
						in.Delim('[')
						if v64 == nil {
							if !in.IsDelim(']') {
								v64 = make(pkg.Shape, 0, 8)
							} else {
								v64 = pkg.Shape{}
							}
						} else {
							v64 = (v64)[:0]
						}
						for !in.IsDelim(']') {
							var v65 int64
							v65 = int64(in.Int64())
							v64 = append(v64, v65)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v66 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v66 = nil
					} else {
						in.Delim('[')
						if v66 == nil {
							if !in.IsDelim(']') {
								v66 = make(pkg.Shape, 0, 8)
							} else {
								v66 = pkg.Shape{}
							}
						} else {
							v66 = (v66)[:0]
						}
						for !in.IsDelim(']') {
							var v67 int64
							v67 = int64(in.Int64())
							v66 = append(v66, v67)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer3(out *jwriter.Writer, in Squeeze) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Axes) != 0 {
		const prefix string = ",\"axes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v68, v69 := range in.Axes {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v69))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v70, v71 := range in.InputNames_ {
				if v70 > 0 {
					out.RawByte(',')
				}
				out.String(string(v71))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v72, v73 := range in.OutputNames_ {
				if v72 > 0 {
					out.RawByte(',')
				}
				out.String(string(v73))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v74, v75 := range in.InputShapes_ {
				if v74 > 0 {
					out.RawByte(',')
				}
				if v75 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v76, v77 := range v75 {
						if v76 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v77))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v78, v79 := range in.OutputShapes_ {
				if v78 > 0 {
					out.RawByte(',')
				}
				if v79 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v80, v81 := range v79 {
						if v80 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v81))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Squeeze) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Squeeze) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Squeeze) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Squeeze) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer3(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer4(in *jlexer.Lexer, out *Softmax) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v82 string
					v82 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v83 string
					v83 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v84 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v84 = nil
					} else {
						in.Delim('[')
						if v84 == nil {
							if !in.IsDelim(']') {
								v84 = make(pkg.Shape, 0, 8)
							} else {
								v84 = pkg.Shape{}
							}
						} else {
							v84 = (v84)[:0]
						}
						for !in.IsDelim(']') {
							var v85 int64
							v85 = int64(in.Int64())
							v84 = append(v84, v85)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v86 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v86 = nil
					} else {
						in.Delim('[')
						if v86 == nil {
							if !in.IsDelim(']') {
								v86 = make(pkg.Shape, 0, 8)
							} else {
								v86 = pkg.Shape{}
							}
						} else {
							v86 = (v86)[:0]
						}
						for !in.IsDelim(']') {
							var v87 int64
							v87 = int64(in.Int64())
							v86 = append(v86, v87)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer4(out *jwriter.Writer, in Softmax) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v88, v89 := range in.InputNames_ {
				if v88 > 0 {
					out.RawByte(',')
				}
				out.String(string(v89))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v90, v91 := range in.OutputNames_ {
				if v90 > 0 {
					out.RawByte(',')
				}
				out.String(string(v91))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v92, v93 := range in.InputShapes_ {
				if v92 > 0 {
					out.RawByte(',')
				}
				if v93 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v94, v95 := range v93 {
						if v94 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v95))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v96, v97 := range in.OutputShapes_ {
				if v96 > 0 {
					out.RawByte(',')
				}
				if v97 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v98, v99 := range v97 {
						if v98 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v99))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Softmax) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Softmax) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Softmax) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Softmax) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer4(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer5(in *jlexer.Lexer, out *Shape) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v100 string
					v100 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v101 string
					v101 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v101)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v102 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v102 = nil
					} else {
						in.Delim('[')
						if v102 == nil {
							if !in.IsDelim(']') {
								v102 = make(pkg.Shape, 0, 8)
							} else {
								v102 = pkg.Shape{}
							}
						} else {
							v102 = (v102)[:0]
						}
						for !in.IsDelim(']') {
							var v103 int64
							v103 = int64(in.Int64())
							v102 = append(v102, v103)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v102)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v104 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v104 = nil
					} else {
						in.Delim('[')
						if v104 == nil {
							if !in.IsDelim(']') {
								v104 = make(pkg.Shape, 0, 8)
							} else {
								v104 = pkg.Shape{}
							}
						} else {
							v104 = (v104)[:0]
						}
						for !in.IsDelim(']') {
							var v105 int64
							v105 = int64(in.Int64())
							v104 = append(v104, v105)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v104)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer5(out *jwriter.Writer, in Shape) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v106, v107 := range in.InputNames_ {
				if v106 > 0 {
					out.RawByte(',')
				}
				out.String(string(v107))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v108, v109 := range in.OutputNames_ {
				if v108 > 0 {
					out.RawByte(',')
				}
				out.String(string(v109))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v110, v111 := range in.InputShapes_ {
				if v110 > 0 {
					out.RawByte(',')
				}
				if v111 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v112, v113 := range v111 {
						if v112 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v113))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v114, v115 := range in.OutputShapes_ {
				if v114 > 0 {
					out.RawByte(',')
				}
				if v115 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v116, v117 := range v115 {
						if v116 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v117))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Shape) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Shape) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Shape) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Shape) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer5(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer6(in *jlexer.Lexer, out *Scale) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v118 string
					v118 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v118)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v119 string
					v119 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v119)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v120 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v120 = nil
					} else {
						in.Delim('[')
						if v120 == nil {
							if !in.IsDelim(']') {
								v120 = make(pkg.Shape, 0, 8)
							} else {
								v120 = pkg.Shape{}
							}
						} else {
							v120 = (v120)[:0]
						}
						for !in.IsDelim(']') {
							var v121 int64
							v121 = int64(in.Int64())
							v120 = append(v120, v121)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v120)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v122 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v122 = nil
					} else {
						in.Delim('[')
						if v122 == nil {
							if !in.IsDelim(']') {
								v122 = make(pkg.Shape, 0, 8)
							} else {
								v122 = pkg.Shape{}
							}
						} else {
							v122 = (v122)[:0]
						}
						for !in.IsDelim(']') {
							var v123 int64
							v123 = int64(in.Int64())
							v122 = append(v122, v123)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v122)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer6(out *jwriter.Writer, in Scale) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v124, v125 := range in.InputNames_ {
				if v124 > 0 {
					out.RawByte(',')
				}
				out.String(string(v125))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v126, v127 := range in.OutputNames_ {
				if v126 > 0 {
					out.RawByte(',')
				}
				out.String(string(v127))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v128, v129 := range in.InputShapes_ {
				if v128 > 0 {
					out.RawByte(',')
				}
				if v129 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v130, v131 := range v129 {
						if v130 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v131))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v132, v133 := range in.OutputShapes_ {
				if v132 > 0 {
					out.RawByte(',')
				}
				if v133 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v134, v135 := range v133 {
						if v134 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v135))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Scale) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Scale) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Scale) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Scale) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer6(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer7(in *jlexer.Lexer, out *Reshape) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v136 string
					v136 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v136)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v137 string
					v137 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v137)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v138 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v138 = nil
					} else {
						in.Delim('[')
						if v138 == nil {
							if !in.IsDelim(']') {
								v138 = make(pkg.Shape, 0, 8)
							} else {
								v138 = pkg.Shape{}
							}
						} else {
							v138 = (v138)[:0]
						}
						for !in.IsDelim(']') {
							var v139 int64
							v139 = int64(in.Int64())
							v138 = append(v138, v139)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v138)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v140 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v140 = nil
					} else {
						in.Delim('[')
						if v140 == nil {
							if !in.IsDelim(']') {
								v140 = make(pkg.Shape, 0, 8)
							} else {
								v140 = pkg.Shape{}
							}
						} else {
							v140 = (v140)[:0]
						}
						for !in.IsDelim(']') {
							var v141 int64
							v141 = int64(in.Int64())
							v140 = append(v140, v141)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v140)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer7(out *jwriter.Writer, in Reshape) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v142, v143 := range in.InputNames_ {
				if v142 > 0 {
					out.RawByte(',')
				}
				out.String(string(v143))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v144, v145 := range in.OutputNames_ {
				if v144 > 0 {
					out.RawByte(',')
				}
				out.String(string(v145))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v146, v147 := range in.InputShapes_ {
				if v146 > 0 {
					out.RawByte(',')
				}
				if v147 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v148, v149 := range v147 {
						if v148 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v149))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v150, v151 := range in.OutputShapes_ {
				if v150 > 0 {
					out.RawByte(',')
				}
				if v151 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v152, v153 := range v151 {
						if v152 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v153))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reshape) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reshape) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reshape) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reshape) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer7(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer8(in *jlexer.Lexer, out *Relu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v154 string
					v154 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v154)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v155 string
					v155 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v155)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v156 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v156 = nil
					} else {
						in.Delim('[')
						if v156 == nil {
							if !in.IsDelim(']') {
								v156 = make(pkg.Shape, 0, 8)
							} else {
								v156 = pkg.Shape{}
							}
						} else {
							v156 = (v156)[:0]
						}
						for !in.IsDelim(']') {
							var v157 int64
							v157 = int64(in.Int64())
							v156 = append(v156, v157)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v156)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v158 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v158 = nil
					} else {
						in.Delim('[')
						if v158 == nil {
							if !in.IsDelim(']') {
								v158 = make(pkg.Shape, 0, 8)
							} else {
								v158 = pkg.Shape{}
							}
						} else {
							v158 = (v158)[:0]
						}
						for !in.IsDelim(']') {
							var v159 int64
							v159 = int64(in.Int64())
							v158 = append(v158, v159)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v158)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer8(out *jwriter.Writer, in Relu) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v160, v161 := range in.InputNames_ {
				if v160 > 0 {
					out.RawByte(',')
				}
				out.String(string(v161))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v162, v163 := range in.OutputNames_ {
				if v162 > 0 {
					out.RawByte(',')
				}
				out.String(string(v163))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v164, v165 := range in.InputShapes_ {
				if v164 > 0 {
					out.RawByte(',')
				}
				if v165 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v166, v167 := range v165 {
						if v166 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v167))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v168, v169 := range in.OutputShapes_ {
				if v168 > 0 {
					out.RawByte(',')
				}
				if v169 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v170, v171 := range v169 {
						if v170 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v171))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Relu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Relu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Relu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Relu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer8(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer9(in *jlexer.Lexer, out *Reduce) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axes":
			if in.IsNull() {
				in.Skip()
				out.Axes = nil
			} else {
				in.Delim('[')
				if out.Axes == nil {
					if !in.IsDelim(']') {
						out.Axes = make([]int64, 0, 8)
					} else {
						out.Axes = []int64{}
					}
				} else {
					out.Axes = (out.Axes)[:0]
				}
				for !in.IsDelim(']') {
					var v172 int64
					v172 = int64(in.Int64())
					out.Axes = append(out.Axes, v172)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "keepdims":
			out.KeepDims = bool(in.Bool())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v173 string
					v173 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v173)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v174 string
					v174 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v174)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v175 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v175 = nil
					} else {
						in.Delim('[')
						if v175 == nil {
							if !in.IsDelim(']') {
								v175 = make(pkg.Shape, 0, 8)
							} else {
								v175 = pkg.Shape{}
							}
						} else {
							v175 = (v175)[:0]
						}
						for !in.IsDelim(']') {
							var v176 int64
							v176 = int64(in.Int64())
							v175 = append(v175, v176)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v175)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v177 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v177 = nil
					} else {
						in.Delim('[')
						if v177 == nil {
							if !in.IsDelim(']') {
								v177 = make(pkg.Shape, 0, 8)
							} else {
								v177 = pkg.Shape{}
							}
						} else {
							v177 = (v177)[:0]
						}
						for !in.IsDelim(']') {
							var v178 int64
							v178 = int64(in.Int64())
							v177 = append(v177, v178)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v177)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer9(out *jwriter.Writer, in Reduce) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Axes) != 0 {
		const prefix string = ",\"axes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v179, v180 := range in.Axes {
				if v179 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v180))
			}
			out.RawByte(']')
		}
	}
	if in.KeepDims {
		const prefix string = ",\"keepdims\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.KeepDims))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v181, v182 := range in.InputNames_ {
				if v181 > 0 {
					out.RawByte(',')
				}
				out.String(string(v182))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v183, v184 := range in.OutputNames_ {
				if v183 > 0 {
					out.RawByte(',')
				}
				out.String(string(v184))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v185, v186 := range in.InputShapes_ {
				if v185 > 0 {
					out.RawByte(',')
				}
				if v186 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v187, v188 := range v186 {
						if v187 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v188))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v189, v190 := range in.OutputShapes_ {
				if v189 > 0 {
					out.RawByte(',')
				}
				if v190 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v191, v192 := range v190 {
						if v191 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v192))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reduce) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reduce) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reduce) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reduce) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer9(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer10(in *jlexer.Lexer, out *Pooling) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kernel_shape":
			if in.IsNull() {
				in.Skip()
				out.KernelShape = nil
			} else {
				in.Delim('[')
				if out.KernelShape == nil {
					if !in.IsDelim(']') {
						out.KernelShape = make(pkg.Shape, 0, 8)
					} else {
						out.KernelShape = pkg.Shape{}
					}
				} else {
					out.KernelShape = (out.KernelShape)[:0]
				}
				for !in.IsDelim(']') {
					var v193 int64
					v193 = int64(in.Int64())
					out.KernelShape = append(out.KernelShape, v193)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pads":
			if in.IsNull() {
				in.Skip()
				out.Pads = nil
			} else {
				in.Delim('[')
				if out.Pads == nil {
					if !in.IsDelim(']') {
						out.Pads = make(pkg.Shape, 0, 8)
					} else {
						out.Pads = pkg.Shape{}
					}
				} else {
					out.Pads = (out.Pads)[:0]
				}
				for !in.IsDelim(']') {
					var v194 int64
					v194 = int64(in.Int64())
					out.Pads = append(out.Pads, v194)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "strides":
			if in.IsNull() {
				in.Skip()
				out.Strides = nil
			} else {
				in.Delim('[')
				if out.Strides == nil {
					if !in.IsDelim(']') {
						out.Strides = make(pkg.Shape, 0, 8)
					} else {
						out.Strides = pkg.Shape{}
					}
				} else {
					out.Strides = (out.Strides)[:0]
				}
				for !in.IsDelim(']') {
					var v195 int64
					v195 = int64(in.Int64())
					out.Strides = append(out.Strides, v195)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v196 string
					v196 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v196)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v197 string
					v197 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v197)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v198 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v198 = nil
					} else {
						in.Delim('[')
						if v198 == nil {
							if !in.IsDelim(']') {
								v198 = make(pkg.Shape, 0, 8)
							} else {
								v198 = pkg.Shape{}
							}
						} else {
							v198 = (v198)[:0]
						}
						for !in.IsDelim(']') {
							var v199 int64
							v199 = int64(in.Int64())
							v198 = append(v198, v199)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v198)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v200 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v200 = nil
					} else {
						in.Delim('[')
						if v200 == nil {
							if !in.IsDelim(']') {
								v200 = make(pkg.Shape, 0, 8)
							} else {
								v200 = pkg.Shape{}
							}
						} else {
							v200 = (v200)[:0]
						}
						for !in.IsDelim(']') {
							var v201 int64
							v201 = int64(in.Int64())
							v200 = append(v200, v201)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v200)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer10(out *jwriter.Writer, in Pooling) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.KernelShape) != 0 {
		const prefix string = ",\"kernel_shape\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v202, v203 := range in.KernelShape {
				if v202 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v203))
			}
			out.RawByte(']')
		}
	}
	if len(in.Pads) != 0 {
		const prefix string = ",\"pads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v204, v205 := range in.Pads {
				if v204 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v205))
			}
			out.RawByte(']')
		}
	}
	if len(in.Strides) != 0 {
		const prefix string = ",\"strides\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v206, v207 := range in.Strides {
				if v206 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v207))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v208, v209 := range in.InputNames_ {
				if v208 > 0 {
					out.RawByte(',')
				}
				out.String(string(v209))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v210, v211 := range in.OutputNames_ {
				if v210 > 0 {
					out.RawByte(',')
				}
				out.String(string(v211))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v212, v213 := range in.InputShapes_ {
				if v212 > 0 {
					out.RawByte(',')
				}
				if v213 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v214, v215 := range v213 {
						if v214 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v215))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v216, v217 := range in.OutputShapes_ {
				if v216 > 0 {
					out.RawByte(',')
				}
				if v217 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v218, v219 := range v217 {
						if v218 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v219))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pooling) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pooling) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pooling) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pooling) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer10(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer11(in *jlexer.Lexer, out *NonMaxSuppression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v220 string
					v220 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v220)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v221 string
					v221 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v221)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v222 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v222 = nil
					} else {
						in.Delim('[')
						if v222 == nil {
							if !in.IsDelim(']') {
								v222 = make(pkg.Shape, 0, 8)
							} else {
								v222 = pkg.Shape{}
							}
						} else {
							v222 = (v222)[:0]
						}
						for !in.IsDelim(']') {
							var v223 int64
							v223 = int64(in.Int64())
							v222 = append(v222, v223)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v222)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v224 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v224 = nil
					} else {
						in.Delim('[')
						if v224 == nil {
							if !in.IsDelim(']') {
								v224 = make(pkg.Shape, 0, 8)
							} else {
								v224 = pkg.Shape{}
							}
						} else {
							v224 = (v224)[:0]
						}
						for !in.IsDelim(']') {
							var v225 int64
							v225 = int64(in.Int64())
							v224 = append(v224, v225)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v224)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer11(out *jwriter.Writer, in NonMaxSuppression) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v226, v227 := range in.InputNames_ {
				if v226 > 0 {
					out.RawByte(',')
				}
				out.String(string(v227))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v228, v229 := range in.OutputNames_ {
				if v228 > 0 {
					out.RawByte(',')
				}
				out.String(string(v229))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v230, v231 := range in.InputShapes_ {
				if v230 > 0 {
					out.RawByte(',')
				}
				if v231 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v232, v233 := range v231 {
						if v232 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v233))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v234, v235 := range in.OutputShapes_ {
				if v234 > 0 {
					out.RawByte(',')
				}
				if v235 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v236, v237 := range v235 {
						if v236 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v237))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NonMaxSuppression) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NonMaxSuppression) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NonMaxSuppression) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NonMaxSuppression) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer11(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer12(in *jlexer.Lexer, out *MatMul) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v238 string
					v238 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v238)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v239 string
					v239 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v239)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v240 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v240 = nil
					} else {
						in.Delim('[')
						if v240 == nil {
							if !in.IsDelim(']') {
								v240 = make(pkg.Shape, 0, 8)
							} else {
								v240 = pkg.Shape{}
							}
						} else {
							v240 = (v240)[:0]
						}
						for !in.IsDelim(']') {
							var v241 int64
							v241 = int64(in.Int64())
							v240 = append(v240, v241)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v240)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v242 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v242 = nil
					} else {
						in.Delim('[')
						if v242 == nil {
							if !in.IsDelim(']') {
								v242 = make(pkg.Shape, 0, 8)
							} else {
								v242 = pkg.Shape{}
							}
						} else {
							v242 = (v242)[:0]
						}
						for !in.IsDelim(']') {
							var v243 int64
							v243 = int64(in.Int64())
							v242 = append(v242, v243)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v242)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer12(out *jwriter.Writer, in MatMul) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v244, v245 := range in.InputNames_ {
				if v244 > 0 {
					out.RawByte(',')
				}
				out.String(string(v245))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v246, v247 := range in.OutputNames_ {
				if v246 > 0 {
					out.RawByte(',')
				}
				out.String(string(v247))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v248, v249 := range in.InputShapes_ {
				if v248 > 0 {
					out.RawByte(',')
				}
				if v249 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v250, v251 := range v249 {
						if v250 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v251))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v252, v253 := range in.OutputShapes_ {
				if v252 > 0 {
					out.RawByte(',')
				}
				if v253 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v254, v255 := range v253 {
						if v254 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v255))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MatMul) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MatMul) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MatMul) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MatMul) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer12(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer13(in *jlexer.Lexer, out *LRN) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v256 string
					v256 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v256)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v257 string
					v257 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v257)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v258 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v258 = nil
					} else {
						in.Delim('[')
						if v258 == nil {
							if !in.IsDelim(']') {
								v258 = make(pkg.Shape, 0, 8)
							} else {
								v258 = pkg.Shape{}
							}
						} else {
							v258 = (v258)[:0]
						}
						for !in.IsDelim(']') {
							var v259 int64
							v259 = int64(in.Int64())
							v258 = append(v258, v259)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v258)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v260 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v260 = nil
					} else {
						in.Delim('[')
						if v260 == nil {
							if !in.IsDelim(']') {
								v260 = make(pkg.Shape, 0, 8)
							} else {
								v260 = pkg.Shape{}
							}
						} else {
							v260 = (v260)[:0]
						}
						for !in.IsDelim(']') {
							var v261 int64
							v261 = int64(in.Int64())
							v260 = append(v260, v261)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v260)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer13(out *jwriter.Writer, in LRN) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Size))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v262, v263 := range in.InputNames_ {
				if v262 > 0 {
					out.RawByte(',')
				}
				out.String(string(v263))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v264, v265 := range in.OutputNames_ {
				if v264 > 0 {
					out.RawByte(',')
				}
				out.String(string(v265))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v266, v267 := range in.InputShapes_ {
				if v266 > 0 {
					out.RawByte(',')
				}
				if v267 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v268, v269 := range v267 {
						if v268 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v269))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v270, v271 := range in.OutputShapes_ {
				if v270 > 0 {
					out.RawByte(',')
				}
				if v271 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v272, v273 := range v271 {
						if v272 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v273))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LRN) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LRN) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LRN) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LRN) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer13(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer14(in *jlexer.Lexer, out *Identity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v274 string
					v274 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v274)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v275 string
					v275 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v275)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v276 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v276 = nil
					} else {
						in.Delim('[')
						if v276 == nil {
							if !in.IsDelim(']') {
								v276 = make(pkg.Shape, 0, 8)
							} else {
								v276 = pkg.Shape{}
							}
						} else {
							v276 = (v276)[:0]
						}
						for !in.IsDelim(']') {
							var v277 int64
							v277 = int64(in.Int64())
							v276 = append(v276, v277)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v276)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v278 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v278 = nil
					} else {
						in.Delim('[')
						if v278 == nil {
							if !in.IsDelim(']') {
								v278 = make(pkg.Shape, 0, 8)
							} else {
								v278 = pkg.Shape{}
							}
						} else {
							v278 = (v278)[:0]
						}
						for !in.IsDelim(']') {
							var v279 int64
							v279 = int64(in.Int64())
							v278 = append(v278, v279)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v278)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer14(out *jwriter.Writer, in Identity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v280, v281 := range in.InputNames_ {
				if v280 > 0 {
					out.RawByte(',')
				}
				out.String(string(v281))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v282, v283 := range in.OutputNames_ {
				if v282 > 0 {
					out.RawByte(',')
				}
				out.String(string(v283))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v284, v285 := range in.InputShapes_ {
				if v284 > 0 {
					out.RawByte(',')
				}
				if v285 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v286, v287 := range v285 {
						if v286 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v287))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v288, v289 := range in.OutputShapes_ {
				if v288 > 0 {
					out.RawByte(',')
				}
				if v289 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v290, v291 := range v289 {
						if v290 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v291))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Identity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Identity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Identity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Identity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer14(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer15(in *jlexer.Lexer, out *GlobalPooling) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v292 string
					v292 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v292)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v293 string
					v293 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v293)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v294 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v294 = nil
					} else {
						in.Delim('[')
						if v294 == nil {
							if !in.IsDelim(']') {
								v294 = make(pkg.Shape, 0, 8)
							} else {
								v294 = pkg.Shape{}
							}
						} else {
							v294 = (v294)[:0]
						}
						for !in.IsDelim(']') {
							var v295 int64
							v295 = int64(in.Int64())
							v294 = append(v294, v295)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v294)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v296 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v296 = nil
					} else {
						in.Delim('[')
						if v296 == nil {
							if !in.IsDelim(']') {
								v296 = make(pkg.Shape, 0, 8)
							} else {
								v296 = pkg.Shape{}
							}
						} else {
							v296 = (v296)[:0]
						}
						for !in.IsDelim(']') {
							var v297 int64
							v297 = int64(in.Int64())
							v296 = append(v296, v297)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v296)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer15(out *jwriter.Writer, in GlobalPooling) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v298, v299 := range in.InputNames_ {
				if v298 > 0 {
					out.RawByte(',')
				}
				out.String(string(v299))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v300, v301 := range in.OutputNames_ {
				if v300 > 0 {
					out.RawByte(',')
				}
				out.String(string(v301))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v302, v303 := range in.InputShapes_ {
				if v302 > 0 {
					out.RawByte(',')
				}
				if v303 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v304, v305 := range v303 {
						if v304 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v305))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v306, v307 := range in.OutputShapes_ {
				if v306 > 0 {
					out.RawByte(',')
				}
				if v307 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v308, v309 := range v307 {
						if v308 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v309))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalPooling) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalPooling) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalPooling) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalPooling) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer15(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer16(in *jlexer.Lexer, out *Gemm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alpha":
			out.Alpha = float64(in.Float64())
		case "beta":
			out.Beta = float64(in.Float64())
		case "transa":
			out.TransA = int64(in.Int64())
		case "transb":
			out.TransB = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v310 string
					v310 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v310)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v311 string
					v311 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v311)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v312 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v312 = nil
					} else {
						in.Delim('[')
						if v312 == nil {
							if !in.IsDelim(']') {
								v312 = make(pkg.Shape, 0, 8)
							} else {
								v312 = pkg.Shape{}
							}
						} else {
							v312 = (v312)[:0]
						}
						for !in.IsDelim(']') {
							var v313 int64
							v313 = int64(in.Int64())
							v312 = append(v312, v313)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v312)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v314 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v314 = nil
					} else {
						in.Delim('[')
						if v314 == nil {
							if !in.IsDelim(']') {
								v314 = make(pkg.Shape, 0, 8)
							} else {
								v314 = pkg.Shape{}
							}
						} else {
							v314 = (v314)[:0]
						}
						for !in.IsDelim(']') {
							var v315 int64
							v315 = int64(in.Int64())
							v314 = append(v314, v315)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v314)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer16(out *jwriter.Writer, in Gemm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Alpha != 0 {
		const prefix string = ",\"alpha\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Alpha))
	}
	if in.Beta != 0 {
		const prefix string = ",\"beta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Beta))
	}
	if in.TransA != 0 {
		const prefix string = ",\"transa\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransA))
	}
	if in.TransB != 0 {
		const prefix string = ",\"transb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransB))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v316, v317 := range in.InputNames_ {
				if v316 > 0 {
					out.RawByte(',')
				}
				out.String(string(v317))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v318, v319 := range in.OutputNames_ {
				if v318 > 0 {
					out.RawByte(',')
				}
				out.String(string(v319))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v320, v321 := range in.InputShapes_ {
				if v320 > 0 {
					out.RawByte(',')
				}
				if v321 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v322, v323 := range v321 {
						if v322 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v323))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v324, v325 := range in.OutputShapes_ {
				if v324 > 0 {
					out.RawByte(',')
				}
				if v325 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v326, v327 := range v325 {
						if v326 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v327))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gemm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gemm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gemm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gemm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer16(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer17(in *jlexer.Lexer, out *Gather) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v328 string
					v328 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v328)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v329 string
					v329 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v329)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v330 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v330 = nil
					} else {
						in.Delim('[')
						if v330 == nil {
							if !in.IsDelim(']') {
								v330 = make(pkg.Shape, 0, 8)
							} else {
								v330 = pkg.Shape{}
							}
						} else {
							v330 = (v330)[:0]
						}
						for !in.IsDelim(']') {
							var v331 int64
							v331 = int64(in.Int64())
							v330 = append(v330, v331)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v330)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v332 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v332 = nil
					} else {
						in.Delim('[')
						if v332 == nil {
							if !in.IsDelim(']') {
								v332 = make(pkg.Shape, 0, 8)
							} else {
								v332 = pkg.Shape{}
							}
						} else {
							v332 = (v332)[:0]
						}
						for !in.IsDelim(']') {
							var v333 int64
							v333 = int64(in.Int64())
							v332 = append(v332, v333)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v332)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer17(out *jwriter.Writer, in Gather) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v334, v335 := range in.InputNames_ {
				if v334 > 0 {
					out.RawByte(',')
				}
				out.String(string(v335))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v336, v337 := range in.OutputNames_ {
				if v336 > 0 {
					out.RawByte(',')
				}
				out.String(string(v337))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v338, v339 := range in.InputShapes_ {
				if v338 > 0 {
					out.RawByte(',')
				}
				if v339 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v340, v341 := range v339 {
						if v340 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v341))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v342, v343 := range in.OutputShapes_ {
				if v342 > 0 {
					out.RawByte(',')
				}
				if v343 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v344, v345 := range v343 {
						if v344 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v345))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gather) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gather) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gather) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gather) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer17(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer18(in *jlexer.Lexer, out *Flatten) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v346 string
					v346 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v346)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v347 string
					v347 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v347)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v348 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v348 = nil
					} else {
						in.Delim('[')
						if v348 == nil {
							if !in.IsDelim(']') {
								v348 = make(pkg.Shape, 0, 8)
							} else {
								v348 = pkg.Shape{}
							}
						} else {
							v348 = (v348)[:0]
						}
						for !in.IsDelim(']') {
							var v349 int64
							v349 = int64(in.Int64())
							v348 = append(v348, v349)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v348)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v350 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v350 = nil
					} else {
						in.Delim('[')
						if v350 == nil {
							if !in.IsDelim(']') {
								v350 = make(pkg.Shape, 0, 8)
							} else {
								v350 = pkg.Shape{}
							}
						} else {
							v350 = (v350)[:0]
						}
						for !in.IsDelim(']') {
							var v351 int64
							v351 = int64(in.Int64())
							v350 = append(v350, v351)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v350)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer18(out *jwriter.Writer, in Flatten) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v352, v353 := range in.InputNames_ {
				if v352 > 0 {
					out.RawByte(',')
				}
				out.String(string(v353))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v354, v355 := range in.OutputNames_ {
				if v354 > 0 {
					out.RawByte(',')
				}
				out.String(string(v355))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v356, v357 := range in.InputShapes_ {
				if v356 > 0 {
					out.RawByte(',')
				}
				if v357 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v358, v359 := range v357 {
						if v358 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v359))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v360, v361 := range in.OutputShapes_ {
				if v360 > 0 {
					out.RawByte(',')
				}
				if v361 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v362, v363 := range v361 {
						if v362 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v363))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Flatten) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Flatten) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Flatten) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Flatten) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer18(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer19(in *jlexer.Lexer, out *Exp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "broadcast":
			out.Broadcast = int64(in.Int64())
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v364 string
					v364 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v364)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v365 string
					v365 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v365)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v366 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v366 = nil
					} else {
						in.Delim('[')
						if v366 == nil {
							if !in.IsDelim(']') {
								v366 = make(pkg.Shape, 0, 8)
							} else {
								v366 = pkg.Shape{}
							}
						} else {
							v366 = (v366)[:0]
						}
						for !in.IsDelim(']') {
							var v367 int64
							v367 = int64(in.Int64())
							v366 = append(v366, v367)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v366)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v368 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v368 = nil
					} else {
						in.Delim('[')
						if v368 == nil {
							if !in.IsDelim(']') {
								v368 = make(pkg.Shape, 0, 8)
							} else {
								v368 = pkg.Shape{}
							}
						} else {
							v368 = (v368)[:0]
						}
						for !in.IsDelim(']') {
							var v369 int64
							v369 = int64(in.Int64())
							v368 = append(v368, v369)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v368)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer19(out *jwriter.Writer, in Exp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Broadcast != 0 {
		const prefix string = ",\"broadcast\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Broadcast))
	}
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v370, v371 := range in.InputNames_ {
				if v370 > 0 {
					out.RawByte(',')
				}
				out.String(string(v371))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v372, v373 := range in.OutputNames_ {
				if v372 > 0 {
					out.RawByte(',')
				}
				out.String(string(v373))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v374, v375 := range in.InputShapes_ {
				if v374 > 0 {
					out.RawByte(',')
				}
				if v375 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v376, v377 := range v375 {
						if v376 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v377))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v378, v379 := range in.OutputShapes_ {
				if v378 > 0 {
					out.RawByte(',')
				}
				if v379 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v380, v381 := range v379 {
						if v380 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v381))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Exp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Exp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Exp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Exp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer19(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer20(in *jlexer.Lexer, out *ElementWise) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "broadcast":
			out.Broadcast = int64(in.Int64())
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v382 string
					v382 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v382)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v383 string
					v383 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v383)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v384 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v384 = nil
					} else {
						in.Delim('[')
						if v384 == nil {
							if !in.IsDelim(']') {
								v384 = make(pkg.Shape, 0, 8)
							} else {
								v384 = pkg.Shape{}
							}
						} else {
							v384 = (v384)[:0]
						}
						for !in.IsDelim(']') {
							var v385 int64
							v385 = int64(in.Int64())
							v384 = append(v384, v385)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v384)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v386 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v386 = nil
					} else {
						in.Delim('[')
						if v386 == nil {
							if !in.IsDelim(']') {
								v386 = make(pkg.Shape, 0, 8)
							} else {
								v386 = pkg.Shape{}
							}
						} else {
							v386 = (v386)[:0]
						}
						for !in.IsDelim(']') {
							var v387 int64
							v387 = int64(in.Int64())
							v386 = append(v386, v387)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v386)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer20(out *jwriter.Writer, in ElementWise) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Broadcast != 0 {
		const prefix string = ",\"broadcast\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Broadcast))
	}
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v388, v389 := range in.InputNames_ {
				if v388 > 0 {
					out.RawByte(',')
				}
				out.String(string(v389))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v390, v391 := range in.OutputNames_ {
				if v390 > 0 {
					out.RawByte(',')
				}
				out.String(string(v391))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v392, v393 := range in.InputShapes_ {
				if v392 > 0 {
					out.RawByte(',')
				}
				if v393 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v394, v395 := range v393 {
						if v394 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v395))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v396, v397 := range in.OutputShapes_ {
				if v396 > 0 {
					out.RawByte(',')
				}
				if v397 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v398, v399 := range v397 {
						if v398 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v399))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ElementWise) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ElementWise) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ElementWise) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ElementWise) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer20(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer21(in *jlexer.Lexer, out *Dropout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v400 string
					v400 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v400)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v401 string
					v401 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v401)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v402 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v402 = nil
					} else {
						in.Delim('[')
						if v402 == nil {
							if !in.IsDelim(']') {
								v402 = make(pkg.Shape, 0, 8)
							} else {
								v402 = pkg.Shape{}
							}
						} else {
							v402 = (v402)[:0]
						}
						for !in.IsDelim(']') {
							var v403 int64
							v403 = int64(in.Int64())
							v402 = append(v402, v403)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v402)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v404 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v404 = nil
					} else {
						in.Delim('[')
						if v404 == nil {
							if !in.IsDelim(']') {
								v404 = make(pkg.Shape, 0, 8)
							} else {
								v404 = pkg.Shape{}
							}
						} else {
							v404 = (v404)[:0]
						}
						for !in.IsDelim(']') {
							var v405 int64
							v405 = int64(in.Int64())
							v404 = append(v404, v405)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v404)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer21(out *jwriter.Writer, in Dropout) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v406, v407 := range in.InputNames_ {
				if v406 > 0 {
					out.RawByte(',')
				}
				out.String(string(v407))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v408, v409 := range in.OutputNames_ {
				if v408 > 0 {
					out.RawByte(',')
				}
				out.String(string(v409))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v410, v411 := range in.InputShapes_ {
				if v410 > 0 {
					out.RawByte(',')
				}
				if v411 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v412, v413 := range v411 {
						if v412 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v413))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v414, v415 := range in.OutputShapes_ {
				if v414 > 0 {
					out.RawByte(',')
				}
				if v415 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v416, v417 := range v415 {
						if v416 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v417))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Dropout) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Dropout) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Dropout) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Dropout) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer21(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer22(in *jlexer.Lexer, out *Conv) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "auto_pad":
			out.AutoPad = string(in.String())
		case "dilation":
			if in.IsNull() {
				in.Skip()
				out.Dilations = nil
			} else {
				in.Delim('[')
				if out.Dilations == nil {
					if !in.IsDelim(']') {
						out.Dilations = make(pkg.Shape, 0, 8)
					} else {
						out.Dilations = pkg.Shape{}
					}
				} else {
					out.Dilations = (out.Dilations)[:0]
				}
				for !in.IsDelim(']') {
					var v418 int64
					v418 = int64(in.Int64())
					out.Dilations = append(out.Dilations, v418)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "group":
			out.Group = int64(in.Int64())
		case "kernel_shape":
			if in.IsNull() {
				in.Skip()
				out.KernelShape = nil
			} else {
				in.Delim('[')
				if out.KernelShape == nil {
					if !in.IsDelim(']') {
						out.KernelShape = make(pkg.Shape, 0, 8)
					} else {
						out.KernelShape = pkg.Shape{}
					}
				} else {
					out.KernelShape = (out.KernelShape)[:0]
				}
				for !in.IsDelim(']') {
					var v419 int64
					v419 = int64(in.Int64())
					out.KernelShape = append(out.KernelShape, v419)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pads":
			if in.IsNull() {
				in.Skip()
				out.Pads = nil
			} else {
				in.Delim('[')
				if out.Pads == nil {
					if !in.IsDelim(']') {
						out.Pads = make(pkg.Shape, 0, 8)
					} else {
						out.Pads = pkg.Shape{}
					}
				} else {
					out.Pads = (out.Pads)[:0]
				}
				for !in.IsDelim(']') {
					var v420 int64
					v420 = int64(in.Int64())
					out.Pads = append(out.Pads, v420)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "strides":
			if in.IsNull() {
				in.Skip()
				out.Strides = nil
			} else {
				in.Delim('[')
				if out.Strides == nil {
					if !in.IsDelim(']') {
						out.Strides = make(pkg.Shape, 0, 8)
					} else {
						out.Strides = pkg.Shape{}
					}
				} else {
					out.Strides = (out.Strides)[:0]
				}
				for !in.IsDelim(']') {
					var v421 int64
					v421 = int64(in.Int64())
					out.Strides = append(out.Strides, v421)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v422 string
					v422 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v422)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v423 string
					v423 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v423)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v424 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v424 = nil
					} else {
						in.Delim('[')
						if v424 == nil {
							if !in.IsDelim(']') {
								v424 = make(pkg.Shape, 0, 8)
							} else {
								v424 = pkg.Shape{}
							}
						} else {
							v424 = (v424)[:0]
						}
						for !in.IsDelim(']') {
							var v425 int64
							v425 = int64(in.Int64())
							v424 = append(v424, v425)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v424)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v426 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v426 = nil
					} else {
						in.Delim('[')
						if v426 == nil {
							if !in.IsDelim(']') {
								v426 = make(pkg.Shape, 0, 8)
							} else {
								v426 = pkg.Shape{}
							}
						} else {
							v426 = (v426)[:0]
						}
						for !in.IsDelim(']') {
							var v427 int64
							v427 = int64(in.Int64())
							v426 = append(v426, v427)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v426)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer22(out *jwriter.Writer, in Conv) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AutoPad != "" {
		const prefix string = ",\"auto_pad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AutoPad))
	}
	if len(in.Dilations) != 0 {
		const prefix string = ",\"dilation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v428, v429 := range in.Dilations {
				if v428 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v429))
			}
			out.RawByte(']')
		}
	}
	if in.Group != 0 {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Group))
	}
	if len(in.KernelShape) != 0 {
		const prefix string = ",\"kernel_shape\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v430, v431 := range in.KernelShape {
				if v430 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v431))
			}
			out.RawByte(']')
		}
	}
	if len(in.Pads) != 0 {
		const prefix string = ",\"pads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v432, v433 := range in.Pads {
				if v432 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v433))
			}
			out.RawByte(']')
		}
	}
	if len(in.Strides) != 0 {
		const prefix string = ",\"strides\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v434, v435 := range in.Strides {
				if v434 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v435))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v436, v437 := range in.InputNames_ {
				if v436 > 0 {
					out.RawByte(',')
				}
				out.String(string(v437))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v438, v439 := range in.OutputNames_ {
				if v438 > 0 {
					out.RawByte(',')
				}
				out.String(string(v439))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v440, v441 := range in.InputShapes_ {
				if v440 > 0 {
					out.RawByte(',')
				}
				if v441 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v442, v443 := range v441 {
						if v442 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v443))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v444, v445 := range in.OutputShapes_ {
				if v444 > 0 {
					out.RawByte(',')
				}
				if v445 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v446, v447 := range v445 {
						if v446 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v447))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conv) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conv) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conv) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conv) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer22(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer23(in *jlexer.Lexer, out *ConstantOfShape) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v448 string
					v448 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v448)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v449 string
					v449 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v449)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v450 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v450 = nil
					} else {
						in.Delim('[')
						if v450 == nil {
							if !in.IsDelim(']') {
								v450 = make(pkg.Shape, 0, 8)
							} else {
								v450 = pkg.Shape{}
							}
						} else {
							v450 = (v450)[:0]
						}
						for !in.IsDelim(']') {
							var v451 int64
							v451 = int64(in.Int64())
							v450 = append(v450, v451)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v450)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v452 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v452 = nil
					} else {
						in.Delim('[')
						if v452 == nil {
							if !in.IsDelim(']') {
								v452 = make(pkg.Shape, 0, 8)
							} else {
								v452 = pkg.Shape{}
							}
						} else {
							v452 = (v452)[:0]
						}
						for !in.IsDelim(']') {
							var v453 int64
							v453 = int64(in.Int64())
							v452 = append(v452, v453)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v452)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer23(out *jwriter.Writer, in ConstantOfShape) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v454, v455 := range in.InputNames_ {
				if v454 > 0 {
					out.RawByte(',')
				}
				out.String(string(v455))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v456, v457 := range in.OutputNames_ {
				if v456 > 0 {
					out.RawByte(',')
				}
				out.String(string(v457))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v458, v459 := range in.InputShapes_ {
				if v458 > 0 {
					out.RawByte(',')
				}
				if v459 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v460, v461 := range v459 {
						if v460 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v461))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v462, v463 := range in.OutputShapes_ {
				if v462 > 0 {
					out.RawByte(',')
				}
				if v463 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v464, v465 := range v463 {
						if v464 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v465))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConstantOfShape) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConstantOfShape) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConstantOfShape) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConstantOfShape) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer23(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer24(in *jlexer.Lexer, out *ConstantInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v466 string
					v466 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v466)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v467 string
					v467 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v467)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v468 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v468 = nil
					} else {
						in.Delim('[')
						if v468 == nil {
							if !in.IsDelim(']') {
								v468 = make(pkg.Shape, 0, 8)
							} else {
								v468 = pkg.Shape{}
							}
						} else {
							v468 = (v468)[:0]
						}
						for !in.IsDelim(']') {
							var v469 int64
							v469 = int64(in.Int64())
							v468 = append(v468, v469)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v468)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v470 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v470 = nil
					} else {
						in.Delim('[')
						if v470 == nil {
							if !in.IsDelim(']') {
								v470 = make(pkg.Shape, 0, 8)
							} else {
								v470 = pkg.Shape{}
							}
						} else {
							v470 = (v470)[:0]
						}
						for !in.IsDelim(']') {
							var v471 int64
							v471 = int64(in.Int64())
							v470 = append(v470, v471)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v470)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer24(out *jwriter.Writer, in ConstantInput) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v472, v473 := range in.InputNames_ {
				if v472 > 0 {
					out.RawByte(',')
				}
				out.String(string(v473))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v474, v475 := range in.OutputNames_ {
				if v474 > 0 {
					out.RawByte(',')
				}
				out.String(string(v475))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v476, v477 := range in.InputShapes_ {
				if v476 > 0 {
					out.RawByte(',')
				}
				if v477 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v478, v479 := range v477 {
						if v478 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v479))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v480, v481 := range in.OutputShapes_ {
				if v480 > 0 {
					out.RawByte(',')
				}
				if v481 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v482, v483 := range v481 {
						if v482 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v483))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConstantInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConstantInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConstantInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConstantInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer24(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer25(in *jlexer.Lexer, out *Constant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v484 string
					v484 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v484)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v485 string
					v485 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v485)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v486 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v486 = nil
					} else {
						in.Delim('[')
						if v486 == nil {
							if !in.IsDelim(']') {
								v486 = make(pkg.Shape, 0, 8)
							} else {
								v486 = pkg.Shape{}
							}
						} else {
							v486 = (v486)[:0]
						}
						for !in.IsDelim(']') {
							var v487 int64
							v487 = int64(in.Int64())
							v486 = append(v486, v487)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v486)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v488 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v488 = nil
					} else {
						in.Delim('[')
						if v488 == nil {
							if !in.IsDelim(']') {
								v488 = make(pkg.Shape, 0, 8)
							} else {
								v488 = pkg.Shape{}
							}
						} else {
							v488 = (v488)[:0]
						}
						for !in.IsDelim(']') {
							var v489 int64
							v489 = int64(in.Int64())
							v488 = append(v488, v489)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v488)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer25(out *jwriter.Writer, in Constant) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v490, v491 := range in.InputNames_ {
				if v490 > 0 {
					out.RawByte(',')
				}
				out.String(string(v491))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v492, v493 := range in.OutputNames_ {
				if v492 > 0 {
					out.RawByte(',')
				}
				out.String(string(v493))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v494, v495 := range in.InputShapes_ {
				if v494 > 0 {
					out.RawByte(',')
				}
				if v495 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v496, v497 := range v495 {
						if v496 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v497))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v498, v499 := range in.OutputShapes_ {
				if v498 > 0 {
					out.RawByte(',')
				}
				if v499 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v500, v501 := range v499 {
						if v500 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v501))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Constant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Constant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Constant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Constant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer25(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer26(in *jlexer.Lexer, out *Concat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v502 string
					v502 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v502)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v503 string
					v503 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v503)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v504 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v504 = nil
					} else {
						in.Delim('[')
						if v504 == nil {
							if !in.IsDelim(']') {
								v504 = make(pkg.Shape, 0, 8)
							} else {
								v504 = pkg.Shape{}
							}
						} else {
							v504 = (v504)[:0]
						}
						for !in.IsDelim(']') {
							var v505 int64
							v505 = int64(in.Int64())
							v504 = append(v504, v505)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v504)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v506 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v506 = nil
					} else {
						in.Delim('[')
						if v506 == nil {
							if !in.IsDelim(']') {
								v506 = make(pkg.Shape, 0, 8)
							} else {
								v506 = pkg.Shape{}
							}
						} else {
							v506 = (v506)[:0]
						}
						for !in.IsDelim(']') {
							var v507 int64
							v507 = int64(in.Int64())
							v506 = append(v506, v507)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v506)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer26(out *jwriter.Writer, in Concat) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v508, v509 := range in.InputNames_ {
				if v508 > 0 {
					out.RawByte(',')
				}
				out.String(string(v509))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v510, v511 := range in.OutputNames_ {
				if v510 > 0 {
					out.RawByte(',')
				}
				out.String(string(v511))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v512, v513 := range in.InputShapes_ {
				if v512 > 0 {
					out.RawByte(',')
				}
				if v513 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v514, v515 := range v513 {
						if v514 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v515))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v516, v517 := range in.OutputShapes_ {
				if v516 > 0 {
					out.RawByte(',')
				}
				if v517 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v518, v519 := range v517 {
						if v518 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v519))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Concat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Concat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Concat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Concat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer26(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer27(in *jlexer.Lexer, out *Clip) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "min":
			out.Min = float32(in.Float32())
		case "max":
			out.Max = float32(in.Float32())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v520 string
					v520 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v520)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v521 string
					v521 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v521)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v522 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v522 = nil
					} else {
						in.Delim('[')
						if v522 == nil {
							if !in.IsDelim(']') {
								v522 = make(pkg.Shape, 0, 8)
							} else {
								v522 = pkg.Shape{}
							}
						} else {
							v522 = (v522)[:0]
						}
						for !in.IsDelim(']') {
							var v523 int64
							v523 = int64(in.Int64())
							v522 = append(v522, v523)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v522)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v524 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v524 = nil
					} else {
						in.Delim('[')
						if v524 == nil {
							if !in.IsDelim(']') {
								v524 = make(pkg.Shape, 0, 8)
							} else {
								v524 = pkg.Shape{}
							}
						} else {
							v524 = (v524)[:0]
						}
						for !in.IsDelim(']') {
							var v525 int64
							v525 = int64(in.Int64())
							v524 = append(v524, v525)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v524)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer27(out *jwriter.Writer, in Clip) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Min != 0 {
		const prefix string = ",\"min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Min))
	}
	if in.Max != 0 {
		const prefix string = ",\"max\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Max))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v526, v527 := range in.InputNames_ {
				if v526 > 0 {
					out.RawByte(',')
				}
				out.String(string(v527))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v528, v529 := range in.OutputNames_ {
				if v528 > 0 {
					out.RawByte(',')
				}
				out.String(string(v529))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v530, v531 := range in.InputShapes_ {
				if v530 > 0 {
					out.RawByte(',')
				}
				if v531 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v532, v533 := range v531 {
						if v532 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v533))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v534, v535 := range in.OutputShapes_ {
				if v534 > 0 {
					out.RawByte(',')
				}
				if v535 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v536, v537 := range v535 {
						if v536 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v537))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Clip) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Clip) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Clip) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Clip) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer27(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer28(in *jlexer.Lexer, out *Cast) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v538 string
					v538 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v538)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v539 string
					v539 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v539)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v540 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v540 = nil
					} else {
						in.Delim('[')
						if v540 == nil {
							if !in.IsDelim(']') {
								v540 = make(pkg.Shape, 0, 8)
							} else {
								v540 = pkg.Shape{}
							}
						} else {
							v540 = (v540)[:0]
						}
						for !in.IsDelim(']') {
							var v541 int64
							v541 = int64(in.Int64())
							v540 = append(v540, v541)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v540)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v542 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v542 = nil
					} else {
						in.Delim('[')
						if v542 == nil {
							if !in.IsDelim(']') {
								v542 = make(pkg.Shape, 0, 8)
							} else {
								v542 = pkg.Shape{}
							}
						} else {
							v542 = (v542)[:0]
						}
						for !in.IsDelim(']') {
							var v543 int64
							v543 = int64(in.Int64())
							v542 = append(v542, v543)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v542)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer28(out *jwriter.Writer, in Cast) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v544, v545 := range in.InputNames_ {
				if v544 > 0 {
					out.RawByte(',')
				}
				out.String(string(v545))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v546, v547 := range in.OutputNames_ {
				if v546 > 0 {
					out.RawByte(',')
				}
				out.String(string(v547))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v548, v549 := range in.InputShapes_ {
				if v548 > 0 {
					out.RawByte(',')
				}
				if v549 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v550, v551 := range v549 {
						if v550 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v551))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v552, v553 := range in.OutputShapes_ {
				if v552 > 0 {
					out.RawByte(',')
				}
				if v553 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v554, v555 := range v553 {
						if v554 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v555))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cast) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cast) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cast) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cast) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer28(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer29(in *jlexer.Lexer, out *BatchNorm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spatial":
			out.Spatial = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v556 string
					v556 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v556)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v557 string
					v557 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v557)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v558 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v558 = nil
					} else {
						in.Delim('[')
						if v558 == nil {
							if !in.IsDelim(']') {
								v558 = make(pkg.Shape, 0, 8)
							} else {
								v558 = pkg.Shape{}
							}
						} else {
							v558 = (v558)[:0]
						}
						for !in.IsDelim(']') {
							var v559 int64
							v559 = int64(in.Int64())
							v558 = append(v558, v559)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v558)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v560 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v560 = nil
					} else {
						in.Delim('[')
						if v560 == nil {
							if !in.IsDelim(']') {
								v560 = make(pkg.Shape, 0, 8)
							} else {
								v560 = pkg.Shape{}
							}
						} else {
							v560 = (v560)[:0]
						}
						for !in.IsDelim(']') {
							var v561 int64
							v561 = int64(in.Int64())
							v560 = append(v560, v561)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v560)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer29(out *jwriter.Writer, in BatchNorm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Spatial != 0 {
		const prefix string = ",\"spatial\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Spatial))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v562, v563 := range in.InputNames_ {
				if v562 > 0 {
					out.RawByte(',')
				}
				out.String(string(v563))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v564, v565 := range in.OutputNames_ {
				if v564 > 0 {
					out.RawByte(',')
				}
				out.String(string(v565))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v566, v567 := range in.InputShapes_ {
				if v566 > 0 {
					out.RawByte(',')
				}
				if v567 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v568, v569 := range v567 {
						if v568 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v569))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v570, v571 := range in.OutputShapes_ {
				if v570 > 0 {
					out.RawByte(',')
				}
				if v571 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v572, v573 := range v571 {
						if v572 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v573))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchNorm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchNorm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchNorm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchNorm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer29(l, v)
}
