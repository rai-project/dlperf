// +build  !debug

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package layer

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	pkg "github.com/rai-project/dlperf/pkg"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer(in *jlexer.Lexer, out *Unsqueeze) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axes":
			if in.IsNull() {
				in.Skip()
				out.Axes = nil
			} else {
				in.Delim('[')
				if out.Axes == nil {
					if !in.IsDelim(']') {
						out.Axes = make([]int64, 0, 8)
					} else {
						out.Axes = []int64{}
					}
				} else {
					out.Axes = (out.Axes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.Axes = append(out.Axes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v4 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						in.Delim('[')
						if v4 == nil {
							if !in.IsDelim(']') {
								v4 = make(pkg.Shape, 0, 8)
							} else {
								v4 = pkg.Shape{}
							}
						} else {
							v4 = (v4)[:0]
						}
						for !in.IsDelim(']') {
							var v5 int64
							v5 = int64(in.Int64())
							v4 = append(v4, v5)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v6 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						in.Delim('[')
						if v6 == nil {
							if !in.IsDelim(']') {
								v6 = make(pkg.Shape, 0, 8)
							} else {
								v6 = pkg.Shape{}
							}
						} else {
							v6 = (v6)[:0]
						}
						for !in.IsDelim(']') {
							var v7 int64
							v7 = int64(in.Int64())
							v6 = append(v6, v7)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer(out *jwriter.Writer, in Unsqueeze) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Axes) != 0 {
		const prefix string = ",\"axes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Axes {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v9))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.InputNames_ {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.OutputNames_ {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.InputShapes_ {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v16, v17 := range v15 {
						if v16 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v17))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.OutputShapes_ {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v20, v21 := range v19 {
						if v20 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v21))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Unsqueeze) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Unsqueeze) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Unsqueeze) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Unsqueeze) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer1(in *jlexer.Lexer, out *Transpose) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Permutation = nil
			} else {
				in.Delim('[')
				if out.Permutation == nil {
					if !in.IsDelim(']') {
						out.Permutation = make([]int64, 0, 8)
					} else {
						out.Permutation = []int64{}
					}
				} else {
					out.Permutation = (out.Permutation)[:0]
				}
				for !in.IsDelim(']') {
					var v22 int64
					v22 = int64(in.Int64())
					out.Permutation = append(out.Permutation, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v24 string
					v24 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v25 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						in.Delim('[')
						if v25 == nil {
							if !in.IsDelim(']') {
								v25 = make(pkg.Shape, 0, 8)
							} else {
								v25 = pkg.Shape{}
							}
						} else {
							v25 = (v25)[:0]
						}
						for !in.IsDelim(']') {
							var v26 int64
							v26 = int64(in.Int64())
							v25 = append(v25, v26)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v27 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v27 = nil
					} else {
						in.Delim('[')
						if v27 == nil {
							if !in.IsDelim(']') {
								v27 = make(pkg.Shape, 0, 8)
							} else {
								v27 = pkg.Shape{}
							}
						} else {
							v27 = (v27)[:0]
						}
						for !in.IsDelim(']') {
							var v28 int64
							v28 = int64(in.Int64())
							v27 = append(v27, v28)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer1(out *jwriter.Writer, in Transpose) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Permutation) != 0 {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Permutation {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v30))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v31, v32 := range in.InputNames_ {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v33, v34 := range in.OutputNames_ {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.InputShapes_ {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v37, v38 := range v36 {
						if v37 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v38))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v39, v40 := range in.OutputShapes_ {
				if v39 > 0 {
					out.RawByte(',')
				}
				if v40 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v41, v42 := range v40 {
						if v41 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v42))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Transpose) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Transpose) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Transpose) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Transpose) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer1(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer2(in *jlexer.Lexer, out *Softmax) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v43 string
					v43 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v44 string
					v44 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v45 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v45 = nil
					} else {
						in.Delim('[')
						if v45 == nil {
							if !in.IsDelim(']') {
								v45 = make(pkg.Shape, 0, 8)
							} else {
								v45 = pkg.Shape{}
							}
						} else {
							v45 = (v45)[:0]
						}
						for !in.IsDelim(']') {
							var v46 int64
							v46 = int64(in.Int64())
							v45 = append(v45, v46)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v47 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v47 = nil
					} else {
						in.Delim('[')
						if v47 == nil {
							if !in.IsDelim(']') {
								v47 = make(pkg.Shape, 0, 8)
							} else {
								v47 = pkg.Shape{}
							}
						} else {
							v47 = (v47)[:0]
						}
						for !in.IsDelim(']') {
							var v48 int64
							v48 = int64(in.Int64())
							v47 = append(v47, v48)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer2(out *jwriter.Writer, in Softmax) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v49, v50 := range in.InputNames_ {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.String(string(v50))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v51, v52 := range in.OutputNames_ {
				if v51 > 0 {
					out.RawByte(',')
				}
				out.String(string(v52))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v53, v54 := range in.InputShapes_ {
				if v53 > 0 {
					out.RawByte(',')
				}
				if v54 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v55, v56 := range v54 {
						if v55 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v56))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v57, v58 := range in.OutputShapes_ {
				if v57 > 0 {
					out.RawByte(',')
				}
				if v58 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v59, v60 := range v58 {
						if v59 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v60))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Softmax) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Softmax) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Softmax) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Softmax) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer2(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer3(in *jlexer.Lexer, out *Scale) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v61 string
					v61 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v62 string
					v62 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v63 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v63 = nil
					} else {
						in.Delim('[')
						if v63 == nil {
							if !in.IsDelim(']') {
								v63 = make(pkg.Shape, 0, 8)
							} else {
								v63 = pkg.Shape{}
							}
						} else {
							v63 = (v63)[:0]
						}
						for !in.IsDelim(']') {
							var v64 int64
							v64 = int64(in.Int64())
							v63 = append(v63, v64)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v65 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v65 = nil
					} else {
						in.Delim('[')
						if v65 == nil {
							if !in.IsDelim(']') {
								v65 = make(pkg.Shape, 0, 8)
							} else {
								v65 = pkg.Shape{}
							}
						} else {
							v65 = (v65)[:0]
						}
						for !in.IsDelim(']') {
							var v66 int64
							v66 = int64(in.Int64())
							v65 = append(v65, v66)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer3(out *jwriter.Writer, in Scale) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v67, v68 := range in.InputNames_ {
				if v67 > 0 {
					out.RawByte(',')
				}
				out.String(string(v68))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v69, v70 := range in.OutputNames_ {
				if v69 > 0 {
					out.RawByte(',')
				}
				out.String(string(v70))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v71, v72 := range in.InputShapes_ {
				if v71 > 0 {
					out.RawByte(',')
				}
				if v72 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v73, v74 := range v72 {
						if v73 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v74))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v75, v76 := range in.OutputShapes_ {
				if v75 > 0 {
					out.RawByte(',')
				}
				if v76 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v77, v78 := range v76 {
						if v77 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v78))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Scale) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Scale) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Scale) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Scale) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer3(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer4(in *jlexer.Lexer, out *Reshape) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v79 string
					v79 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v80 string
					v80 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v81 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v81 = nil
					} else {
						in.Delim('[')
						if v81 == nil {
							if !in.IsDelim(']') {
								v81 = make(pkg.Shape, 0, 8)
							} else {
								v81 = pkg.Shape{}
							}
						} else {
							v81 = (v81)[:0]
						}
						for !in.IsDelim(']') {
							var v82 int64
							v82 = int64(in.Int64())
							v81 = append(v81, v82)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v83 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v83 = nil
					} else {
						in.Delim('[')
						if v83 == nil {
							if !in.IsDelim(']') {
								v83 = make(pkg.Shape, 0, 8)
							} else {
								v83 = pkg.Shape{}
							}
						} else {
							v83 = (v83)[:0]
						}
						for !in.IsDelim(']') {
							var v84 int64
							v84 = int64(in.Int64())
							v83 = append(v83, v84)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer4(out *jwriter.Writer, in Reshape) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v85, v86 := range in.InputNames_ {
				if v85 > 0 {
					out.RawByte(',')
				}
				out.String(string(v86))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v87, v88 := range in.OutputNames_ {
				if v87 > 0 {
					out.RawByte(',')
				}
				out.String(string(v88))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v89, v90 := range in.InputShapes_ {
				if v89 > 0 {
					out.RawByte(',')
				}
				if v90 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v91, v92 := range v90 {
						if v91 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v92))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v93, v94 := range in.OutputShapes_ {
				if v93 > 0 {
					out.RawByte(',')
				}
				if v94 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v95, v96 := range v94 {
						if v95 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v96))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reshape) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reshape) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reshape) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reshape) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer4(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer5(in *jlexer.Lexer, out *Relu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v97 string
					v97 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v98 string
					v98 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v98)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v99 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v99 = nil
					} else {
						in.Delim('[')
						if v99 == nil {
							if !in.IsDelim(']') {
								v99 = make(pkg.Shape, 0, 8)
							} else {
								v99 = pkg.Shape{}
							}
						} else {
							v99 = (v99)[:0]
						}
						for !in.IsDelim(']') {
							var v100 int64
							v100 = int64(in.Int64())
							v99 = append(v99, v100)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v99)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v101 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v101 = nil
					} else {
						in.Delim('[')
						if v101 == nil {
							if !in.IsDelim(']') {
								v101 = make(pkg.Shape, 0, 8)
							} else {
								v101 = pkg.Shape{}
							}
						} else {
							v101 = (v101)[:0]
						}
						for !in.IsDelim(']') {
							var v102 int64
							v102 = int64(in.Int64())
							v101 = append(v101, v102)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v101)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer5(out *jwriter.Writer, in Relu) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v103, v104 := range in.InputNames_ {
				if v103 > 0 {
					out.RawByte(',')
				}
				out.String(string(v104))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v105, v106 := range in.OutputNames_ {
				if v105 > 0 {
					out.RawByte(',')
				}
				out.String(string(v106))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v107, v108 := range in.InputShapes_ {
				if v107 > 0 {
					out.RawByte(',')
				}
				if v108 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v109, v110 := range v108 {
						if v109 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v110))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v111, v112 := range in.OutputShapes_ {
				if v111 > 0 {
					out.RawByte(',')
				}
				if v112 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v113, v114 := range v112 {
						if v113 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v114))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Relu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Relu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Relu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Relu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer5(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer6(in *jlexer.Lexer, out *Pooling) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kernel_shape":
			if in.IsNull() {
				in.Skip()
				out.KernelShape = nil
			} else {
				in.Delim('[')
				if out.KernelShape == nil {
					if !in.IsDelim(']') {
						out.KernelShape = make(pkg.Shape, 0, 8)
					} else {
						out.KernelShape = pkg.Shape{}
					}
				} else {
					out.KernelShape = (out.KernelShape)[:0]
				}
				for !in.IsDelim(']') {
					var v115 int64
					v115 = int64(in.Int64())
					out.KernelShape = append(out.KernelShape, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pads":
			if in.IsNull() {
				in.Skip()
				out.Pads = nil
			} else {
				in.Delim('[')
				if out.Pads == nil {
					if !in.IsDelim(']') {
						out.Pads = make(pkg.Shape, 0, 8)
					} else {
						out.Pads = pkg.Shape{}
					}
				} else {
					out.Pads = (out.Pads)[:0]
				}
				for !in.IsDelim(']') {
					var v116 int64
					v116 = int64(in.Int64())
					out.Pads = append(out.Pads, v116)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "strides":
			if in.IsNull() {
				in.Skip()
				out.Strides = nil
			} else {
				in.Delim('[')
				if out.Strides == nil {
					if !in.IsDelim(']') {
						out.Strides = make(pkg.Shape, 0, 8)
					} else {
						out.Strides = pkg.Shape{}
					}
				} else {
					out.Strides = (out.Strides)[:0]
				}
				for !in.IsDelim(']') {
					var v117 int64
					v117 = int64(in.Int64())
					out.Strides = append(out.Strides, v117)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v118 string
					v118 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v118)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v119 string
					v119 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v119)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v120 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v120 = nil
					} else {
						in.Delim('[')
						if v120 == nil {
							if !in.IsDelim(']') {
								v120 = make(pkg.Shape, 0, 8)
							} else {
								v120 = pkg.Shape{}
							}
						} else {
							v120 = (v120)[:0]
						}
						for !in.IsDelim(']') {
							var v121 int64
							v121 = int64(in.Int64())
							v120 = append(v120, v121)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v120)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v122 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v122 = nil
					} else {
						in.Delim('[')
						if v122 == nil {
							if !in.IsDelim(']') {
								v122 = make(pkg.Shape, 0, 8)
							} else {
								v122 = pkg.Shape{}
							}
						} else {
							v122 = (v122)[:0]
						}
						for !in.IsDelim(']') {
							var v123 int64
							v123 = int64(in.Int64())
							v122 = append(v122, v123)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v122)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer6(out *jwriter.Writer, in Pooling) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.KernelShape) != 0 {
		const prefix string = ",\"kernel_shape\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v124, v125 := range in.KernelShape {
				if v124 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v125))
			}
			out.RawByte(']')
		}
	}
	if len(in.Pads) != 0 {
		const prefix string = ",\"pads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v126, v127 := range in.Pads {
				if v126 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v127))
			}
			out.RawByte(']')
		}
	}
	if len(in.Strides) != 0 {
		const prefix string = ",\"strides\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v128, v129 := range in.Strides {
				if v128 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v129))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v130, v131 := range in.InputNames_ {
				if v130 > 0 {
					out.RawByte(',')
				}
				out.String(string(v131))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v132, v133 := range in.OutputNames_ {
				if v132 > 0 {
					out.RawByte(',')
				}
				out.String(string(v133))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v134, v135 := range in.InputShapes_ {
				if v134 > 0 {
					out.RawByte(',')
				}
				if v135 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v136, v137 := range v135 {
						if v136 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v137))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v138, v139 := range in.OutputShapes_ {
				if v138 > 0 {
					out.RawByte(',')
				}
				if v139 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v140, v141 := range v139 {
						if v140 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v141))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pooling) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pooling) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pooling) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pooling) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer6(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer7(in *jlexer.Lexer, out *MatMul) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v142 string
					v142 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v142)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v143 string
					v143 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v143)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v144 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v144 = nil
					} else {
						in.Delim('[')
						if v144 == nil {
							if !in.IsDelim(']') {
								v144 = make(pkg.Shape, 0, 8)
							} else {
								v144 = pkg.Shape{}
							}
						} else {
							v144 = (v144)[:0]
						}
						for !in.IsDelim(']') {
							var v145 int64
							v145 = int64(in.Int64())
							v144 = append(v144, v145)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v144)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v146 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v146 = nil
					} else {
						in.Delim('[')
						if v146 == nil {
							if !in.IsDelim(']') {
								v146 = make(pkg.Shape, 0, 8)
							} else {
								v146 = pkg.Shape{}
							}
						} else {
							v146 = (v146)[:0]
						}
						for !in.IsDelim(']') {
							var v147 int64
							v147 = int64(in.Int64())
							v146 = append(v146, v147)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v146)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer7(out *jwriter.Writer, in MatMul) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v148, v149 := range in.InputNames_ {
				if v148 > 0 {
					out.RawByte(',')
				}
				out.String(string(v149))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v150, v151 := range in.OutputNames_ {
				if v150 > 0 {
					out.RawByte(',')
				}
				out.String(string(v151))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v152, v153 := range in.InputShapes_ {
				if v152 > 0 {
					out.RawByte(',')
				}
				if v153 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v154, v155 := range v153 {
						if v154 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v155))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v156, v157 := range in.OutputShapes_ {
				if v156 > 0 {
					out.RawByte(',')
				}
				if v157 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v158, v159 := range v157 {
						if v158 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v159))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MatMul) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MatMul) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MatMul) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MatMul) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer7(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer8(in *jlexer.Lexer, out *LRN) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v160 string
					v160 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v160)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v161 string
					v161 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v161)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v162 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v162 = nil
					} else {
						in.Delim('[')
						if v162 == nil {
							if !in.IsDelim(']') {
								v162 = make(pkg.Shape, 0, 8)
							} else {
								v162 = pkg.Shape{}
							}
						} else {
							v162 = (v162)[:0]
						}
						for !in.IsDelim(']') {
							var v163 int64
							v163 = int64(in.Int64())
							v162 = append(v162, v163)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v162)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v164 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v164 = nil
					} else {
						in.Delim('[')
						if v164 == nil {
							if !in.IsDelim(']') {
								v164 = make(pkg.Shape, 0, 8)
							} else {
								v164 = pkg.Shape{}
							}
						} else {
							v164 = (v164)[:0]
						}
						for !in.IsDelim(']') {
							var v165 int64
							v165 = int64(in.Int64())
							v164 = append(v164, v165)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v164)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer8(out *jwriter.Writer, in LRN) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Size))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v166, v167 := range in.InputNames_ {
				if v166 > 0 {
					out.RawByte(',')
				}
				out.String(string(v167))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v168, v169 := range in.OutputNames_ {
				if v168 > 0 {
					out.RawByte(',')
				}
				out.String(string(v169))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v170, v171 := range in.InputShapes_ {
				if v170 > 0 {
					out.RawByte(',')
				}
				if v171 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v172, v173 := range v171 {
						if v172 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v173))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v174, v175 := range in.OutputShapes_ {
				if v174 > 0 {
					out.RawByte(',')
				}
				if v175 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v176, v177 := range v175 {
						if v176 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v177))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LRN) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LRN) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LRN) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LRN) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer8(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer9(in *jlexer.Lexer, out *Identity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v178 string
					v178 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v178)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v179 string
					v179 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v179)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v180 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v180 = nil
					} else {
						in.Delim('[')
						if v180 == nil {
							if !in.IsDelim(']') {
								v180 = make(pkg.Shape, 0, 8)
							} else {
								v180 = pkg.Shape{}
							}
						} else {
							v180 = (v180)[:0]
						}
						for !in.IsDelim(']') {
							var v181 int64
							v181 = int64(in.Int64())
							v180 = append(v180, v181)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v180)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v182 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v182 = nil
					} else {
						in.Delim('[')
						if v182 == nil {
							if !in.IsDelim(']') {
								v182 = make(pkg.Shape, 0, 8)
							} else {
								v182 = pkg.Shape{}
							}
						} else {
							v182 = (v182)[:0]
						}
						for !in.IsDelim(']') {
							var v183 int64
							v183 = int64(in.Int64())
							v182 = append(v182, v183)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v182)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer9(out *jwriter.Writer, in Identity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v184, v185 := range in.InputNames_ {
				if v184 > 0 {
					out.RawByte(',')
				}
				out.String(string(v185))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v186, v187 := range in.OutputNames_ {
				if v186 > 0 {
					out.RawByte(',')
				}
				out.String(string(v187))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v188, v189 := range in.InputShapes_ {
				if v188 > 0 {
					out.RawByte(',')
				}
				if v189 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v190, v191 := range v189 {
						if v190 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v191))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v192, v193 := range in.OutputShapes_ {
				if v192 > 0 {
					out.RawByte(',')
				}
				if v193 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v194, v195 := range v193 {
						if v194 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v195))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Identity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Identity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Identity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Identity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer9(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer10(in *jlexer.Lexer, out *GlobalPooling) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v196 string
					v196 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v196)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v197 string
					v197 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v197)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v198 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v198 = nil
					} else {
						in.Delim('[')
						if v198 == nil {
							if !in.IsDelim(']') {
								v198 = make(pkg.Shape, 0, 8)
							} else {
								v198 = pkg.Shape{}
							}
						} else {
							v198 = (v198)[:0]
						}
						for !in.IsDelim(']') {
							var v199 int64
							v199 = int64(in.Int64())
							v198 = append(v198, v199)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v198)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v200 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v200 = nil
					} else {
						in.Delim('[')
						if v200 == nil {
							if !in.IsDelim(']') {
								v200 = make(pkg.Shape, 0, 8)
							} else {
								v200 = pkg.Shape{}
							}
						} else {
							v200 = (v200)[:0]
						}
						for !in.IsDelim(']') {
							var v201 int64
							v201 = int64(in.Int64())
							v200 = append(v200, v201)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v200)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer10(out *jwriter.Writer, in GlobalPooling) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v202, v203 := range in.InputNames_ {
				if v202 > 0 {
					out.RawByte(',')
				}
				out.String(string(v203))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v204, v205 := range in.OutputNames_ {
				if v204 > 0 {
					out.RawByte(',')
				}
				out.String(string(v205))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v206, v207 := range in.InputShapes_ {
				if v206 > 0 {
					out.RawByte(',')
				}
				if v207 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v208, v209 := range v207 {
						if v208 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v209))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v210, v211 := range in.OutputShapes_ {
				if v210 > 0 {
					out.RawByte(',')
				}
				if v211 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v212, v213 := range v211 {
						if v212 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v213))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalPooling) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalPooling) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalPooling) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalPooling) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer10(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer11(in *jlexer.Lexer, out *Gemm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alpha":
			out.Alpha = float64(in.Float64())
		case "beta":
			out.Beta = float64(in.Float64())
		case "transa":
			out.TransA = int64(in.Int64())
		case "transb":
			out.TransB = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v214 string
					v214 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v214)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v215 string
					v215 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v215)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v216 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v216 = nil
					} else {
						in.Delim('[')
						if v216 == nil {
							if !in.IsDelim(']') {
								v216 = make(pkg.Shape, 0, 8)
							} else {
								v216 = pkg.Shape{}
							}
						} else {
							v216 = (v216)[:0]
						}
						for !in.IsDelim(']') {
							var v217 int64
							v217 = int64(in.Int64())
							v216 = append(v216, v217)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v216)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v218 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v218 = nil
					} else {
						in.Delim('[')
						if v218 == nil {
							if !in.IsDelim(']') {
								v218 = make(pkg.Shape, 0, 8)
							} else {
								v218 = pkg.Shape{}
							}
						} else {
							v218 = (v218)[:0]
						}
						for !in.IsDelim(']') {
							var v219 int64
							v219 = int64(in.Int64())
							v218 = append(v218, v219)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v218)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer11(out *jwriter.Writer, in Gemm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Alpha != 0 {
		const prefix string = ",\"alpha\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Alpha))
	}
	if in.Beta != 0 {
		const prefix string = ",\"beta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Beta))
	}
	if in.TransA != 0 {
		const prefix string = ",\"transa\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransA))
	}
	if in.TransB != 0 {
		const prefix string = ",\"transb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransB))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v220, v221 := range in.InputNames_ {
				if v220 > 0 {
					out.RawByte(',')
				}
				out.String(string(v221))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v222, v223 := range in.OutputNames_ {
				if v222 > 0 {
					out.RawByte(',')
				}
				out.String(string(v223))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v224, v225 := range in.InputShapes_ {
				if v224 > 0 {
					out.RawByte(',')
				}
				if v225 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v226, v227 := range v225 {
						if v226 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v227))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v228, v229 := range in.OutputShapes_ {
				if v228 > 0 {
					out.RawByte(',')
				}
				if v229 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v230, v231 := range v229 {
						if v230 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v231))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gemm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gemm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gemm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gemm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer11(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer12(in *jlexer.Lexer, out *Flatten) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v232 string
					v232 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v232)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v233 string
					v233 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v233)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v234 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v234 = nil
					} else {
						in.Delim('[')
						if v234 == nil {
							if !in.IsDelim(']') {
								v234 = make(pkg.Shape, 0, 8)
							} else {
								v234 = pkg.Shape{}
							}
						} else {
							v234 = (v234)[:0]
						}
						for !in.IsDelim(']') {
							var v235 int64
							v235 = int64(in.Int64())
							v234 = append(v234, v235)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v234)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v236 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v236 = nil
					} else {
						in.Delim('[')
						if v236 == nil {
							if !in.IsDelim(']') {
								v236 = make(pkg.Shape, 0, 8)
							} else {
								v236 = pkg.Shape{}
							}
						} else {
							v236 = (v236)[:0]
						}
						for !in.IsDelim(']') {
							var v237 int64
							v237 = int64(in.Int64())
							v236 = append(v236, v237)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v236)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer12(out *jwriter.Writer, in Flatten) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v238, v239 := range in.InputNames_ {
				if v238 > 0 {
					out.RawByte(',')
				}
				out.String(string(v239))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v240, v241 := range in.OutputNames_ {
				if v240 > 0 {
					out.RawByte(',')
				}
				out.String(string(v241))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v242, v243 := range in.InputShapes_ {
				if v242 > 0 {
					out.RawByte(',')
				}
				if v243 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v244, v245 := range v243 {
						if v244 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v245))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v246, v247 := range in.OutputShapes_ {
				if v246 > 0 {
					out.RawByte(',')
				}
				if v247 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v248, v249 := range v247 {
						if v248 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v249))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Flatten) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Flatten) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Flatten) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Flatten) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer12(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer13(in *jlexer.Lexer, out *ElementWise) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "broadcast":
			out.Broadcast = int64(in.Int64())
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v250 string
					v250 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v250)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v251 string
					v251 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v251)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v252 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v252 = nil
					} else {
						in.Delim('[')
						if v252 == nil {
							if !in.IsDelim(']') {
								v252 = make(pkg.Shape, 0, 8)
							} else {
								v252 = pkg.Shape{}
							}
						} else {
							v252 = (v252)[:0]
						}
						for !in.IsDelim(']') {
							var v253 int64
							v253 = int64(in.Int64())
							v252 = append(v252, v253)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v252)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v254 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v254 = nil
					} else {
						in.Delim('[')
						if v254 == nil {
							if !in.IsDelim(']') {
								v254 = make(pkg.Shape, 0, 8)
							} else {
								v254 = pkg.Shape{}
							}
						} else {
							v254 = (v254)[:0]
						}
						for !in.IsDelim(']') {
							var v255 int64
							v255 = int64(in.Int64())
							v254 = append(v254, v255)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v254)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer13(out *jwriter.Writer, in ElementWise) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Broadcast != 0 {
		const prefix string = ",\"broadcast\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Broadcast))
	}
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v256, v257 := range in.InputNames_ {
				if v256 > 0 {
					out.RawByte(',')
				}
				out.String(string(v257))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v258, v259 := range in.OutputNames_ {
				if v258 > 0 {
					out.RawByte(',')
				}
				out.String(string(v259))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v260, v261 := range in.InputShapes_ {
				if v260 > 0 {
					out.RawByte(',')
				}
				if v261 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v262, v263 := range v261 {
						if v262 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v263))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v264, v265 := range in.OutputShapes_ {
				if v264 > 0 {
					out.RawByte(',')
				}
				if v265 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v266, v267 := range v265 {
						if v266 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v267))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ElementWise) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ElementWise) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ElementWise) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ElementWise) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer13(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer14(in *jlexer.Lexer, out *Dropout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v268 string
					v268 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v268)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v269 string
					v269 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v269)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v270 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v270 = nil
					} else {
						in.Delim('[')
						if v270 == nil {
							if !in.IsDelim(']') {
								v270 = make(pkg.Shape, 0, 8)
							} else {
								v270 = pkg.Shape{}
							}
						} else {
							v270 = (v270)[:0]
						}
						for !in.IsDelim(']') {
							var v271 int64
							v271 = int64(in.Int64())
							v270 = append(v270, v271)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v270)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v272 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v272 = nil
					} else {
						in.Delim('[')
						if v272 == nil {
							if !in.IsDelim(']') {
								v272 = make(pkg.Shape, 0, 8)
							} else {
								v272 = pkg.Shape{}
							}
						} else {
							v272 = (v272)[:0]
						}
						for !in.IsDelim(']') {
							var v273 int64
							v273 = int64(in.Int64())
							v272 = append(v272, v273)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v272)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer14(out *jwriter.Writer, in Dropout) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v274, v275 := range in.InputNames_ {
				if v274 > 0 {
					out.RawByte(',')
				}
				out.String(string(v275))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v276, v277 := range in.OutputNames_ {
				if v276 > 0 {
					out.RawByte(',')
				}
				out.String(string(v277))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v278, v279 := range in.InputShapes_ {
				if v278 > 0 {
					out.RawByte(',')
				}
				if v279 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v280, v281 := range v279 {
						if v280 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v281))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v282, v283 := range in.OutputShapes_ {
				if v282 > 0 {
					out.RawByte(',')
				}
				if v283 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v284, v285 := range v283 {
						if v284 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v285))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Dropout) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Dropout) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Dropout) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Dropout) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer14(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer15(in *jlexer.Lexer, out *Conv) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "auto_pad":
			out.AutoPad = string(in.String())
		case "dilation":
			if in.IsNull() {
				in.Skip()
				out.Dilations = nil
			} else {
				in.Delim('[')
				if out.Dilations == nil {
					if !in.IsDelim(']') {
						out.Dilations = make(pkg.Shape, 0, 8)
					} else {
						out.Dilations = pkg.Shape{}
					}
				} else {
					out.Dilations = (out.Dilations)[:0]
				}
				for !in.IsDelim(']') {
					var v286 int64
					v286 = int64(in.Int64())
					out.Dilations = append(out.Dilations, v286)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "group":
			out.Group = int64(in.Int64())
		case "kernel_shape":
			if in.IsNull() {
				in.Skip()
				out.KernelShape = nil
			} else {
				in.Delim('[')
				if out.KernelShape == nil {
					if !in.IsDelim(']') {
						out.KernelShape = make(pkg.Shape, 0, 8)
					} else {
						out.KernelShape = pkg.Shape{}
					}
				} else {
					out.KernelShape = (out.KernelShape)[:0]
				}
				for !in.IsDelim(']') {
					var v287 int64
					v287 = int64(in.Int64())
					out.KernelShape = append(out.KernelShape, v287)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pads":
			if in.IsNull() {
				in.Skip()
				out.Pads = nil
			} else {
				in.Delim('[')
				if out.Pads == nil {
					if !in.IsDelim(']') {
						out.Pads = make(pkg.Shape, 0, 8)
					} else {
						out.Pads = pkg.Shape{}
					}
				} else {
					out.Pads = (out.Pads)[:0]
				}
				for !in.IsDelim(']') {
					var v288 int64
					v288 = int64(in.Int64())
					out.Pads = append(out.Pads, v288)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "strides":
			if in.IsNull() {
				in.Skip()
				out.Strides = nil
			} else {
				in.Delim('[')
				if out.Strides == nil {
					if !in.IsDelim(']') {
						out.Strides = make(pkg.Shape, 0, 8)
					} else {
						out.Strides = pkg.Shape{}
					}
				} else {
					out.Strides = (out.Strides)[:0]
				}
				for !in.IsDelim(']') {
					var v289 int64
					v289 = int64(in.Int64())
					out.Strides = append(out.Strides, v289)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v290 string
					v290 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v290)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v291 string
					v291 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v291)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v292 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v292 = nil
					} else {
						in.Delim('[')
						if v292 == nil {
							if !in.IsDelim(']') {
								v292 = make(pkg.Shape, 0, 8)
							} else {
								v292 = pkg.Shape{}
							}
						} else {
							v292 = (v292)[:0]
						}
						for !in.IsDelim(']') {
							var v293 int64
							v293 = int64(in.Int64())
							v292 = append(v292, v293)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v292)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v294 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v294 = nil
					} else {
						in.Delim('[')
						if v294 == nil {
							if !in.IsDelim(']') {
								v294 = make(pkg.Shape, 0, 8)
							} else {
								v294 = pkg.Shape{}
							}
						} else {
							v294 = (v294)[:0]
						}
						for !in.IsDelim(']') {
							var v295 int64
							v295 = int64(in.Int64())
							v294 = append(v294, v295)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v294)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer15(out *jwriter.Writer, in Conv) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AutoPad != "" {
		const prefix string = ",\"auto_pad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AutoPad))
	}
	if len(in.Dilations) != 0 {
		const prefix string = ",\"dilation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v296, v297 := range in.Dilations {
				if v296 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v297))
			}
			out.RawByte(']')
		}
	}
	if in.Group != 0 {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Group))
	}
	if len(in.KernelShape) != 0 {
		const prefix string = ",\"kernel_shape\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v298, v299 := range in.KernelShape {
				if v298 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v299))
			}
			out.RawByte(']')
		}
	}
	if len(in.Pads) != 0 {
		const prefix string = ",\"pads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v300, v301 := range in.Pads {
				if v300 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v301))
			}
			out.RawByte(']')
		}
	}
	if len(in.Strides) != 0 {
		const prefix string = ",\"strides\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v302, v303 := range in.Strides {
				if v302 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v303))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v304, v305 := range in.InputNames_ {
				if v304 > 0 {
					out.RawByte(',')
				}
				out.String(string(v305))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v306, v307 := range in.OutputNames_ {
				if v306 > 0 {
					out.RawByte(',')
				}
				out.String(string(v307))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v308, v309 := range in.InputShapes_ {
				if v308 > 0 {
					out.RawByte(',')
				}
				if v309 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v310, v311 := range v309 {
						if v310 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v311))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v312, v313 := range in.OutputShapes_ {
				if v312 > 0 {
					out.RawByte(',')
				}
				if v313 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v314, v315 := range v313 {
						if v314 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v315))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conv) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conv) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conv) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conv) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer15(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer16(in *jlexer.Lexer, out *ConstantInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v316 string
					v316 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v316)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v317 string
					v317 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v317)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v318 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v318 = nil
					} else {
						in.Delim('[')
						if v318 == nil {
							if !in.IsDelim(']') {
								v318 = make(pkg.Shape, 0, 8)
							} else {
								v318 = pkg.Shape{}
							}
						} else {
							v318 = (v318)[:0]
						}
						for !in.IsDelim(']') {
							var v319 int64
							v319 = int64(in.Int64())
							v318 = append(v318, v319)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v318)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v320 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v320 = nil
					} else {
						in.Delim('[')
						if v320 == nil {
							if !in.IsDelim(']') {
								v320 = make(pkg.Shape, 0, 8)
							} else {
								v320 = pkg.Shape{}
							}
						} else {
							v320 = (v320)[:0]
						}
						for !in.IsDelim(']') {
							var v321 int64
							v321 = int64(in.Int64())
							v320 = append(v320, v321)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v320)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer16(out *jwriter.Writer, in ConstantInput) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v322, v323 := range in.InputNames_ {
				if v322 > 0 {
					out.RawByte(',')
				}
				out.String(string(v323))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v324, v325 := range in.OutputNames_ {
				if v324 > 0 {
					out.RawByte(',')
				}
				out.String(string(v325))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v326, v327 := range in.InputShapes_ {
				if v326 > 0 {
					out.RawByte(',')
				}
				if v327 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v328, v329 := range v327 {
						if v328 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v329))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v330, v331 := range in.OutputShapes_ {
				if v330 > 0 {
					out.RawByte(',')
				}
				if v331 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v332, v333 := range v331 {
						if v332 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v333))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConstantInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConstantInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConstantInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConstantInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer16(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer17(in *jlexer.Lexer, out *Constant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v334 string
					v334 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v334)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v335 string
					v335 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v335)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v336 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v336 = nil
					} else {
						in.Delim('[')
						if v336 == nil {
							if !in.IsDelim(']') {
								v336 = make(pkg.Shape, 0, 8)
							} else {
								v336 = pkg.Shape{}
							}
						} else {
							v336 = (v336)[:0]
						}
						for !in.IsDelim(']') {
							var v337 int64
							v337 = int64(in.Int64())
							v336 = append(v336, v337)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v336)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v338 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v338 = nil
					} else {
						in.Delim('[')
						if v338 == nil {
							if !in.IsDelim(']') {
								v338 = make(pkg.Shape, 0, 8)
							} else {
								v338 = pkg.Shape{}
							}
						} else {
							v338 = (v338)[:0]
						}
						for !in.IsDelim(']') {
							var v339 int64
							v339 = int64(in.Int64())
							v338 = append(v338, v339)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v338)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer17(out *jwriter.Writer, in Constant) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v340, v341 := range in.InputNames_ {
				if v340 > 0 {
					out.RawByte(',')
				}
				out.String(string(v341))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v342, v343 := range in.OutputNames_ {
				if v342 > 0 {
					out.RawByte(',')
				}
				out.String(string(v343))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v344, v345 := range in.InputShapes_ {
				if v344 > 0 {
					out.RawByte(',')
				}
				if v345 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v346, v347 := range v345 {
						if v346 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v347))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v348, v349 := range in.OutputShapes_ {
				if v348 > 0 {
					out.RawByte(',')
				}
				if v349 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v350, v351 := range v349 {
						if v350 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v351))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Constant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Constant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Constant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Constant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer17(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer18(in *jlexer.Lexer, out *Concat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v352 string
					v352 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v352)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v353 string
					v353 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v353)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v354 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v354 = nil
					} else {
						in.Delim('[')
						if v354 == nil {
							if !in.IsDelim(']') {
								v354 = make(pkg.Shape, 0, 8)
							} else {
								v354 = pkg.Shape{}
							}
						} else {
							v354 = (v354)[:0]
						}
						for !in.IsDelim(']') {
							var v355 int64
							v355 = int64(in.Int64())
							v354 = append(v354, v355)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v354)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v356 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v356 = nil
					} else {
						in.Delim('[')
						if v356 == nil {
							if !in.IsDelim(']') {
								v356 = make(pkg.Shape, 0, 8)
							} else {
								v356 = pkg.Shape{}
							}
						} else {
							v356 = (v356)[:0]
						}
						for !in.IsDelim(']') {
							var v357 int64
							v357 = int64(in.Int64())
							v356 = append(v356, v357)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v356)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer18(out *jwriter.Writer, in Concat) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v358, v359 := range in.InputNames_ {
				if v358 > 0 {
					out.RawByte(',')
				}
				out.String(string(v359))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v360, v361 := range in.OutputNames_ {
				if v360 > 0 {
					out.RawByte(',')
				}
				out.String(string(v361))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v362, v363 := range in.InputShapes_ {
				if v362 > 0 {
					out.RawByte(',')
				}
				if v363 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v364, v365 := range v363 {
						if v364 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v365))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v366, v367 := range in.OutputShapes_ {
				if v366 > 0 {
					out.RawByte(',')
				}
				if v367 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v368, v369 := range v367 {
						if v368 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v369))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Concat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Concat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Concat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Concat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer18(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer19(in *jlexer.Lexer, out *Clip) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "min":
			out.Min = float32(in.Float32())
		case "max":
			out.Max = float32(in.Float32())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v370 string
					v370 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v370)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v371 string
					v371 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v371)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v372 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v372 = nil
					} else {
						in.Delim('[')
						if v372 == nil {
							if !in.IsDelim(']') {
								v372 = make(pkg.Shape, 0, 8)
							} else {
								v372 = pkg.Shape{}
							}
						} else {
							v372 = (v372)[:0]
						}
						for !in.IsDelim(']') {
							var v373 int64
							v373 = int64(in.Int64())
							v372 = append(v372, v373)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v372)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v374 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v374 = nil
					} else {
						in.Delim('[')
						if v374 == nil {
							if !in.IsDelim(']') {
								v374 = make(pkg.Shape, 0, 8)
							} else {
								v374 = pkg.Shape{}
							}
						} else {
							v374 = (v374)[:0]
						}
						for !in.IsDelim(']') {
							var v375 int64
							v375 = int64(in.Int64())
							v374 = append(v374, v375)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v374)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer19(out *jwriter.Writer, in Clip) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Min != 0 {
		const prefix string = ",\"min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Min))
	}
	if in.Max != 0 {
		const prefix string = ",\"max\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Max))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v376, v377 := range in.InputNames_ {
				if v376 > 0 {
					out.RawByte(',')
				}
				out.String(string(v377))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v378, v379 := range in.OutputNames_ {
				if v378 > 0 {
					out.RawByte(',')
				}
				out.String(string(v379))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v380, v381 := range in.InputShapes_ {
				if v380 > 0 {
					out.RawByte(',')
				}
				if v381 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v382, v383 := range v381 {
						if v382 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v383))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v384, v385 := range in.OutputShapes_ {
				if v384 > 0 {
					out.RawByte(',')
				}
				if v385 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v386, v387 := range v385 {
						if v386 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v387))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Clip) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Clip) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Clip) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Clip) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer19(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer20(in *jlexer.Lexer, out *BatchNorm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spatial":
			out.Spatial = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v388 string
					v388 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v388)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v389 string
					v389 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v389)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v390 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v390 = nil
					} else {
						in.Delim('[')
						if v390 == nil {
							if !in.IsDelim(']') {
								v390 = make(pkg.Shape, 0, 8)
							} else {
								v390 = pkg.Shape{}
							}
						} else {
							v390 = (v390)[:0]
						}
						for !in.IsDelim(']') {
							var v391 int64
							v391 = int64(in.Int64())
							v390 = append(v390, v391)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v390)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v392 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v392 = nil
					} else {
						in.Delim('[')
						if v392 == nil {
							if !in.IsDelim(']') {
								v392 = make(pkg.Shape, 0, 8)
							} else {
								v392 = pkg.Shape{}
							}
						} else {
							v392 = (v392)[:0]
						}
						for !in.IsDelim(']') {
							var v393 int64
							v393 = int64(in.Int64())
							v392 = append(v392, v393)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v392)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer20(out *jwriter.Writer, in BatchNorm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Spatial != 0 {
		const prefix string = ",\"spatial\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Spatial))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v394, v395 := range in.InputNames_ {
				if v394 > 0 {
					out.RawByte(',')
				}
				out.String(string(v395))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v396, v397 := range in.OutputNames_ {
				if v396 > 0 {
					out.RawByte(',')
				}
				out.String(string(v397))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v398, v399 := range in.InputShapes_ {
				if v398 > 0 {
					out.RawByte(',')
				}
				if v399 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v400, v401 := range v399 {
						if v400 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v401))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v402, v403 := range in.OutputShapes_ {
				if v402 > 0 {
					out.RawByte(',')
				}
				if v403 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v404, v405 := range v403 {
						if v404 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v405))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchNorm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchNorm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchNorm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchNorm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer20(l, v)
}
