// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package layer

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	pkg "github.com/rai-project/dlperf/pkg"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer(in *jlexer.Lexer, out *softmaxBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.ArgNames = append(out.ArgNames, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Algorithms = append(out.Algorithms, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v3 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v3)
					out.DataTypes = append(out.DataTypes, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer(out *jwriter.Writer, in softmaxBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v4, v5 := range in.ArgNames {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Algorithms {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.DataTypes {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v9)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v softmaxBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v softmaxBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *softmaxBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *softmaxBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in *jlexer.Lexer, out *pkg.DataType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "ctype":
			out.CType = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out *jwriter.Writer, in pkg.DataType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"ctype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CType))
	}
	out.RawByte('}')
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer1(in *jlexer.Lexer, out *reluBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.ArgNames = append(out.ArgNames, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Algorithms = append(out.Algorithms, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v12 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v12)
					out.DataTypes = append(out.DataTypes, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer1(out *jwriter.Writer, in reluBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.ArgNames {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Algorithms {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.DataTypes {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v18)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reluBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reluBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reluBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reluBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer1(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer2(in *jlexer.Lexer, out *poolingBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "filter_height":
			out.FilterHeight = int64(in.Int64())
		case "filter_width":
			out.FilterWidth = int64(in.Int64())
		case "pad_height":
			out.PadHeight = int64(in.Int64())
		case "pad_width":
			out.PadWidth = int64(in.Int64())
		case "stride_height":
			out.StrideHeight = int64(in.Int64())
		case "stride_width":
			out.StrideWidth = int64(in.Int64())
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.ArgNames = append(out.ArgNames, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.Algorithms = append(out.Algorithms, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v21 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v21)
					out.DataTypes = append(out.DataTypes, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer2(out *jwriter.Writer, in poolingBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.FilterHeight != 0 {
		const prefix string = ",\"filter_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FilterHeight))
	}
	if in.FilterWidth != 0 {
		const prefix string = ",\"filter_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FilterWidth))
	}
	if in.PadHeight != 0 {
		const prefix string = ",\"pad_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PadHeight))
	}
	if in.PadWidth != 0 {
		const prefix string = ",\"pad_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PadWidth))
	}
	if in.StrideHeight != 0 {
		const prefix string = ",\"stride_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StrideHeight))
	}
	if in.StrideWidth != 0 {
		const prefix string = ",\"stride_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StrideWidth))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.ArgNames {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Algorithms {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.DataTypes {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v27)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v poolingBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v poolingBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *poolingBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *poolingBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer2(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer3(in *jlexer.Lexer, out *gemmBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.ArgNames = append(out.ArgNames, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.Algorithms = append(out.Algorithms, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v30 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v30)
					out.DataTypes = append(out.DataTypes, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer3(out *jwriter.Writer, in gemmBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v31, v32 := range in.ArgNames {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v33, v34 := range in.Algorithms {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.DataTypes {
				if v35 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v36)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v gemmBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v gemmBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *gemmBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *gemmBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer3(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer4(in *jlexer.Lexer, out *elementWiseBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "operator":
			out.Operator = string(in.String())
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.ArgNames = append(out.ArgNames, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v38 string
					v38 = string(in.String())
					out.Algorithms = append(out.Algorithms, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v39 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v39)
					out.DataTypes = append(out.DataTypes, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer4(out *jwriter.Writer, in elementWiseBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	{
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Operator))
	}
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v40, v41 := range in.ArgNames {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.String(string(v41))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v42, v43 := range in.Algorithms {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.DataTypes {
				if v44 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v45)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v elementWiseBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v elementWiseBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *elementWiseBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *elementWiseBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer4(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer5(in *jlexer.Lexer, out *dropoutBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.ArgNames = append(out.ArgNames, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v47 string
					v47 = string(in.String())
					out.Algorithms = append(out.Algorithms, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v48 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v48)
					out.DataTypes = append(out.DataTypes, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer5(out *jwriter.Writer, in dropoutBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v49, v50 := range in.ArgNames {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.String(string(v50))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v51, v52 := range in.Algorithms {
				if v51 > 0 {
					out.RawByte(',')
				}
				out.String(string(v52))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v53, v54 := range in.DataTypes {
				if v53 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v54)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v dropoutBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v dropoutBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *dropoutBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *dropoutBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer5(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer6(in *jlexer.Lexer, out *convBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "filter_count":
			out.FilterCount = int64(in.Int64())
		case "filter_height":
			out.FilterHeight = int64(in.Int64())
		case "filter_width":
			out.FilterWidth = int64(in.Int64())
		case "pad_height":
			out.PadHeight = int64(in.Int64())
		case "pad_width":
			out.PadWidth = int64(in.Int64())
		case "stride_height":
			out.StrideHeight = int64(in.Int64())
		case "stride_width":
			out.StrideWidth = int64(in.Int64())
		case "dilation_width":
			out.DilationWidth = int64(in.Int64())
		case "dilation_height":
			out.DilationHeight = int64(in.Int64())
		case "conv_fwd_type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ConvFwdType).UnmarshalJSON(data))
			}
		case "conv_bwd_type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ConvBwdType).UnmarshalJSON(data))
			}
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "group":
			out.Group = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v55 string
					v55 = string(in.String())
					out.ArgNames = append(out.ArgNames, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v56 string
					v56 = string(in.String())
					out.Algorithms = append(out.Algorithms, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v57 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v57)
					out.DataTypes = append(out.DataTypes, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer6(out *jwriter.Writer, in convBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.FilterCount != 0 {
		const prefix string = ",\"filter_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FilterCount))
	}
	if in.FilterHeight != 0 {
		const prefix string = ",\"filter_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FilterHeight))
	}
	if in.FilterWidth != 0 {
		const prefix string = ",\"filter_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FilterWidth))
	}
	if in.PadHeight != 0 {
		const prefix string = ",\"pad_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PadHeight))
	}
	if in.PadWidth != 0 {
		const prefix string = ",\"pad_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PadWidth))
	}
	if in.StrideHeight != 0 {
		const prefix string = ",\"stride_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StrideHeight))
	}
	if in.StrideWidth != 0 {
		const prefix string = ",\"stride_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StrideWidth))
	}
	if in.DilationWidth != 0 {
		const prefix string = ",\"dilation_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DilationWidth))
	}
	if in.DilationHeight != 0 {
		const prefix string = ",\"dilation_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DilationHeight))
	}
	if in.ConvFwdType != 0 {
		const prefix string = ",\"conv_fwd_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ConvFwdType).MarshalJSON())
	}
	if in.ConvBwdType != 0 {
		const prefix string = ",\"conv_bwd_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ConvBwdType).MarshalJSON())
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if in.Group != 0 {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Group))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v58, v59 := range in.ArgNames {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.String(string(v59))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v60, v61 := range in.Algorithms {
				if v60 > 0 {
					out.RawByte(',')
				}
				out.String(string(v61))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v62, v63 := range in.DataTypes {
				if v62 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v63)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v convBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v convBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *convBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *convBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer6(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer7(in *jlexer.Lexer, out *batchnormBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_training":
			out.IsTraining = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v64 string
					v64 = string(in.String())
					out.ArgNames = append(out.ArgNames, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v65 string
					v65 = string(in.String())
					out.Algorithms = append(out.Algorithms, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v66 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v66)
					out.DataTypes = append(out.DataTypes, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer7(out *jwriter.Writer, in batchnormBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v67, v68 := range in.ArgNames {
				if v67 > 0 {
					out.RawByte(',')
				}
				out.String(string(v68))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v69, v70 := range in.Algorithms {
				if v69 > 0 {
					out.RawByte(',')
				}
				out.String(string(v70))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v71, v72 := range in.DataTypes {
				if v71 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v72)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v batchnormBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v batchnormBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *batchnormBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *batchnormBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer7(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer8(in *jlexer.Lexer, out *Unsqueeze) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axes":
			if in.IsNull() {
				in.Skip()
				out.Axes = nil
			} else {
				in.Delim('[')
				if out.Axes == nil {
					if !in.IsDelim(']') {
						out.Axes = make([]int64, 0, 8)
					} else {
						out.Axes = []int64{}
					}
				} else {
					out.Axes = (out.Axes)[:0]
				}
				for !in.IsDelim(']') {
					var v73 int64
					v73 = int64(in.Int64())
					out.Axes = append(out.Axes, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v74 string
					v74 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v75 string
					v75 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v76 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v76 = nil
					} else {
						in.Delim('[')
						if v76 == nil {
							if !in.IsDelim(']') {
								v76 = make(pkg.Shape, 0, 8)
							} else {
								v76 = pkg.Shape{}
							}
						} else {
							v76 = (v76)[:0]
						}
						for !in.IsDelim(']') {
							var v77 int64
							v77 = int64(in.Int64())
							v76 = append(v76, v77)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v78 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v78 = nil
					} else {
						in.Delim('[')
						if v78 == nil {
							if !in.IsDelim(']') {
								v78 = make(pkg.Shape, 0, 8)
							} else {
								v78 = pkg.Shape{}
							}
						} else {
							v78 = (v78)[:0]
						}
						for !in.IsDelim(']') {
							var v79 int64
							v79 = int64(in.Int64())
							v78 = append(v78, v79)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v78)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer8(out *jwriter.Writer, in Unsqueeze) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Axes) != 0 {
		const prefix string = ",\"axes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v80, v81 := range in.Axes {
				if v80 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v81))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v82, v83 := range in.InputNames_ {
				if v82 > 0 {
					out.RawByte(',')
				}
				out.String(string(v83))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v84, v85 := range in.OutputNames_ {
				if v84 > 0 {
					out.RawByte(',')
				}
				out.String(string(v85))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v86, v87 := range in.InputShapes_ {
				if v86 > 0 {
					out.RawByte(',')
				}
				if v87 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v88, v89 := range v87 {
						if v88 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v89))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v90, v91 := range in.OutputShapes_ {
				if v90 > 0 {
					out.RawByte(',')
				}
				if v91 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v92, v93 := range v91 {
						if v92 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v93))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Unsqueeze) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Unsqueeze) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Unsqueeze) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Unsqueeze) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer8(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer9(in *jlexer.Lexer, out *Transpose) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "perm":
			if in.IsNull() {
				in.Skip()
				out.Permutation = nil
			} else {
				in.Delim('[')
				if out.Permutation == nil {
					if !in.IsDelim(']') {
						out.Permutation = make([]int64, 0, 8)
					} else {
						out.Permutation = []int64{}
					}
				} else {
					out.Permutation = (out.Permutation)[:0]
				}
				for !in.IsDelim(']') {
					var v94 int64
					v94 = int64(in.Int64())
					out.Permutation = append(out.Permutation, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v95 string
					v95 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v95)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v96 string
					v96 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v96)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v97 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v97 = nil
					} else {
						in.Delim('[')
						if v97 == nil {
							if !in.IsDelim(']') {
								v97 = make(pkg.Shape, 0, 8)
							} else {
								v97 = pkg.Shape{}
							}
						} else {
							v97 = (v97)[:0]
						}
						for !in.IsDelim(']') {
							var v98 int64
							v98 = int64(in.Int64())
							v97 = append(v97, v98)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v99 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v99 = nil
					} else {
						in.Delim('[')
						if v99 == nil {
							if !in.IsDelim(']') {
								v99 = make(pkg.Shape, 0, 8)
							} else {
								v99 = pkg.Shape{}
							}
						} else {
							v99 = (v99)[:0]
						}
						for !in.IsDelim(']') {
							var v100 int64
							v100 = int64(in.Int64())
							v99 = append(v99, v100)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v99)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer9(out *jwriter.Writer, in Transpose) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Permutation) != 0 {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v101, v102 := range in.Permutation {
				if v101 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v102))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v103, v104 := range in.InputNames_ {
				if v103 > 0 {
					out.RawByte(',')
				}
				out.String(string(v104))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v105, v106 := range in.OutputNames_ {
				if v105 > 0 {
					out.RawByte(',')
				}
				out.String(string(v106))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v107, v108 := range in.InputShapes_ {
				if v107 > 0 {
					out.RawByte(',')
				}
				if v108 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v109, v110 := range v108 {
						if v109 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v110))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v111, v112 := range in.OutputShapes_ {
				if v111 > 0 {
					out.RawByte(',')
				}
				if v112 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v113, v114 := range v112 {
						if v113 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v114))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Transpose) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Transpose) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Transpose) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Transpose) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer9(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer10(in *jlexer.Lexer, out *TopK) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "k":
			out.K = int64(in.Int64())
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v115 string
					v115 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v116 string
					v116 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v116)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v117 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v117 = nil
					} else {
						in.Delim('[')
						if v117 == nil {
							if !in.IsDelim(']') {
								v117 = make(pkg.Shape, 0, 8)
							} else {
								v117 = pkg.Shape{}
							}
						} else {
							v117 = (v117)[:0]
						}
						for !in.IsDelim(']') {
							var v118 int64
							v118 = int64(in.Int64())
							v117 = append(v117, v118)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v117)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v119 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v119 = nil
					} else {
						in.Delim('[')
						if v119 == nil {
							if !in.IsDelim(']') {
								v119 = make(pkg.Shape, 0, 8)
							} else {
								v119 = pkg.Shape{}
							}
						} else {
							v119 = (v119)[:0]
						}
						for !in.IsDelim(']') {
							var v120 int64
							v120 = int64(in.Int64())
							v119 = append(v119, v120)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v119)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer10(out *jwriter.Writer, in TopK) {
	out.RawByte('{')
	first := true
	_ = first
	if in.K != 0 {
		const prefix string = ",\"k\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.K))
	}
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v121, v122 := range in.InputNames_ {
				if v121 > 0 {
					out.RawByte(',')
				}
				out.String(string(v122))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v123, v124 := range in.OutputNames_ {
				if v123 > 0 {
					out.RawByte(',')
				}
				out.String(string(v124))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v125, v126 := range in.InputShapes_ {
				if v125 > 0 {
					out.RawByte(',')
				}
				if v126 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v127, v128 := range v126 {
						if v127 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v128))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v129, v130 := range in.OutputShapes_ {
				if v129 > 0 {
					out.RawByte(',')
				}
				if v130 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v131, v132 := range v130 {
						if v131 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v132))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopK) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopK) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopK) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopK) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer10(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer11(in *jlexer.Lexer, out *Squeeze) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axes":
			if in.IsNull() {
				in.Skip()
				out.Axes = nil
			} else {
				in.Delim('[')
				if out.Axes == nil {
					if !in.IsDelim(']') {
						out.Axes = make([]int64, 0, 8)
					} else {
						out.Axes = []int64{}
					}
				} else {
					out.Axes = (out.Axes)[:0]
				}
				for !in.IsDelim(']') {
					var v133 int64
					v133 = int64(in.Int64())
					out.Axes = append(out.Axes, v133)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v134 string
					v134 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v134)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v135 string
					v135 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v135)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v136 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v136 = nil
					} else {
						in.Delim('[')
						if v136 == nil {
							if !in.IsDelim(']') {
								v136 = make(pkg.Shape, 0, 8)
							} else {
								v136 = pkg.Shape{}
							}
						} else {
							v136 = (v136)[:0]
						}
						for !in.IsDelim(']') {
							var v137 int64
							v137 = int64(in.Int64())
							v136 = append(v136, v137)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v136)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v138 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v138 = nil
					} else {
						in.Delim('[')
						if v138 == nil {
							if !in.IsDelim(']') {
								v138 = make(pkg.Shape, 0, 8)
							} else {
								v138 = pkg.Shape{}
							}
						} else {
							v138 = (v138)[:0]
						}
						for !in.IsDelim(']') {
							var v139 int64
							v139 = int64(in.Int64())
							v138 = append(v138, v139)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v138)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer11(out *jwriter.Writer, in Squeeze) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Axes) != 0 {
		const prefix string = ",\"axes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v140, v141 := range in.Axes {
				if v140 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v141))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v142, v143 := range in.InputNames_ {
				if v142 > 0 {
					out.RawByte(',')
				}
				out.String(string(v143))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v144, v145 := range in.OutputNames_ {
				if v144 > 0 {
					out.RawByte(',')
				}
				out.String(string(v145))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v146, v147 := range in.InputShapes_ {
				if v146 > 0 {
					out.RawByte(',')
				}
				if v147 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v148, v149 := range v147 {
						if v148 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v149))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v150, v151 := range in.OutputShapes_ {
				if v150 > 0 {
					out.RawByte(',')
				}
				if v151 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v152, v153 := range v151 {
						if v152 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v153))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Squeeze) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Squeeze) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Squeeze) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Squeeze) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer11(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer12(in *jlexer.Lexer, out *Softmax) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v154 string
					v154 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v154)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v155 string
					v155 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v155)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v156 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v156 = nil
					} else {
						in.Delim('[')
						if v156 == nil {
							if !in.IsDelim(']') {
								v156 = make(pkg.Shape, 0, 8)
							} else {
								v156 = pkg.Shape{}
							}
						} else {
							v156 = (v156)[:0]
						}
						for !in.IsDelim(']') {
							var v157 int64
							v157 = int64(in.Int64())
							v156 = append(v156, v157)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v156)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v158 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v158 = nil
					} else {
						in.Delim('[')
						if v158 == nil {
							if !in.IsDelim(']') {
								v158 = make(pkg.Shape, 0, 8)
							} else {
								v158 = pkg.Shape{}
							}
						} else {
							v158 = (v158)[:0]
						}
						for !in.IsDelim(']') {
							var v159 int64
							v159 = int64(in.Int64())
							v158 = append(v158, v159)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v158)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer12(out *jwriter.Writer, in Softmax) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v160, v161 := range in.InputNames_ {
				if v160 > 0 {
					out.RawByte(',')
				}
				out.String(string(v161))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v162, v163 := range in.OutputNames_ {
				if v162 > 0 {
					out.RawByte(',')
				}
				out.String(string(v163))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v164, v165 := range in.InputShapes_ {
				if v164 > 0 {
					out.RawByte(',')
				}
				if v165 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v166, v167 := range v165 {
						if v166 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v167))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v168, v169 := range in.OutputShapes_ {
				if v168 > 0 {
					out.RawByte(',')
				}
				if v169 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v170, v171 := range v169 {
						if v170 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v171))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Softmax) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Softmax) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Softmax) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Softmax) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer12(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer13(in *jlexer.Lexer, out *Shape) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v172 string
					v172 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v172)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v173 string
					v173 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v173)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v174 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v174 = nil
					} else {
						in.Delim('[')
						if v174 == nil {
							if !in.IsDelim(']') {
								v174 = make(pkg.Shape, 0, 8)
							} else {
								v174 = pkg.Shape{}
							}
						} else {
							v174 = (v174)[:0]
						}
						for !in.IsDelim(']') {
							var v175 int64
							v175 = int64(in.Int64())
							v174 = append(v174, v175)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v174)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v176 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v176 = nil
					} else {
						in.Delim('[')
						if v176 == nil {
							if !in.IsDelim(']') {
								v176 = make(pkg.Shape, 0, 8)
							} else {
								v176 = pkg.Shape{}
							}
						} else {
							v176 = (v176)[:0]
						}
						for !in.IsDelim(']') {
							var v177 int64
							v177 = int64(in.Int64())
							v176 = append(v176, v177)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v176)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer13(out *jwriter.Writer, in Shape) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v178, v179 := range in.InputNames_ {
				if v178 > 0 {
					out.RawByte(',')
				}
				out.String(string(v179))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v180, v181 := range in.OutputNames_ {
				if v180 > 0 {
					out.RawByte(',')
				}
				out.String(string(v181))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v182, v183 := range in.InputShapes_ {
				if v182 > 0 {
					out.RawByte(',')
				}
				if v183 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v184, v185 := range v183 {
						if v184 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v185))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v186, v187 := range in.OutputShapes_ {
				if v186 > 0 {
					out.RawByte(',')
				}
				if v187 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v188, v189 := range v187 {
						if v188 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v189))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Shape) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Shape) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Shape) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Shape) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer13(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer14(in *jlexer.Lexer, out *Scale) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v190 string
					v190 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v190)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v191 string
					v191 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v191)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v192 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v192 = nil
					} else {
						in.Delim('[')
						if v192 == nil {
							if !in.IsDelim(']') {
								v192 = make(pkg.Shape, 0, 8)
							} else {
								v192 = pkg.Shape{}
							}
						} else {
							v192 = (v192)[:0]
						}
						for !in.IsDelim(']') {
							var v193 int64
							v193 = int64(in.Int64())
							v192 = append(v192, v193)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v192)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v194 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v194 = nil
					} else {
						in.Delim('[')
						if v194 == nil {
							if !in.IsDelim(']') {
								v194 = make(pkg.Shape, 0, 8)
							} else {
								v194 = pkg.Shape{}
							}
						} else {
							v194 = (v194)[:0]
						}
						for !in.IsDelim(']') {
							var v195 int64
							v195 = int64(in.Int64())
							v194 = append(v194, v195)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v194)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer14(out *jwriter.Writer, in Scale) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v196, v197 := range in.InputNames_ {
				if v196 > 0 {
					out.RawByte(',')
				}
				out.String(string(v197))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v198, v199 := range in.OutputNames_ {
				if v198 > 0 {
					out.RawByte(',')
				}
				out.String(string(v199))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v200, v201 := range in.InputShapes_ {
				if v200 > 0 {
					out.RawByte(',')
				}
				if v201 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v202, v203 := range v201 {
						if v202 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v203))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v204, v205 := range in.OutputShapes_ {
				if v204 > 0 {
					out.RawByte(',')
				}
				if v205 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v206, v207 := range v205 {
						if v206 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v207))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Scale) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Scale) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Scale) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Scale) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer14(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer15(in *jlexer.Lexer, out *Reshape) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v208 string
					v208 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v208)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v209 string
					v209 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v209)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v210 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v210 = nil
					} else {
						in.Delim('[')
						if v210 == nil {
							if !in.IsDelim(']') {
								v210 = make(pkg.Shape, 0, 8)
							} else {
								v210 = pkg.Shape{}
							}
						} else {
							v210 = (v210)[:0]
						}
						for !in.IsDelim(']') {
							var v211 int64
							v211 = int64(in.Int64())
							v210 = append(v210, v211)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v210)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v212 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v212 = nil
					} else {
						in.Delim('[')
						if v212 == nil {
							if !in.IsDelim(']') {
								v212 = make(pkg.Shape, 0, 8)
							} else {
								v212 = pkg.Shape{}
							}
						} else {
							v212 = (v212)[:0]
						}
						for !in.IsDelim(']') {
							var v213 int64
							v213 = int64(in.Int64())
							v212 = append(v212, v213)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v212)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer15(out *jwriter.Writer, in Reshape) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v214, v215 := range in.InputNames_ {
				if v214 > 0 {
					out.RawByte(',')
				}
				out.String(string(v215))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v216, v217 := range in.OutputNames_ {
				if v216 > 0 {
					out.RawByte(',')
				}
				out.String(string(v217))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v218, v219 := range in.InputShapes_ {
				if v218 > 0 {
					out.RawByte(',')
				}
				if v219 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v220, v221 := range v219 {
						if v220 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v221))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v222, v223 := range in.OutputShapes_ {
				if v222 > 0 {
					out.RawByte(',')
				}
				if v223 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v224, v225 := range v223 {
						if v224 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v225))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reshape) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reshape) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reshape) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reshape) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer15(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer16(in *jlexer.Lexer, out *Relu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v226 string
					v226 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v226)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v227 string
					v227 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v227)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v228 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v228 = nil
					} else {
						in.Delim('[')
						if v228 == nil {
							if !in.IsDelim(']') {
								v228 = make(pkg.Shape, 0, 8)
							} else {
								v228 = pkg.Shape{}
							}
						} else {
							v228 = (v228)[:0]
						}
						for !in.IsDelim(']') {
							var v229 int64
							v229 = int64(in.Int64())
							v228 = append(v228, v229)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v228)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v230 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v230 = nil
					} else {
						in.Delim('[')
						if v230 == nil {
							if !in.IsDelim(']') {
								v230 = make(pkg.Shape, 0, 8)
							} else {
								v230 = pkg.Shape{}
							}
						} else {
							v230 = (v230)[:0]
						}
						for !in.IsDelim(']') {
							var v231 int64
							v231 = int64(in.Int64())
							v230 = append(v230, v231)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v230)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer16(out *jwriter.Writer, in Relu) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v232, v233 := range in.InputNames_ {
				if v232 > 0 {
					out.RawByte(',')
				}
				out.String(string(v233))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v234, v235 := range in.OutputNames_ {
				if v234 > 0 {
					out.RawByte(',')
				}
				out.String(string(v235))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v236, v237 := range in.InputShapes_ {
				if v236 > 0 {
					out.RawByte(',')
				}
				if v237 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v238, v239 := range v237 {
						if v238 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v239))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v240, v241 := range in.OutputShapes_ {
				if v240 > 0 {
					out.RawByte(',')
				}
				if v241 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v242, v243 := range v241 {
						if v242 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v243))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Relu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Relu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Relu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Relu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer16(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer17(in *jlexer.Lexer, out *Reduce) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axes":
			if in.IsNull() {
				in.Skip()
				out.Axes = nil
			} else {
				in.Delim('[')
				if out.Axes == nil {
					if !in.IsDelim(']') {
						out.Axes = make([]int64, 0, 8)
					} else {
						out.Axes = []int64{}
					}
				} else {
					out.Axes = (out.Axes)[:0]
				}
				for !in.IsDelim(']') {
					var v244 int64
					v244 = int64(in.Int64())
					out.Axes = append(out.Axes, v244)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "keepdims":
			out.KeepDims = bool(in.Bool())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v245 string
					v245 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v245)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v246 string
					v246 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v246)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v247 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v247 = nil
					} else {
						in.Delim('[')
						if v247 == nil {
							if !in.IsDelim(']') {
								v247 = make(pkg.Shape, 0, 8)
							} else {
								v247 = pkg.Shape{}
							}
						} else {
							v247 = (v247)[:0]
						}
						for !in.IsDelim(']') {
							var v248 int64
							v248 = int64(in.Int64())
							v247 = append(v247, v248)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v247)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v249 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v249 = nil
					} else {
						in.Delim('[')
						if v249 == nil {
							if !in.IsDelim(']') {
								v249 = make(pkg.Shape, 0, 8)
							} else {
								v249 = pkg.Shape{}
							}
						} else {
							v249 = (v249)[:0]
						}
						for !in.IsDelim(']') {
							var v250 int64
							v250 = int64(in.Int64())
							v249 = append(v249, v250)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v249)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer17(out *jwriter.Writer, in Reduce) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Axes) != 0 {
		const prefix string = ",\"axes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v251, v252 := range in.Axes {
				if v251 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v252))
			}
			out.RawByte(']')
		}
	}
	if in.KeepDims {
		const prefix string = ",\"keepdims\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.KeepDims))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v253, v254 := range in.InputNames_ {
				if v253 > 0 {
					out.RawByte(',')
				}
				out.String(string(v254))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v255, v256 := range in.OutputNames_ {
				if v255 > 0 {
					out.RawByte(',')
				}
				out.String(string(v256))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v257, v258 := range in.InputShapes_ {
				if v257 > 0 {
					out.RawByte(',')
				}
				if v258 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v259, v260 := range v258 {
						if v259 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v260))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v261, v262 := range in.OutputShapes_ {
				if v261 > 0 {
					out.RawByte(',')
				}
				if v262 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v263, v264 := range v262 {
						if v263 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v264))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reduce) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reduce) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reduce) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reduce) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer17(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer18(in *jlexer.Lexer, out *Pooling) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kernel_shape":
			if in.IsNull() {
				in.Skip()
				out.KernelShape = nil
			} else {
				in.Delim('[')
				if out.KernelShape == nil {
					if !in.IsDelim(']') {
						out.KernelShape = make(pkg.Shape, 0, 8)
					} else {
						out.KernelShape = pkg.Shape{}
					}
				} else {
					out.KernelShape = (out.KernelShape)[:0]
				}
				for !in.IsDelim(']') {
					var v265 int64
					v265 = int64(in.Int64())
					out.KernelShape = append(out.KernelShape, v265)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pads":
			if in.IsNull() {
				in.Skip()
				out.Pads = nil
			} else {
				in.Delim('[')
				if out.Pads == nil {
					if !in.IsDelim(']') {
						out.Pads = make(pkg.Shape, 0, 8)
					} else {
						out.Pads = pkg.Shape{}
					}
				} else {
					out.Pads = (out.Pads)[:0]
				}
				for !in.IsDelim(']') {
					var v266 int64
					v266 = int64(in.Int64())
					out.Pads = append(out.Pads, v266)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "strides":
			if in.IsNull() {
				in.Skip()
				out.Strides = nil
			} else {
				in.Delim('[')
				if out.Strides == nil {
					if !in.IsDelim(']') {
						out.Strides = make(pkg.Shape, 0, 8)
					} else {
						out.Strides = pkg.Shape{}
					}
				} else {
					out.Strides = (out.Strides)[:0]
				}
				for !in.IsDelim(']') {
					var v267 int64
					v267 = int64(in.Int64())
					out.Strides = append(out.Strides, v267)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v268 string
					v268 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v268)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v269 string
					v269 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v269)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v270 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v270 = nil
					} else {
						in.Delim('[')
						if v270 == nil {
							if !in.IsDelim(']') {
								v270 = make(pkg.Shape, 0, 8)
							} else {
								v270 = pkg.Shape{}
							}
						} else {
							v270 = (v270)[:0]
						}
						for !in.IsDelim(']') {
							var v271 int64
							v271 = int64(in.Int64())
							v270 = append(v270, v271)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v270)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v272 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v272 = nil
					} else {
						in.Delim('[')
						if v272 == nil {
							if !in.IsDelim(']') {
								v272 = make(pkg.Shape, 0, 8)
							} else {
								v272 = pkg.Shape{}
							}
						} else {
							v272 = (v272)[:0]
						}
						for !in.IsDelim(']') {
							var v273 int64
							v273 = int64(in.Int64())
							v272 = append(v272, v273)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v272)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer18(out *jwriter.Writer, in Pooling) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.KernelShape) != 0 {
		const prefix string = ",\"kernel_shape\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v274, v275 := range in.KernelShape {
				if v274 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v275))
			}
			out.RawByte(']')
		}
	}
	if len(in.Pads) != 0 {
		const prefix string = ",\"pads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v276, v277 := range in.Pads {
				if v276 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v277))
			}
			out.RawByte(']')
		}
	}
	if len(in.Strides) != 0 {
		const prefix string = ",\"strides\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v278, v279 := range in.Strides {
				if v278 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v279))
			}
			out.RawByte(']')
		}
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v280, v281 := range in.InputNames_ {
				if v280 > 0 {
					out.RawByte(',')
				}
				out.String(string(v281))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v282, v283 := range in.OutputNames_ {
				if v282 > 0 {
					out.RawByte(',')
				}
				out.String(string(v283))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v284, v285 := range in.InputShapes_ {
				if v284 > 0 {
					out.RawByte(',')
				}
				if v285 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v286, v287 := range v285 {
						if v286 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v287))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v288, v289 := range in.OutputShapes_ {
				if v288 > 0 {
					out.RawByte(',')
				}
				if v289 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v290, v291 := range v289 {
						if v290 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v291))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pooling) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pooling) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pooling) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pooling) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer18(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer19(in *jlexer.Lexer, out *NonMaxSuppression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v292 string
					v292 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v292)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v293 string
					v293 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v293)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v294 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v294 = nil
					} else {
						in.Delim('[')
						if v294 == nil {
							if !in.IsDelim(']') {
								v294 = make(pkg.Shape, 0, 8)
							} else {
								v294 = pkg.Shape{}
							}
						} else {
							v294 = (v294)[:0]
						}
						for !in.IsDelim(']') {
							var v295 int64
							v295 = int64(in.Int64())
							v294 = append(v294, v295)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v294)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v296 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v296 = nil
					} else {
						in.Delim('[')
						if v296 == nil {
							if !in.IsDelim(']') {
								v296 = make(pkg.Shape, 0, 8)
							} else {
								v296 = pkg.Shape{}
							}
						} else {
							v296 = (v296)[:0]
						}
						for !in.IsDelim(']') {
							var v297 int64
							v297 = int64(in.Int64())
							v296 = append(v296, v297)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v296)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer19(out *jwriter.Writer, in NonMaxSuppression) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v298, v299 := range in.InputNames_ {
				if v298 > 0 {
					out.RawByte(',')
				}
				out.String(string(v299))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v300, v301 := range in.OutputNames_ {
				if v300 > 0 {
					out.RawByte(',')
				}
				out.String(string(v301))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v302, v303 := range in.InputShapes_ {
				if v302 > 0 {
					out.RawByte(',')
				}
				if v303 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v304, v305 := range v303 {
						if v304 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v305))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v306, v307 := range in.OutputShapes_ {
				if v306 > 0 {
					out.RawByte(',')
				}
				if v307 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v308, v309 := range v307 {
						if v308 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v309))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NonMaxSuppression) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NonMaxSuppression) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NonMaxSuppression) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NonMaxSuppression) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer19(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer20(in *jlexer.Lexer, out *LRN) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v310 string
					v310 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v310)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v311 string
					v311 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v311)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v312 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v312 = nil
					} else {
						in.Delim('[')
						if v312 == nil {
							if !in.IsDelim(']') {
								v312 = make(pkg.Shape, 0, 8)
							} else {
								v312 = pkg.Shape{}
							}
						} else {
							v312 = (v312)[:0]
						}
						for !in.IsDelim(']') {
							var v313 int64
							v313 = int64(in.Int64())
							v312 = append(v312, v313)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v312)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v314 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v314 = nil
					} else {
						in.Delim('[')
						if v314 == nil {
							if !in.IsDelim(']') {
								v314 = make(pkg.Shape, 0, 8)
							} else {
								v314 = pkg.Shape{}
							}
						} else {
							v314 = (v314)[:0]
						}
						for !in.IsDelim(']') {
							var v315 int64
							v315 = int64(in.Int64())
							v314 = append(v314, v315)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v314)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer20(out *jwriter.Writer, in LRN) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Size))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v316, v317 := range in.InputNames_ {
				if v316 > 0 {
					out.RawByte(',')
				}
				out.String(string(v317))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v318, v319 := range in.OutputNames_ {
				if v318 > 0 {
					out.RawByte(',')
				}
				out.String(string(v319))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v320, v321 := range in.InputShapes_ {
				if v320 > 0 {
					out.RawByte(',')
				}
				if v321 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v322, v323 := range v321 {
						if v322 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v323))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v324, v325 := range in.OutputShapes_ {
				if v324 > 0 {
					out.RawByte(',')
				}
				if v325 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v326, v327 := range v325 {
						if v326 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v327))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LRN) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LRN) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LRN) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LRN) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer20(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer21(in *jlexer.Lexer, out *Identity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v328 string
					v328 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v328)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v329 string
					v329 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v329)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v330 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v330 = nil
					} else {
						in.Delim('[')
						if v330 == nil {
							if !in.IsDelim(']') {
								v330 = make(pkg.Shape, 0, 8)
							} else {
								v330 = pkg.Shape{}
							}
						} else {
							v330 = (v330)[:0]
						}
						for !in.IsDelim(']') {
							var v331 int64
							v331 = int64(in.Int64())
							v330 = append(v330, v331)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v330)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v332 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v332 = nil
					} else {
						in.Delim('[')
						if v332 == nil {
							if !in.IsDelim(']') {
								v332 = make(pkg.Shape, 0, 8)
							} else {
								v332 = pkg.Shape{}
							}
						} else {
							v332 = (v332)[:0]
						}
						for !in.IsDelim(']') {
							var v333 int64
							v333 = int64(in.Int64())
							v332 = append(v332, v333)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v332)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer21(out *jwriter.Writer, in Identity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v334, v335 := range in.InputNames_ {
				if v334 > 0 {
					out.RawByte(',')
				}
				out.String(string(v335))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v336, v337 := range in.OutputNames_ {
				if v336 > 0 {
					out.RawByte(',')
				}
				out.String(string(v337))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v338, v339 := range in.InputShapes_ {
				if v338 > 0 {
					out.RawByte(',')
				}
				if v339 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v340, v341 := range v339 {
						if v340 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v341))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v342, v343 := range in.OutputShapes_ {
				if v342 > 0 {
					out.RawByte(',')
				}
				if v343 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v344, v345 := range v343 {
						if v344 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v345))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Identity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Identity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Identity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Identity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer21(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer22(in *jlexer.Lexer, out *GlobalPooling) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v346 string
					v346 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v346)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v347 string
					v347 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v347)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v348 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v348 = nil
					} else {
						in.Delim('[')
						if v348 == nil {
							if !in.IsDelim(']') {
								v348 = make(pkg.Shape, 0, 8)
							} else {
								v348 = pkg.Shape{}
							}
						} else {
							v348 = (v348)[:0]
						}
						for !in.IsDelim(']') {
							var v349 int64
							v349 = int64(in.Int64())
							v348 = append(v348, v349)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v348)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v350 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v350 = nil
					} else {
						in.Delim('[')
						if v350 == nil {
							if !in.IsDelim(']') {
								v350 = make(pkg.Shape, 0, 8)
							} else {
								v350 = pkg.Shape{}
							}
						} else {
							v350 = (v350)[:0]
						}
						for !in.IsDelim(']') {
							var v351 int64
							v351 = int64(in.Int64())
							v350 = append(v350, v351)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v350)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer22(out *jwriter.Writer, in GlobalPooling) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v352, v353 := range in.InputNames_ {
				if v352 > 0 {
					out.RawByte(',')
				}
				out.String(string(v353))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v354, v355 := range in.OutputNames_ {
				if v354 > 0 {
					out.RawByte(',')
				}
				out.String(string(v355))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v356, v357 := range in.InputShapes_ {
				if v356 > 0 {
					out.RawByte(',')
				}
				if v357 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v358, v359 := range v357 {
						if v358 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v359))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v360, v361 := range in.OutputShapes_ {
				if v360 > 0 {
					out.RawByte(',')
				}
				if v361 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v362, v363 := range v361 {
						if v362 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v363))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalPooling) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalPooling) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalPooling) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalPooling) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer22(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer23(in *jlexer.Lexer, out *Gemm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alpha":
			out.Alpha = float64(in.Float64())
		case "beta":
			out.Beta = float64(in.Float64())
		case "transa":
			out.TransA = int64(in.Int64())
		case "transb":
			out.TransB = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v364 string
					v364 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v364)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v365 string
					v365 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v365)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v366 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v366 = nil
					} else {
						in.Delim('[')
						if v366 == nil {
							if !in.IsDelim(']') {
								v366 = make(pkg.Shape, 0, 8)
							} else {
								v366 = pkg.Shape{}
							}
						} else {
							v366 = (v366)[:0]
						}
						for !in.IsDelim(']') {
							var v367 int64
							v367 = int64(in.Int64())
							v366 = append(v366, v367)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v366)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v368 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v368 = nil
					} else {
						in.Delim('[')
						if v368 == nil {
							if !in.IsDelim(']') {
								v368 = make(pkg.Shape, 0, 8)
							} else {
								v368 = pkg.Shape{}
							}
						} else {
							v368 = (v368)[:0]
						}
						for !in.IsDelim(']') {
							var v369 int64
							v369 = int64(in.Int64())
							v368 = append(v368, v369)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v368)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer23(out *jwriter.Writer, in Gemm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Alpha != 0 {
		const prefix string = ",\"alpha\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Alpha))
	}
	if in.Beta != 0 {
		const prefix string = ",\"beta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Beta))
	}
	if in.TransA != 0 {
		const prefix string = ",\"transa\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransA))
	}
	if in.TransB != 0 {
		const prefix string = ",\"transb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransB))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v370, v371 := range in.InputNames_ {
				if v370 > 0 {
					out.RawByte(',')
				}
				out.String(string(v371))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v372, v373 := range in.OutputNames_ {
				if v372 > 0 {
					out.RawByte(',')
				}
				out.String(string(v373))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v374, v375 := range in.InputShapes_ {
				if v374 > 0 {
					out.RawByte(',')
				}
				if v375 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v376, v377 := range v375 {
						if v376 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v377))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v378, v379 := range in.OutputShapes_ {
				if v378 > 0 {
					out.RawByte(',')
				}
				if v379 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v380, v381 := range v379 {
						if v380 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v381))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gemm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gemm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gemm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gemm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer23(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer24(in *jlexer.Lexer, out *Gather) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v382 string
					v382 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v382)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v383 string
					v383 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v383)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v384 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v384 = nil
					} else {
						in.Delim('[')
						if v384 == nil {
							if !in.IsDelim(']') {
								v384 = make(pkg.Shape, 0, 8)
							} else {
								v384 = pkg.Shape{}
							}
						} else {
							v384 = (v384)[:0]
						}
						for !in.IsDelim(']') {
							var v385 int64
							v385 = int64(in.Int64())
							v384 = append(v384, v385)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v384)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v386 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v386 = nil
					} else {
						in.Delim('[')
						if v386 == nil {
							if !in.IsDelim(']') {
								v386 = make(pkg.Shape, 0, 8)
							} else {
								v386 = pkg.Shape{}
							}
						} else {
							v386 = (v386)[:0]
						}
						for !in.IsDelim(']') {
							var v387 int64
							v387 = int64(in.Int64())
							v386 = append(v386, v387)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v386)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer24(out *jwriter.Writer, in Gather) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v388, v389 := range in.InputNames_ {
				if v388 > 0 {
					out.RawByte(',')
				}
				out.String(string(v389))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v390, v391 := range in.OutputNames_ {
				if v390 > 0 {
					out.RawByte(',')
				}
				out.String(string(v391))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v392, v393 := range in.InputShapes_ {
				if v392 > 0 {
					out.RawByte(',')
				}
				if v393 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v394, v395 := range v393 {
						if v394 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v395))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v396, v397 := range in.OutputShapes_ {
				if v396 > 0 {
					out.RawByte(',')
				}
				if v397 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v398, v399 := range v397 {
						if v398 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v399))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gather) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gather) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gather) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gather) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer24(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer25(in *jlexer.Lexer, out *Flatten) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v400 string
					v400 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v400)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v401 string
					v401 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v401)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v402 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v402 = nil
					} else {
						in.Delim('[')
						if v402 == nil {
							if !in.IsDelim(']') {
								v402 = make(pkg.Shape, 0, 8)
							} else {
								v402 = pkg.Shape{}
							}
						} else {
							v402 = (v402)[:0]
						}
						for !in.IsDelim(']') {
							var v403 int64
							v403 = int64(in.Int64())
							v402 = append(v402, v403)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v402)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v404 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v404 = nil
					} else {
						in.Delim('[')
						if v404 == nil {
							if !in.IsDelim(']') {
								v404 = make(pkg.Shape, 0, 8)
							} else {
								v404 = pkg.Shape{}
							}
						} else {
							v404 = (v404)[:0]
						}
						for !in.IsDelim(']') {
							var v405 int64
							v405 = int64(in.Int64())
							v404 = append(v404, v405)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v404)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer25(out *jwriter.Writer, in Flatten) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v406, v407 := range in.InputNames_ {
				if v406 > 0 {
					out.RawByte(',')
				}
				out.String(string(v407))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v408, v409 := range in.OutputNames_ {
				if v408 > 0 {
					out.RawByte(',')
				}
				out.String(string(v409))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v410, v411 := range in.InputShapes_ {
				if v410 > 0 {
					out.RawByte(',')
				}
				if v411 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v412, v413 := range v411 {
						if v412 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v413))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v414, v415 := range in.OutputShapes_ {
				if v414 > 0 {
					out.RawByte(',')
				}
				if v415 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v416, v417 := range v415 {
						if v416 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v417))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Flatten) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Flatten) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Flatten) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Flatten) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer25(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer26(in *jlexer.Lexer, out *Exp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "broadcast":
			out.Broadcast = int64(in.Int64())
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v418 string
					v418 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v418)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v419 string
					v419 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v419)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v420 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v420 = nil
					} else {
						in.Delim('[')
						if v420 == nil {
							if !in.IsDelim(']') {
								v420 = make(pkg.Shape, 0, 8)
							} else {
								v420 = pkg.Shape{}
							}
						} else {
							v420 = (v420)[:0]
						}
						for !in.IsDelim(']') {
							var v421 int64
							v421 = int64(in.Int64())
							v420 = append(v420, v421)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v420)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v422 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v422 = nil
					} else {
						in.Delim('[')
						if v422 == nil {
							if !in.IsDelim(']') {
								v422 = make(pkg.Shape, 0, 8)
							} else {
								v422 = pkg.Shape{}
							}
						} else {
							v422 = (v422)[:0]
						}
						for !in.IsDelim(']') {
							var v423 int64
							v423 = int64(in.Int64())
							v422 = append(v422, v423)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v422)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer26(out *jwriter.Writer, in Exp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Broadcast != 0 {
		const prefix string = ",\"broadcast\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Broadcast))
	}
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v424, v425 := range in.InputNames_ {
				if v424 > 0 {
					out.RawByte(',')
				}
				out.String(string(v425))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v426, v427 := range in.OutputNames_ {
				if v426 > 0 {
					out.RawByte(',')
				}
				out.String(string(v427))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v428, v429 := range in.InputShapes_ {
				if v428 > 0 {
					out.RawByte(',')
				}
				if v429 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v430, v431 := range v429 {
						if v430 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v431))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v432, v433 := range in.OutputShapes_ {
				if v432 > 0 {
					out.RawByte(',')
				}
				if v433 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v434, v435 := range v433 {
						if v434 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v435))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Exp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Exp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Exp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Exp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer26(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer27(in *jlexer.Lexer, out *ElementWise) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "broadcast":
			out.Broadcast = int64(in.Int64())
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v436 string
					v436 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v436)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v437 string
					v437 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v437)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v438 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v438 = nil
					} else {
						in.Delim('[')
						if v438 == nil {
							if !in.IsDelim(']') {
								v438 = make(pkg.Shape, 0, 8)
							} else {
								v438 = pkg.Shape{}
							}
						} else {
							v438 = (v438)[:0]
						}
						for !in.IsDelim(']') {
							var v439 int64
							v439 = int64(in.Int64())
							v438 = append(v438, v439)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v438)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v440 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v440 = nil
					} else {
						in.Delim('[')
						if v440 == nil {
							if !in.IsDelim(']') {
								v440 = make(pkg.Shape, 0, 8)
							} else {
								v440 = pkg.Shape{}
							}
						} else {
							v440 = (v440)[:0]
						}
						for !in.IsDelim(']') {
							var v441 int64
							v441 = int64(in.Int64())
							v440 = append(v440, v441)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v440)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer27(out *jwriter.Writer, in ElementWise) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Broadcast != 0 {
		const prefix string = ",\"broadcast\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Broadcast))
	}
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v442, v443 := range in.InputNames_ {
				if v442 > 0 {
					out.RawByte(',')
				}
				out.String(string(v443))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v444, v445 := range in.OutputNames_ {
				if v444 > 0 {
					out.RawByte(',')
				}
				out.String(string(v445))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v446, v447 := range in.InputShapes_ {
				if v446 > 0 {
					out.RawByte(',')
				}
				if v447 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v448, v449 := range v447 {
						if v448 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v449))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v450, v451 := range in.OutputShapes_ {
				if v450 > 0 {
					out.RawByte(',')
				}
				if v451 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v452, v453 := range v451 {
						if v452 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v453))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ElementWise) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ElementWise) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ElementWise) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ElementWise) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer27(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer28(in *jlexer.Lexer, out *Dropout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v454 string
					v454 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v454)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v455 string
					v455 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v455)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v456 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v456 = nil
					} else {
						in.Delim('[')
						if v456 == nil {
							if !in.IsDelim(']') {
								v456 = make(pkg.Shape, 0, 8)
							} else {
								v456 = pkg.Shape{}
							}
						} else {
							v456 = (v456)[:0]
						}
						for !in.IsDelim(']') {
							var v457 int64
							v457 = int64(in.Int64())
							v456 = append(v456, v457)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v456)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v458 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v458 = nil
					} else {
						in.Delim('[')
						if v458 == nil {
							if !in.IsDelim(']') {
								v458 = make(pkg.Shape, 0, 8)
							} else {
								v458 = pkg.Shape{}
							}
						} else {
							v458 = (v458)[:0]
						}
						for !in.IsDelim(']') {
							var v459 int64
							v459 = int64(in.Int64())
							v458 = append(v458, v459)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v458)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer28(out *jwriter.Writer, in Dropout) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v460, v461 := range in.InputNames_ {
				if v460 > 0 {
					out.RawByte(',')
				}
				out.String(string(v461))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v462, v463 := range in.OutputNames_ {
				if v462 > 0 {
					out.RawByte(',')
				}
				out.String(string(v463))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v464, v465 := range in.InputShapes_ {
				if v464 > 0 {
					out.RawByte(',')
				}
				if v465 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v466, v467 := range v465 {
						if v466 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v467))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v468, v469 := range in.OutputShapes_ {
				if v468 > 0 {
					out.RawByte(',')
				}
				if v469 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v470, v471 := range v469 {
						if v470 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v471))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Dropout) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Dropout) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Dropout) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Dropout) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer28(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer29(in *jlexer.Lexer, out *Conv) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "auto_pad":
			out.AutoPad = string(in.String())
		case "dilation":
			if in.IsNull() {
				in.Skip()
				out.Dilations = nil
			} else {
				in.Delim('[')
				if out.Dilations == nil {
					if !in.IsDelim(']') {
						out.Dilations = make(pkg.Shape, 0, 8)
					} else {
						out.Dilations = pkg.Shape{}
					}
				} else {
					out.Dilations = (out.Dilations)[:0]
				}
				for !in.IsDelim(']') {
					var v472 int64
					v472 = int64(in.Int64())
					out.Dilations = append(out.Dilations, v472)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "group":
			out.Group = int64(in.Int64())
		case "kernel_shape":
			if in.IsNull() {
				in.Skip()
				out.KernelShape = nil
			} else {
				in.Delim('[')
				if out.KernelShape == nil {
					if !in.IsDelim(']') {
						out.KernelShape = make(pkg.Shape, 0, 8)
					} else {
						out.KernelShape = pkg.Shape{}
					}
				} else {
					out.KernelShape = (out.KernelShape)[:0]
				}
				for !in.IsDelim(']') {
					var v473 int64
					v473 = int64(in.Int64())
					out.KernelShape = append(out.KernelShape, v473)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pads":
			if in.IsNull() {
				in.Skip()
				out.Pads = nil
			} else {
				in.Delim('[')
				if out.Pads == nil {
					if !in.IsDelim(']') {
						out.Pads = make(pkg.Shape, 0, 8)
					} else {
						out.Pads = pkg.Shape{}
					}
				} else {
					out.Pads = (out.Pads)[:0]
				}
				for !in.IsDelim(']') {
					var v474 int64
					v474 = int64(in.Int64())
					out.Pads = append(out.Pads, v474)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "strides":
			if in.IsNull() {
				in.Skip()
				out.Strides = nil
			} else {
				in.Delim('[')
				if out.Strides == nil {
					if !in.IsDelim(']') {
						out.Strides = make(pkg.Shape, 0, 8)
					} else {
						out.Strides = pkg.Shape{}
					}
				} else {
					out.Strides = (out.Strides)[:0]
				}
				for !in.IsDelim(']') {
					var v475 int64
					v475 = int64(in.Int64())
					out.Strides = append(out.Strides, v475)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "has_bias":
			out.HasBias = bool(in.Bool())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v476 string
					v476 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v476)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v477 string
					v477 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v477)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v478 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v478 = nil
					} else {
						in.Delim('[')
						if v478 == nil {
							if !in.IsDelim(']') {
								v478 = make(pkg.Shape, 0, 8)
							} else {
								v478 = pkg.Shape{}
							}
						} else {
							v478 = (v478)[:0]
						}
						for !in.IsDelim(']') {
							var v479 int64
							v479 = int64(in.Int64())
							v478 = append(v478, v479)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v478)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v480 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v480 = nil
					} else {
						in.Delim('[')
						if v480 == nil {
							if !in.IsDelim(']') {
								v480 = make(pkg.Shape, 0, 8)
							} else {
								v480 = pkg.Shape{}
							}
						} else {
							v480 = (v480)[:0]
						}
						for !in.IsDelim(']') {
							var v481 int64
							v481 = int64(in.Int64())
							v480 = append(v480, v481)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v480)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer29(out *jwriter.Writer, in Conv) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AutoPad != "" {
		const prefix string = ",\"auto_pad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AutoPad))
	}
	if len(in.Dilations) != 0 {
		const prefix string = ",\"dilation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v482, v483 := range in.Dilations {
				if v482 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v483))
			}
			out.RawByte(']')
		}
	}
	if in.Group != 0 {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Group))
	}
	if len(in.KernelShape) != 0 {
		const prefix string = ",\"kernel_shape\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v484, v485 := range in.KernelShape {
				if v484 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v485))
			}
			out.RawByte(']')
		}
	}
	if len(in.Pads) != 0 {
		const prefix string = ",\"pads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v486, v487 := range in.Pads {
				if v486 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v487))
			}
			out.RawByte(']')
		}
	}
	if len(in.Strides) != 0 {
		const prefix string = ",\"strides\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v488, v489 := range in.Strides {
				if v488 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v489))
			}
			out.RawByte(']')
		}
	}
	if in.HasBias {
		const prefix string = ",\"has_bias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasBias))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v490, v491 := range in.InputNames_ {
				if v490 > 0 {
					out.RawByte(',')
				}
				out.String(string(v491))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v492, v493 := range in.OutputNames_ {
				if v492 > 0 {
					out.RawByte(',')
				}
				out.String(string(v493))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v494, v495 := range in.InputShapes_ {
				if v494 > 0 {
					out.RawByte(',')
				}
				if v495 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v496, v497 := range v495 {
						if v496 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v497))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v498, v499 := range in.OutputShapes_ {
				if v498 > 0 {
					out.RawByte(',')
				}
				if v499 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v500, v501 := range v499 {
						if v500 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v501))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conv) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conv) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conv) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conv) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer29(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer30(in *jlexer.Lexer, out *ConstantOfShape) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v502 string
					v502 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v502)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v503 string
					v503 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v503)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v504 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v504 = nil
					} else {
						in.Delim('[')
						if v504 == nil {
							if !in.IsDelim(']') {
								v504 = make(pkg.Shape, 0, 8)
							} else {
								v504 = pkg.Shape{}
							}
						} else {
							v504 = (v504)[:0]
						}
						for !in.IsDelim(']') {
							var v505 int64
							v505 = int64(in.Int64())
							v504 = append(v504, v505)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v504)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v506 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v506 = nil
					} else {
						in.Delim('[')
						if v506 == nil {
							if !in.IsDelim(']') {
								v506 = make(pkg.Shape, 0, 8)
							} else {
								v506 = pkg.Shape{}
							}
						} else {
							v506 = (v506)[:0]
						}
						for !in.IsDelim(']') {
							var v507 int64
							v507 = int64(in.Int64())
							v506 = append(v506, v507)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v506)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer30(out *jwriter.Writer, in ConstantOfShape) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v508, v509 := range in.InputNames_ {
				if v508 > 0 {
					out.RawByte(',')
				}
				out.String(string(v509))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v510, v511 := range in.OutputNames_ {
				if v510 > 0 {
					out.RawByte(',')
				}
				out.String(string(v511))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v512, v513 := range in.InputShapes_ {
				if v512 > 0 {
					out.RawByte(',')
				}
				if v513 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v514, v515 := range v513 {
						if v514 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v515))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v516, v517 := range in.OutputShapes_ {
				if v516 > 0 {
					out.RawByte(',')
				}
				if v517 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v518, v519 := range v517 {
						if v518 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v519))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConstantOfShape) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConstantOfShape) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConstantOfShape) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConstantOfShape) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer30(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer31(in *jlexer.Lexer, out *ConstantInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v520 string
					v520 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v520)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v521 string
					v521 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v521)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v522 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v522 = nil
					} else {
						in.Delim('[')
						if v522 == nil {
							if !in.IsDelim(']') {
								v522 = make(pkg.Shape, 0, 8)
							} else {
								v522 = pkg.Shape{}
							}
						} else {
							v522 = (v522)[:0]
						}
						for !in.IsDelim(']') {
							var v523 int64
							v523 = int64(in.Int64())
							v522 = append(v522, v523)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v522)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v524 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v524 = nil
					} else {
						in.Delim('[')
						if v524 == nil {
							if !in.IsDelim(']') {
								v524 = make(pkg.Shape, 0, 8)
							} else {
								v524 = pkg.Shape{}
							}
						} else {
							v524 = (v524)[:0]
						}
						for !in.IsDelim(']') {
							var v525 int64
							v525 = int64(in.Int64())
							v524 = append(v524, v525)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v524)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer31(out *jwriter.Writer, in ConstantInput) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v526, v527 := range in.InputNames_ {
				if v526 > 0 {
					out.RawByte(',')
				}
				out.String(string(v527))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v528, v529 := range in.OutputNames_ {
				if v528 > 0 {
					out.RawByte(',')
				}
				out.String(string(v529))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v530, v531 := range in.InputShapes_ {
				if v530 > 0 {
					out.RawByte(',')
				}
				if v531 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v532, v533 := range v531 {
						if v532 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v533))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v534, v535 := range in.OutputShapes_ {
				if v534 > 0 {
					out.RawByte(',')
				}
				if v535 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v536, v537 := range v535 {
						if v536 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v537))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConstantInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConstantInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConstantInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConstantInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer31(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer32(in *jlexer.Lexer, out *Constant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v538 string
					v538 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v538)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v539 string
					v539 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v539)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v540 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v540 = nil
					} else {
						in.Delim('[')
						if v540 == nil {
							if !in.IsDelim(']') {
								v540 = make(pkg.Shape, 0, 8)
							} else {
								v540 = pkg.Shape{}
							}
						} else {
							v540 = (v540)[:0]
						}
						for !in.IsDelim(']') {
							var v541 int64
							v541 = int64(in.Int64())
							v540 = append(v540, v541)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v540)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v542 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v542 = nil
					} else {
						in.Delim('[')
						if v542 == nil {
							if !in.IsDelim(']') {
								v542 = make(pkg.Shape, 0, 8)
							} else {
								v542 = pkg.Shape{}
							}
						} else {
							v542 = (v542)[:0]
						}
						for !in.IsDelim(']') {
							var v543 int64
							v543 = int64(in.Int64())
							v542 = append(v542, v543)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v542)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer32(out *jwriter.Writer, in Constant) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v544, v545 := range in.InputNames_ {
				if v544 > 0 {
					out.RawByte(',')
				}
				out.String(string(v545))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v546, v547 := range in.OutputNames_ {
				if v546 > 0 {
					out.RawByte(',')
				}
				out.String(string(v547))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v548, v549 := range in.InputShapes_ {
				if v548 > 0 {
					out.RawByte(',')
				}
				if v549 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v550, v551 := range v549 {
						if v550 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v551))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v552, v553 := range in.OutputShapes_ {
				if v552 > 0 {
					out.RawByte(',')
				}
				if v553 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v554, v555 := range v553 {
						if v554 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v555))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Constant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Constant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Constant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Constant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer32(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer33(in *jlexer.Lexer, out *Concat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "axis":
			out.Axis = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v556 string
					v556 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v556)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v557 string
					v557 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v557)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v558 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v558 = nil
					} else {
						in.Delim('[')
						if v558 == nil {
							if !in.IsDelim(']') {
								v558 = make(pkg.Shape, 0, 8)
							} else {
								v558 = pkg.Shape{}
							}
						} else {
							v558 = (v558)[:0]
						}
						for !in.IsDelim(']') {
							var v559 int64
							v559 = int64(in.Int64())
							v558 = append(v558, v559)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v558)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v560 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v560 = nil
					} else {
						in.Delim('[')
						if v560 == nil {
							if !in.IsDelim(']') {
								v560 = make(pkg.Shape, 0, 8)
							} else {
								v560 = pkg.Shape{}
							}
						} else {
							v560 = (v560)[:0]
						}
						for !in.IsDelim(']') {
							var v561 int64
							v561 = int64(in.Int64())
							v560 = append(v560, v561)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v560)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer33(out *jwriter.Writer, in Concat) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Axis != 0 {
		const prefix string = ",\"axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Axis))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v562, v563 := range in.InputNames_ {
				if v562 > 0 {
					out.RawByte(',')
				}
				out.String(string(v563))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v564, v565 := range in.OutputNames_ {
				if v564 > 0 {
					out.RawByte(',')
				}
				out.String(string(v565))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v566, v567 := range in.InputShapes_ {
				if v566 > 0 {
					out.RawByte(',')
				}
				if v567 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v568, v569 := range v567 {
						if v568 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v569))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v570, v571 := range in.OutputShapes_ {
				if v570 > 0 {
					out.RawByte(',')
				}
				if v571 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v572, v573 := range v571 {
						if v572 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v573))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Concat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Concat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Concat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Concat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer33(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer34(in *jlexer.Lexer, out *Clip) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "min":
			out.Min = float32(in.Float32())
		case "max":
			out.Max = float32(in.Float32())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v574 string
					v574 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v574)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v575 string
					v575 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v575)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v576 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v576 = nil
					} else {
						in.Delim('[')
						if v576 == nil {
							if !in.IsDelim(']') {
								v576 = make(pkg.Shape, 0, 8)
							} else {
								v576 = pkg.Shape{}
							}
						} else {
							v576 = (v576)[:0]
						}
						for !in.IsDelim(']') {
							var v577 int64
							v577 = int64(in.Int64())
							v576 = append(v576, v577)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v576)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v578 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v578 = nil
					} else {
						in.Delim('[')
						if v578 == nil {
							if !in.IsDelim(']') {
								v578 = make(pkg.Shape, 0, 8)
							} else {
								v578 = pkg.Shape{}
							}
						} else {
							v578 = (v578)[:0]
						}
						for !in.IsDelim(']') {
							var v579 int64
							v579 = int64(in.Int64())
							v578 = append(v578, v579)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v578)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer34(out *jwriter.Writer, in Clip) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Min != 0 {
		const prefix string = ",\"min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Min))
	}
	if in.Max != 0 {
		const prefix string = ",\"max\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Max))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v580, v581 := range in.InputNames_ {
				if v580 > 0 {
					out.RawByte(',')
				}
				out.String(string(v581))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v582, v583 := range in.OutputNames_ {
				if v582 > 0 {
					out.RawByte(',')
				}
				out.String(string(v583))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v584, v585 := range in.InputShapes_ {
				if v584 > 0 {
					out.RawByte(',')
				}
				if v585 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v586, v587 := range v585 {
						if v586 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v587))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v588, v589 := range in.OutputShapes_ {
				if v588 > 0 {
					out.RawByte(',')
				}
				if v589 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v590, v591 := range v589 {
						if v590 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v591))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Clip) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Clip) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Clip) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Clip) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer34(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer35(in *jlexer.Lexer, out *Cast) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v592 string
					v592 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v592)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v593 string
					v593 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v593)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v594 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v594 = nil
					} else {
						in.Delim('[')
						if v594 == nil {
							if !in.IsDelim(']') {
								v594 = make(pkg.Shape, 0, 8)
							} else {
								v594 = pkg.Shape{}
							}
						} else {
							v594 = (v594)[:0]
						}
						for !in.IsDelim(']') {
							var v595 int64
							v595 = int64(in.Int64())
							v594 = append(v594, v595)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v594)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v596 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v596 = nil
					} else {
						in.Delim('[')
						if v596 == nil {
							if !in.IsDelim(']') {
								v596 = make(pkg.Shape, 0, 8)
							} else {
								v596 = pkg.Shape{}
							}
						} else {
							v596 = (v596)[:0]
						}
						for !in.IsDelim(']') {
							var v597 int64
							v597 = int64(in.Int64())
							v596 = append(v596, v597)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v596)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer35(out *jwriter.Writer, in Cast) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v598, v599 := range in.InputNames_ {
				if v598 > 0 {
					out.RawByte(',')
				}
				out.String(string(v599))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v600, v601 := range in.OutputNames_ {
				if v600 > 0 {
					out.RawByte(',')
				}
				out.String(string(v601))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v602, v603 := range in.InputShapes_ {
				if v602 > 0 {
					out.RawByte(',')
				}
				if v603 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v604, v605 := range v603 {
						if v604 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v605))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v606, v607 := range in.OutputShapes_ {
				if v606 > 0 {
					out.RawByte(',')
				}
				if v607 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v608, v609 := range v607 {
						if v608 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v609))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cast) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cast) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cast) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cast) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer35(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer36(in *jlexer.Lexer, out *BatchNorm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Base = new(Base)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spatial":
			out.Spatial = int64(in.Int64())
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v610 string
					v610 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v610)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v611 string
					v611 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v611)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v612 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v612 = nil
					} else {
						in.Delim('[')
						if v612 == nil {
							if !in.IsDelim(']') {
								v612 = make(pkg.Shape, 0, 8)
							} else {
								v612 = pkg.Shape{}
							}
						} else {
							v612 = (v612)[:0]
						}
						for !in.IsDelim(']') {
							var v613 int64
							v613 = int64(in.Int64())
							v612 = append(v612, v613)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v612)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v614 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v614 = nil
					} else {
						in.Delim('[')
						if v614 == nil {
							if !in.IsDelim(']') {
								v614 = make(pkg.Shape, 0, 8)
							} else {
								v614 = pkg.Shape{}
							}
						} else {
							v614 = (v614)[:0]
						}
						for !in.IsDelim(']') {
							var v615 int64
							v615 = int64(in.Int64())
							v614 = append(v614, v615)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v614)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer36(out *jwriter.Writer, in BatchNorm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Spatial != 0 {
		const prefix string = ",\"spatial\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Spatial))
	}
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v616, v617 := range in.InputNames_ {
				if v616 > 0 {
					out.RawByte(',')
				}
				out.String(string(v617))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v618, v619 := range in.OutputNames_ {
				if v618 > 0 {
					out.RawByte(',')
				}
				out.String(string(v619))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v620, v621 := range in.InputShapes_ {
				if v620 > 0 {
					out.RawByte(',')
				}
				if v621 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v622, v623 := range v621 {
						if v622 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v623))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v624, v625 := range in.OutputShapes_ {
				if v624 > 0 {
					out.RawByte(',')
				}
				if v625 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v626, v627 := range v625 {
						if v626 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v627))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchNorm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchNorm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchNorm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchNorm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer36(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer37(in *jlexer.Lexer, out *BaseBenchmarkInputArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "input_0":
			out.Input0 = int64(in.Int64())
		case "input_1":
			out.Input1 = int64(in.Int64())
		case "input_2":
			out.Input2 = int64(in.Int64())
		case "input_3":
			out.Input3 = int64(in.Int64())
		case "input_4":
			out.Input4 = int64(in.Int64())
		case "input_5":
			out.Input5 = int64(in.Int64())
		case "input_6":
			out.Input6 = int64(in.Int64())
		case "input_7":
			out.Input7 = int64(in.Int64())
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer37(out *jwriter.Writer, in BaseBenchmarkInputArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Input0 != 0 {
		const prefix string = ",\"input_0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input0))
	}
	if in.Input1 != 0 {
		const prefix string = ",\"input_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input1))
	}
	if in.Input2 != 0 {
		const prefix string = ",\"input_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input2))
	}
	if in.Input3 != 0 {
		const prefix string = ",\"input_3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input3))
	}
	if in.Input4 != 0 {
		const prefix string = ",\"input_4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input4))
	}
	if in.Input5 != 0 {
		const prefix string = ",\"input_5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input5))
	}
	if in.Input6 != 0 {
		const prefix string = ",\"input_6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input6))
	}
	if in.Input7 != 0 {
		const prefix string = ",\"input_7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Input7))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseBenchmarkInputArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseBenchmarkInputArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseBenchmarkInputArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseBenchmarkInputArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer37(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer38(in *jlexer.Lexer, out *BaseBenchmarkArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "arg_names":
			if in.IsNull() {
				in.Skip()
				out.ArgNames = nil
			} else {
				in.Delim('[')
				if out.ArgNames == nil {
					if !in.IsDelim(']') {
						out.ArgNames = make([]string, 0, 4)
					} else {
						out.ArgNames = []string{}
					}
				} else {
					out.ArgNames = (out.ArgNames)[:0]
				}
				for !in.IsDelim(']') {
					var v628 string
					v628 = string(in.String())
					out.ArgNames = append(out.ArgNames, v628)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_benchmark_id":
			out.UniqueBenchmarkID = uint64(in.Uint64())
		case "benchmark_name":
			out.BenchmarkName = string(in.String())
		case "algorithms":
			if in.IsNull() {
				in.Skip()
				out.Algorithms = nil
			} else {
				in.Delim('[')
				if out.Algorithms == nil {
					if !in.IsDelim(']') {
						out.Algorithms = make([]string, 0, 4)
					} else {
						out.Algorithms = []string{}
					}
				} else {
					out.Algorithms = (out.Algorithms)[:0]
				}
				for !in.IsDelim(']') {
					var v629 string
					v629 = string(in.String())
					out.Algorithms = append(out.Algorithms, v629)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_types":
			if in.IsNull() {
				in.Skip()
				out.DataTypes = nil
			} else {
				in.Delim('[')
				if out.DataTypes == nil {
					if !in.IsDelim(']') {
						out.DataTypes = make([]pkg.DataType, 0, 2)
					} else {
						out.DataTypes = []pkg.DataType{}
					}
				} else {
					out.DataTypes = (out.DataTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v630 pkg.DataType
					easyjson36987811DecodeGithubComRaiProjectDlperfPkg(in, &v630)
					out.DataTypes = append(out.DataTypes, v630)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_training":
			out.IsTraining = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer38(out *jwriter.Writer, in BaseBenchmarkArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.ArgNames) != 0 {
		const prefix string = ",\"arg_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v631, v632 := range in.ArgNames {
				if v631 > 0 {
					out.RawByte(',')
				}
				out.String(string(v632))
			}
			out.RawByte(']')
		}
	}
	if in.UniqueBenchmarkID != 0 {
		const prefix string = ",\"unique_benchmark_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UniqueBenchmarkID))
	}
	if in.BenchmarkName != "" {
		const prefix string = ",\"benchmark_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BenchmarkName))
	}
	if len(in.Algorithms) != 0 {
		const prefix string = ",\"algorithms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v633, v634 := range in.Algorithms {
				if v633 > 0 {
					out.RawByte(',')
				}
				out.String(string(v634))
			}
			out.RawByte(']')
		}
	}
	if len(in.DataTypes) != 0 {
		const prefix string = ",\"data_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v635, v636 := range in.DataTypes {
				if v635 > 0 {
					out.RawByte(',')
				}
				easyjson36987811EncodeGithubComRaiProjectDlperfPkg(out, v636)
			}
			out.RawByte(']')
		}
	}
	if in.IsTraining {
		const prefix string = ",\"is_training\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTraining))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BatchSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseBenchmarkArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseBenchmarkArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseBenchmarkArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseBenchmarkArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer38(l, v)
}
func easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer39(in *jlexer.Lexer, out *Base) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name_ = string(in.String())
		case "operator_type":
			out.OperatorType_ = string(in.String())
		case "onnx_operator_type":
			out.OnnxOperatorType_ = string(in.String())
		case "input_names":
			if in.IsNull() {
				in.Skip()
				out.InputNames_ = nil
			} else {
				in.Delim('[')
				if out.InputNames_ == nil {
					if !in.IsDelim(']') {
						out.InputNames_ = make([]string, 0, 4)
					} else {
						out.InputNames_ = []string{}
					}
				} else {
					out.InputNames_ = (out.InputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v637 string
					v637 = string(in.String())
					out.InputNames_ = append(out.InputNames_, v637)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_names":
			if in.IsNull() {
				in.Skip()
				out.OutputNames_ = nil
			} else {
				in.Delim('[')
				if out.OutputNames_ == nil {
					if !in.IsDelim(']') {
						out.OutputNames_ = make([]string, 0, 4)
					} else {
						out.OutputNames_ = []string{}
					}
				} else {
					out.OutputNames_ = (out.OutputNames_)[:0]
				}
				for !in.IsDelim(']') {
					var v638 string
					v638 = string(in.String())
					out.OutputNames_ = append(out.OutputNames_, v638)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "input_shapes":
			if in.IsNull() {
				in.Skip()
				out.InputShapes_ = nil
			} else {
				in.Delim('[')
				if out.InputShapes_ == nil {
					if !in.IsDelim(']') {
						out.InputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.InputShapes_ = []pkg.Shape{}
					}
				} else {
					out.InputShapes_ = (out.InputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v639 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v639 = nil
					} else {
						in.Delim('[')
						if v639 == nil {
							if !in.IsDelim(']') {
								v639 = make(pkg.Shape, 0, 8)
							} else {
								v639 = pkg.Shape{}
							}
						} else {
							v639 = (v639)[:0]
						}
						for !in.IsDelim(']') {
							var v640 int64
							v640 = int64(in.Int64())
							v639 = append(v639, v640)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InputShapes_ = append(out.InputShapes_, v639)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output_shapes":
			if in.IsNull() {
				in.Skip()
				out.OutputShapes_ = nil
			} else {
				in.Delim('[')
				if out.OutputShapes_ == nil {
					if !in.IsDelim(']') {
						out.OutputShapes_ = make([]pkg.Shape, 0, 2)
					} else {
						out.OutputShapes_ = []pkg.Shape{}
					}
				} else {
					out.OutputShapes_ = (out.OutputShapes_)[:0]
				}
				for !in.IsDelim(']') {
					var v641 pkg.Shape
					if in.IsNull() {
						in.Skip()
						v641 = nil
					} else {
						in.Delim('[')
						if v641 == nil {
							if !in.IsDelim(']') {
								v641 = make(pkg.Shape, 0, 8)
							} else {
								v641 = pkg.Shape{}
							}
						} else {
							v641 = (v641)[:0]
						}
						for !in.IsDelim(']') {
							var v642 int64
							v642 = int64(in.Int64())
							v641 = append(v641, v642)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.OutputShapes_ = append(out.OutputShapes_, v641)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer39(out *jwriter.Writer, in Base) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name_ != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name_))
	}
	if in.OperatorType_ != "" {
		const prefix string = ",\"operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatorType_))
	}
	if in.OnnxOperatorType_ != "" {
		const prefix string = ",\"onnx_operator_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnnxOperatorType_))
	}
	if len(in.InputNames_) != 0 {
		const prefix string = ",\"input_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v643, v644 := range in.InputNames_ {
				if v643 > 0 {
					out.RawByte(',')
				}
				out.String(string(v644))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputNames_) != 0 {
		const prefix string = ",\"output_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v645, v646 := range in.OutputNames_ {
				if v645 > 0 {
					out.RawByte(',')
				}
				out.String(string(v646))
			}
			out.RawByte(']')
		}
	}
	if len(in.InputShapes_) != 0 {
		const prefix string = ",\"input_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v647, v648 := range in.InputShapes_ {
				if v647 > 0 {
					out.RawByte(',')
				}
				if v648 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v649, v650 := range v648 {
						if v649 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v650))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.OutputShapes_) != 0 {
		const prefix string = ",\"output_shapes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v651, v652 := range in.OutputShapes_ {
				if v651 > 0 {
					out.RawByte(',')
				}
				if v652 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v653, v654 := range v652 {
						if v653 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v654))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Base) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Base) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36987811EncodeGithubComRaiProjectDlperfPkgLayer39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Base) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Base) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36987811DecodeGithubComRaiProjectDlperfPkgLayer39(l, v)
}
