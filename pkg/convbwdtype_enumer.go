// Code generated by "enumer -type=ConvBwdType -json -text -yaml -sql"; DO NOT EDIT.

package dlperf

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _ConvBwdTypeName = "ConvBwdTypeUndefinedConvBwdTypeDataConvBwdTypeFilterConvBwdTypeBias"

var _ConvBwdTypeIndex = [...]uint8{0, 20, 35, 52, 67}

func (i ConvBwdType) String() string {
	if i < 0 || i >= ConvBwdType(len(_ConvBwdTypeIndex)-1) {
		return fmt.Sprintf("ConvBwdType(%d)", i)
	}
	return _ConvBwdTypeName[_ConvBwdTypeIndex[i]:_ConvBwdTypeIndex[i+1]]
}

var _ConvBwdTypeValues = []ConvBwdType{0, 1, 2, 3}

var _ConvBwdTypeNameToValueMap = map[string]ConvBwdType{
	_ConvBwdTypeName[0:20]:  0,
	_ConvBwdTypeName[20:35]: 1,
	_ConvBwdTypeName[35:52]: 2,
	_ConvBwdTypeName[52:67]: 3,
}

// ConvBwdTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ConvBwdTypeString(s string) (ConvBwdType, error) {
	if val, ok := _ConvBwdTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ConvBwdType values", s)
}

// ConvBwdTypeValues returns all values of the enum
func ConvBwdTypeValues() []ConvBwdType {
	return _ConvBwdTypeValues
}

// IsAConvBwdType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ConvBwdType) IsAConvBwdType() bool {
	for _, v := range _ConvBwdTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ConvBwdType
func (i ConvBwdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConvBwdType
func (i *ConvBwdType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ConvBwdType should be a string, got %s", data)
	}

	var err error
	*i, err = ConvBwdTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ConvBwdType
func (i ConvBwdType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ConvBwdType
func (i *ConvBwdType) UnmarshalText(text []byte) error {
	var err error
	*i, err = ConvBwdTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for ConvBwdType
func (i ConvBwdType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ConvBwdType
func (i *ConvBwdType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ConvBwdTypeString(s)
	return err
}

func (i ConvBwdType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ConvBwdType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ConvBwdTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
