// Code generated by "enumer -type=Accelerator -json -text -yaml -sql"; DO NOT EDIT.

package communication

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _AcceleratorName = "UnknownAcceleratorCPUAcceleratorGPUAccelerator"

var _AcceleratorIndex = [...]uint8{0, 18, 32, 46}

func (i Accelerator) String() string {
	if i < 0 || i >= Accelerator(len(_AcceleratorIndex)-1) {
		return fmt.Sprintf("Accelerator(%d)", i)
	}
	return _AcceleratorName[_AcceleratorIndex[i]:_AcceleratorIndex[i+1]]
}

var _AcceleratorValues = []Accelerator{0, 1, 2}

var _AcceleratorNameToValueMap = map[string]Accelerator{
	_AcceleratorName[0:18]:  0,
	_AcceleratorName[18:32]: 1,
	_AcceleratorName[32:46]: 2,
}

// AcceleratorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AcceleratorString(s string) (Accelerator, error) {
	if val, ok := _AcceleratorNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Accelerator values", s)
}

// AcceleratorValues returns all values of the enum
func AcceleratorValues() []Accelerator {
	return _AcceleratorValues
}

// IsAAccelerator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Accelerator) IsAAccelerator() bool {
	for _, v := range _AcceleratorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Accelerator
func (i Accelerator) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Accelerator
func (i *Accelerator) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Accelerator should be a string, got %s", data)
	}

	var err error
	*i, err = AcceleratorString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Accelerator
func (i Accelerator) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Accelerator
func (i *Accelerator) UnmarshalText(text []byte) error {
	var err error
	*i, err = AcceleratorString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Accelerator
func (i Accelerator) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Accelerator
func (i *Accelerator) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = AcceleratorString(s)
	return err
}

func (i Accelerator) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Accelerator) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := AcceleratorString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
