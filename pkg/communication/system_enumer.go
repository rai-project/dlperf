// Code generated by "enumer -type=System -json -text -yaml -sql"; DO NOT EDIT.

//
package communication

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_SystemName_0 = "UnknownSystemSystemIBMP9"
	_SystemName_1 = "SystemSuperMicro4096"
)

var (
	_SystemIndex_0 = [...]uint8{0, 13, 24}
	_SystemIndex_1 = [...]uint8{0, 20}
)

func (i System) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _SystemName_0[_SystemIndex_0[i]:_SystemIndex_0[i+1]]
	case i == 3:
		return _SystemName_1
	default:
		return fmt.Sprintf("System(%d)", i)
	}
}

var _SystemValues = []System{0, 1, 3}

var _SystemNameToValueMap = map[string]System{
	_SystemName_0[0:13]:  0,
	_SystemName_0[13:24]: 1,
	_SystemName_1[0:20]:  3,
}

// SystemString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SystemString(s string) (System, error) {
	if val, ok := _SystemNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to System values", s)
}

// SystemValues returns all values of the enum
func SystemValues() []System {
	return _SystemValues
}

// IsASystem returns "true" if the value is listed in the enum definition. "false" otherwise
func (i System) IsASystem() bool {
	for _, v := range _SystemValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for System
func (i System) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for System
func (i *System) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("System should be a string, got %s", data)
	}

	var err error
	*i, err = SystemString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for System
func (i System) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for System
func (i *System) UnmarshalText(text []byte) error {
	var err error
	*i, err = SystemString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for System
func (i System) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for System
func (i *System) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SystemString(s)
	return err
}

func (i System) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *System) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := SystemString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
